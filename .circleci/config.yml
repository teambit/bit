version: 2.1

default_image: &default_image
  docker:
    - image: cimg/node:20.11.1

default_resource_class: &default_resource_class
  resource_class: medium

windows_default_resource_size: &windows_default_resource_size
  size: medium

default_working_dir: &default_working_dir
  working_directory: ~/bit

orbs:
  win: circleci/windows@5.0

windows_default_working_dir: &windows_default_working_dir
  working_directory: C:\Users\circleci\project\bit

windows_default_executor_name: &windows_default_executor_name
  name: win/default

windows_default_executor: &windows_default_executor
  executor:
    <<: [*windows_default_executor_name, *windows_default_resource_size]

windows_defaults: &windows_defaults
  <<: [*windows_default_executor, *windows_default_working_dir]

mac_default_resource_class: &mac_default_resource_class
  resource_class: macos.x86.medium.gen2

mac_default_xcode_version: &mac_default_xcode_version
  xcode: 14.3.1

mac_default_executor: &mac_default_executor
  macos:
    <<: [*mac_default_xcode_version, *mac_default_resource_class]

mac_defaults: &mac_defaults
  <<: *mac_default_executor

defaults: &defaults
  <<: [*default_image, *default_resource_class, *default_working_dir]

commands: # reusable commands
  bit_config:
    parameters:
      env:
        default: 'hub-stg'
        # default: 'hub'
        type: string
      token:
        default: $BIT_CLOUD_PROD_TOKEN
        type: string
      bin_name:
        default: bit
        type: string
    steps:
      - run: '<<parameters.bin_name>> config set analytics_reporting false'
      - run: '<<parameters.bin_name>> config set error_reporting false'
      - run: '<<parameters.bin_name>> config set user.name tester'
      - run: '<<parameters.bin_name>> config set user.email ci@bit.dev'
      - run: '<<parameters.bin_name>> config set registry https://node-registry.bit.cloud'
      # - run: '<<parameters.bin_name>> config set user.token <<parameters.token>>'
      - run: '<<parameters.bin_name>> config set hub_domain <<parameters.env>>.bit.dev'
      - run: '<<parameters.bin_name>> config set package-manager.cache /home/circleci/package-manager-cache'

  bit_global_for_npm:
    steps:
      - run:
          name: 'create npm global dir'
          command: 'mkdir -p /home/circleci/.npm-global/bin'
      - run:
          name: 'link bit to path'
          command: 'ln -sf /home/circleci/bit/bit/bin/bit.js /home/circleci/.npm-global/bin/bit'
      - run: "echo 'export PATH=~/.npm-global/bin:$PATH' >> $BASH_ENV"
      - run: which bit

  update_ssh_agent:
    steps:
      - # add the id_rsa to ssh_agent to make sure we authenticate with the correct user
        run: 'chmod 400 ~/.ssh/id_rsa'
      - run: 'ssh-add ~/.ssh/id_rsa'

  install_bvm:
    steps:
      - run: npm config set prefix '~/.npm-global'
      - run: npm install --global @teambit/bvm
      - run: "echo 'export PATH=~/.npm-global/bin:$PATH' >> $BASH_ENV"
      - run: bvm config set RELEASE_TYPE nightly

  set_git_credentials:
    steps:
      - run:
          name: 'set GitHub token'
          command: export GH_RELEASE_GITHUB_API_TOKEN=$ghToken
      - add_ssh_keys:
          fingerprints:
            - 'SHA256:fF5QridDUgTXkn8xIMZQNbn9sPN5QhNhc3jr8y8e2LI ci@bit.dev'
      - run:
          name: set git user.name and user.email
          command: 'git config --global user.email "ci@bit.dev" && git config --global user.name "CircleCI"'
      # - run:
      #     name: 'replace git protocol from ssh to http' # to not get the authenticate error
      #     command: sed -i 's/git@github.com:teambit\/bit.git/https:\/\/github.com\/teambit\/bit.git/g' .git/config
      # - run: mkdir -p ~/.ssh
      # - run: SCAN=$(ssh-keyscan github.com )
      # - run: echo $SCAN >> ~/.ssh/known_hosts
      - run: cd bit && git remote rm origin
      # todo: find a better way. currently, the ssh doesn't work, see the commented steps above.
      - run: cd bit && git remote add origin https://davidfirst:$GH_RELEASE_GITHUB_API_TOKEN@github.com/teambit/bit.git

jobs:
  checkout_code:
    <<: *defaults
    steps:
      - checkout
      - run:
          name: 'save SHA to a file'
          command: 'echo $CIRCLE_SHA1 > .circle-sha'
      - persist_to_workspace:
          root: /home/circleci
          paths:
            - bit

  set_ssh_key:
    <<: *defaults
    working_directory: ~/.ssh
    steps:
      - run: 'echo "-----BEGIN RSA PRIVATE KEY-----" >> ~/.ssh/id_rsa'
      - run: 'echo ${testerBitsrcSSHPrivateKey} >> id_rsa'
      - run: 'echo "-----END RSA PRIVATE KEY-----" >> ~/.ssh/id_rsa'
      - run: 'echo ${testerBitsrcSSHPublicKey} >> id_rsa.pub'
      - save_cache:
          key: bitsrc-ssh-key3
          paths:
            - ~/.ssh/id_rsa
            - ~/.ssh/id_rsa.pub

  set_npm_registries:
    <<: *defaults
    steps:
      # - run:
      #     name: setting npmjs registry
      #     command: echo "//registry.npmjs.org/:_authToken=${npmjsRegistryToken}" >> ~/.npmrc
      # - run: npm whoami
      # prod registry
      # - run: npm config set @bit:registry https://node.bit.dev
      - run: npm config set @bit:registry https://node-registry.bit.cloud
      # - run: echo "//node.bit.dev/:_authToken=$registryProdToken" >> ~/.npmrc
      - run: echo "//node-registry.bit.cloud/:_authToken=$registryProdToken" >> ~/.npmrc
      # - run: echo "always-auth=true" >> ~/.npmrc
      # stage registry
      # -
      # run: 'npm config set @bit:registry https://node-stg.bit.dev'
      # -
      # run: 'echo "//node-stg.bit.dev/:_authToken=$registryStgToken" >> ~/.npmrc'
      - save_cache:
          key: bitsrc-registry10
          # key: bitsrc-registry-stg-v2
          paths:
            - ~/.npmrc

  setup_harmony:
    resource_class: large
    <<: *defaults
    environment:
      BIT_FEATURES: cloud-importer-v2
    steps:
      - attach_workspace:
          at: ./
      - restore_cache:
          key: bitsrc-registry10
      - restore_cache:
          key: core-aspect-env-v0.0.25-v3
      - run: echo $BIT_FEATURES
      - run: node -v
      - run: npm -v
      # - run:
      #     name: 'install husky globally'
      #     command: 'npm i -g husky'

      - install_bvm
      - run: npm view @teambit/bit version > ./version.txt
      - restore_cache:
          key: v3-linux-bvm-folder-{{ checksum "version.txt" }}
      - run: bvm config set DEFAULT_LINK bbit
      - run: bvm config set RELEASE_TYPE nightly
      # - run: bvm install 0.0.910
      - run: bvm upgrade
      # - run: bvm install 1.5.36
      - run: bvm link --verbose
      - bit_config:
          env: "hub"
          bin_name: "bbit"
      - run: bbit
      - save_cache:
          key: v3-linux-bvm-folder-{{ checksum "version.txt" }}
          paths:
            - /home/circleci/.bvm
      - run:
          name: bbit install
          command: cd bit && bbit install
      - save_cache:
          key: core-aspect-env-v0.0.25-v3
          paths:
            - /home/circleci/Library/Caches/Bit/capsules/caec9a1075d4addee151dbe7e351b809aaa4b088
      - run: cd bit && npm run link-bit-legacy
      # - run: cd bit && bbit compile

      # the following 3 commands should help debugging a random error on Circle: "sh: 1: babel: not found"
      # - run: cd bit && ls -l node_modules/@babel
      # - run: cd bit && ls -l node_modules/@babel/cli/bin
      # - run: cd bit && ls -l node_modules/.bin

      - run:
          name: 'Build bit source code'
          command: 'cd bit && npm run build'
      - run:
          name: 'Build bit-legacy types'
          command: 'cd bit && npm run build:types'
      - persist_to_workspace:
          root: .
          paths:
            - bit
            - .pnpm-store
      - store_artifacts:
          path: ~/Library/Caches/Bit/logs
      - store_artifacts:
          path: bit/yarn.lock

  bit_tag:
    resource_class: xlarge
    <<: *defaults
    environment:
      BIT_FEATURES: cloud-importer-v2
      NODE_OPTIONS: --max-old-space-size=15000
    steps:
      - attach_workspace:
          at: ./
      - bit_global_for_npm
      - install_bvm
      - run: npm view @teambit/bit version > ./version.txt
      - restore_cache:
          key: v3-linux-bvm-folder-{{ checksum "version.txt" }}
      - restore_cache:
          key: core-aspect-env-v0.0.25-v3
      - bit_config:
          env: "hub"
      - restore_cache:
          key: bitsrc-ssh-key3
      - restore_cache:
          key: bitsrc-registry10
      - update_ssh_agent
      - set_git_credentials
      - run:
          name: setting npmjs registry with publishing permission
          command: echo "//registry.npmjs.org/:_authToken=${npmjsRegistryToken}" >> ~/.npmrc
      - run: cd bit && node scripts/bump-bit-legacy-ver.js
      - run: bvm link
      - run: cd bit && bit config set force_local_build true
      # temporary, check if we can remove it
      - run: cd bit && bit cc
      - run: cd bit && bit status
      - run: cd bit && bit diff
      - run: cd bit && npm run generate-cli-reference
      - run: cd bit && npm run generate-cli-reference-json
      - run: cd bit && npm run generate-cli-reference-docs
      - run: cd bit && bit status # just to make sure that the new cli-reference.mdx file is valid
      - run: cd bit && bit checkout head teambit.harmony/content/cli-reference --auto-merge-resolve ours --skip-dependency-installation
      - run: cd bit && bit checkout head --skip-dependency-installation
      - run: cd bit && git diff
      # - run: cd bit && rm -rf node_modules/@teambit/legacy
      # - run: cd bit && bbit checkout head
      # - run: cd bit && npm run link-bit-legacy
      # since we removed the node_modules we need to make sure we compile, install and link everything again
      # - run: cd bit && bbit install --skip-import
      # - run: cd bit && bbit compile
      - run: cd bit && npm run link-bit-legacy
      # temporary, check if we can remove it
      - run: cd bit && bit cc

      # - run: cd bit && bit config set cache.max.objects 100000
      # - run: cd bit && node scripts/soft-tag-scope-teambit.js
      - run:
          name: tag persist
          # command: cd bit && bit tag --ignore-newest-version
          # command: cd bit && bit tag --increment-by 3
          # command: cd bit && bit tag --increment-by 2
          command: cd bit && bit tag
          # command: cd bit && bit tag --persist
          # command: cd bit && bit tag --persist --ignore-newest-version
          no_output_timeout: '25m'
          environment:
            NODE_OPTIONS: --max-old-space-size=15000
      - run: cd bit && git diff
      - run:
          name: backup bit objects (before export)
          command: cd bit && tar -zcvf objects-before-export.tar .git/bit/objects
      - persist_to_workspace:
          root: .
          paths:
            - bit/.git/bit
            - bit/.bitmap
            - bit/workspace.jsonc
      - store_artifacts:
          path: ~/Library/Caches/Bit/logs
      - store_artifacts:
          path: bit/objects-before-export.tar

  bit_export:
    <<: *defaults
    environment:
      BIT_FEATURES: cloud-importer-v2
    steps:
      - attach_workspace:
          at: ./
      - bit_global_for_npm
      - bit_config:
          env: "hub"
      - restore_cache:
          key: bitsrc-ssh-key3
      - restore_cache:
          key: bitsrc-registry10
      - update_ssh_agent
      - set_git_credentials
      - run: bit config set user.token ${BIT_CLOUD_PROD_TOKEN}
      - run: cd bit && git diff
      - run:
          name: export components
          command: cd bit && bit export
          no_output_timeout: '20m'
      - run:
          name: backup bit objects (after export)
          command: cd bit && tar -zcvf objects-after-export.tar .git/bit/objects
      - run: cd bit && git commit -am "bump teambit version to `npm show @teambit/bit version` [skip ci]"
      # git pull first in case another commit entered to master so then the push could work with no errors.
      - run: cd bit && git config pull.rebase true && GIT_MERGE_AUTOEDIT=no git pull origin master
      # we use master here instead of ${CIRCLE_BRANCH} because we want to support running this from tag (manual nightly) as well
      - run: cd bit && git push origin master
      - store_artifacts:
          path: ~/Library/Caches/Bit/logs
      - store_artifacts:
          path: bit/objects-after-export.tar
      - store_artifacts:
          path: bit/.bitmap

workflows:
  nightly:
    jobs:
      - checkout_code
      - set_ssh_key
      - set_npm_registries
      - setup_harmony:
          requires:
            - set_npm_registries
            - checkout_code
      - bit_tag:
          requires:
            - setup_harmony
      - bit_export:
          requires:
            - bit_tag
