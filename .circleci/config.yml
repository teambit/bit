version: 2.1

default_image: &default_image
  docker:
    - image: cimg/node:20.11.1

default_resource_class: &default_resource_class
  resource_class: medium

windows_default_resource_size: &windows_default_resource_size
  size: medium

default_working_dir: &default_working_dir
  working_directory: ~/bit

orbs:
  win: circleci/windows@5.0

windows_default_working_dir: &windows_default_working_dir
  working_directory: C:\Users\circleci\project\bit

windows_default_executor_name: &windows_default_executor_name
  name: win/default

windows_default_executor: &windows_default_executor
  executor:
    <<: [*windows_default_executor_name, *windows_default_resource_size]

windows_defaults: &windows_defaults
  <<: [*windows_default_executor, *windows_default_working_dir]

mac_default_resource_class: &mac_default_resource_class
  resource_class: macos.x86.medium.gen2

mac_default_xcode_version: &mac_default_xcode_version
  xcode: 14.3.1

mac_default_executor: &mac_default_executor
  macos:
    <<: [*mac_default_xcode_version, *mac_default_resource_class]

mac_defaults: &mac_defaults
  <<: *mac_default_executor

defaults: &defaults
  <<: [*default_image, *default_resource_class, *default_working_dir]

semver_tags_only_filters: &semver_tags_only_filters
  filters:
    # ignore any commit on any branch by default
    branches:
      ignore: /.*/
    # only act on version tags
    tags:
      only: /^v[0-9]+(\.[0-9]+)*$/

master_only_filter: &master_only_filter
  filters:
    branches:
      only: master

commands: # reusable commands
  bit_config:
    parameters:
      env:
        default: 'hub-stg'
        # default: 'hub'
        type: string
      token:
        default: $BIT_CLOUD_PROD_TOKEN
        type: string
      bin_name:
        default: bit
        type: string
    steps:
      - run: '<<parameters.bin_name>> config set analytics_reporting false'
      - run: '<<parameters.bin_name>> config set error_reporting false'
      - run: '<<parameters.bin_name>> config set user.name tester'
      - run: '<<parameters.bin_name>> config set user.email ci@bit.dev'
      - run: '<<parameters.bin_name>> config set registry https://node-registry.bit.cloud'
      # - run: '<<parameters.bin_name>> config set user.token <<parameters.token>>'
      - run: '<<parameters.bin_name>> config set hub_domain <<parameters.env>>.bit.dev'
      - run: '<<parameters.bin_name>> config set package-manager.cache /home/circleci/package-manager-cache'
  docker_build_and_push:
    parameters:
      docker_build_arg_name:
        default: 'BASE_IMAGE'
        type: string
      docker_build_arg_value:
        default: 'node:20.11.1'
        type: string
      image_name:
        default: 'bitcli/bit'
        type: string
      docker_file_name:
        default: 'Dockerfile-bit'
        type: string
      docker_tag_suffix:
        # I want this to be something like '-node-<<parameters.node_version>>' but I don't think we can access other params here
        default: ''
        type: string
    steps:
      - docker_build_internal:
          image_name: "<<parameters.image_name>>"
          docker_file_name: "<<parameters.docker_file_name>>"
          docker_tag_suffix: "<<parameters.docker_tag_suffix>>"
          docker_build_arg_name: "<<parameters.docker_build_arg_name>>"
          docker_build_arg_value: "<<parameters.docker_build_arg_value>>"
      - docker_push:
          image_name: "<<parameters.image_name>>"
          docker_tag_suffix: "<<parameters.docker_tag_suffix>>"

  docker_build_internal:
    parameters:
      docker_build_arg_name:
        default: 'BASE_IMAGE'
        type: string
      docker_build_arg_value:
        default: 'node:20.11.1'
        type: string
      image_name:
        default: 'bitcli/bit'
        type: string
      docker_file_name:
        default: 'Dockerfile-bit'
        type: string
      docker_tag_suffix:
        default: ""
        type: string
    steps:
      - run: cd bit/scripts && docker build -f ./docker-teambit-bit/<<parameters.docker_file_name>> --build-arg <<parameters.docker_build_arg_name>>=<<parameters.docker_build_arg_value>> -t <<parameters.image_name>>:`npm show @teambit/bit version`<<parameters.docker_tag_suffix>> .
      - run: cd bit/scripts && docker build -f ./docker-teambit-bit/<<parameters.docker_file_name>> --build-arg <<parameters.docker_build_arg_name>>=<<parameters.docker_build_arg_value>> -t <<parameters.image_name>>:latest<<parameters.docker_tag_suffix>> .

  docker_push:
    parameters:
      image_name:
        default: 'bitcli/bit'
        type: string
      docker_tag_suffix:
        default: ''
        type: string
    steps:
      - run: echo "$DOCKER_PASS" | docker login --username $DOCKER_USER --password-stdin
      - run: cd bit && docker push <<parameters.image_name>>:`npm show @teambit/bit version`<<parameters.docker_tag_suffix>>
      - run: cd bit && docker push <<parameters.image_name>>:latest<<parameters.docker_tag_suffix>>

  bit_global_for_npm:
    steps:
      - run:
          name: 'create npm global dir'
          command: 'mkdir -p /home/circleci/.npm-global/bin'
      - run:
          name: 'link bit to path'
          command: 'ln -sf /home/circleci/bit/bit/bin/bit.js /home/circleci/.npm-global/bin/bit'
      - run: "echo 'export PATH=~/.npm-global/bin:$PATH' >> $BASH_ENV"
      - run: which bit

  update_ssh_agent:
    steps:
      - # add the id_rsa to ssh_agent to make sure we authenticate with the correct user
        run: 'chmod 400 ~/.ssh/id_rsa'
      - run: 'ssh-add ~/.ssh/id_rsa'
  install_bvm:
    steps:
      - run: npm config set prefix '~/.npm-global'
      - run: npm install --global @teambit/bvm
      - run: "echo 'export PATH=~/.npm-global/bin:$PATH' >> $BASH_ENV"
      - run: bvm config set RELEASE_TYPE nightly
  set_bit_cloud_registry:
    steps:
      - run:
          name: set bit cloud registry in npm config
          command: npm config set @teambit:registry=https://node-registry.bit.cloud
      - run:
          name: set bit cloud registry in npm config
          command: npm config set @bitdev:registry=https://node-registry.bit.cloud

  set_git_credentials:
    steps:
      - run:
          name: 'set GitHub token'
          command: export GH_RELEASE_GITHUB_API_TOKEN=$ghToken
      - add_ssh_keys:
          fingerprints:
            - 'SHA256:fF5QridDUgTXkn8xIMZQNbn9sPN5QhNhc3jr8y8e2LI ci@bit.dev'
      - run:
          name: set git user.name and user.email
          command: 'git config --global user.email "ci@bit.dev" && git config --global user.name "CircleCI"'
      # - run:
      #     name: 'replace git protocol from ssh to http' # to not get the authenticate error
      #     command: sed -i 's/git@github.com:teambit\/bit.git/https:\/\/github.com\/teambit\/bit.git/g' .git/config
      # - run: mkdir -p ~/.ssh
      # - run: SCAN=$(ssh-keyscan github.com )
      # - run: echo $SCAN >> ~/.ssh/known_hosts
      - run: cd bit && git remote rm origin
      # todo: find a better way. currently, the ssh doesn't work, see the commented steps above.
      - run: cd bit && git remote add origin https://davidfirst:$GH_RELEASE_GITHUB_API_TOKEN@github.com/teambit/bit.git
  windows_set_node_version:
    parameters:
      version:
        default: 20.11.1
        type: string
    steps:
      - run: choco upgrade nvm -y
      - run: nvm -v
      - run: nvm install 20.11.1
      - run: nvm use 20.11.1
      - run: node -v
  windows_add_bvm_to_path:
    steps:
      - run: New-Item $Profile.CurrentUserAllHosts -Force
      - run: Add-Content -Path $Profile.CurrentUserAllHosts -Value '$env:PATH = "C:\Users\circleci\AppData\Local\.bvm;$env:PATH"'
      - run: $Env:Path.Split(';')

  setup_bit_version:
    steps:
      - run:
          name: print bit version
          command: npm view @teambit/bit version
      - run:
          name: Setup bit version environment variables
          command: echo "export BIT_VERSION=$(npm view @teambit/bit version)" >> $BASH_ENV && source $BASH_ENV
      - run:
          name: create empty folder
          command: mkdir bit-${BIT_VERSION}

  setup_pnpm:
    steps:
      - run:
          name: Install pnpm
          command: >
            npm config set prefix '~/.npm-global' &&
            npm install --global pnpm@8.10.4 &&
            echo 'export PATH=~/.npm-global/bin:$PATH' >> $BASH_ENV

  compress_bit:
    steps:
      - run:
          name: Compress Bit
          command: >
            tar -cvf bit-${BIT_VERSION}.tar.gz
            --exclude=bit-${BIT_VERSION}/.npmrc
            --exclude=bit-${BIT_VERSION}/package.json
            --exclude=bit-${BIT_VERSION}/pnpm-lock.yaml
            bit-${BIT_VERSION}

jobs:
  checkout_code:
    <<: *defaults
    steps:
      - checkout
      - run:
          name: 'save SHA to a file'
          command: 'echo $CIRCLE_SHA1 > .circle-sha'
      - persist_to_workspace:
          root: /home/circleci
          paths:
            - bit

  # docker_build:
  #   machine:
  #     image: ubuntu-2004:202111-02
  #   steps:
  #     - attach_workspace:
  #         at: ./
  #     - docker_build_and_push

  docker_build_node_20:
    machine:
      image: ubuntu-2004:202111-02
    steps:
      - attach_workspace:
          at: ./
      - docker_build_and_push:
          docker_build_arg_value: "node:20.11.1"
          docker_tag_suffix: "-node-20.11.1"

  # docker_non_root_build:
  #   machine:
  #     image: ubuntu-2004:202111-02
  #   steps:
  #     - attach_workspace:
  #         at: ./
  #     - docker_build_and_push:
  #         image_name: "bitcli/bit-non-root"
  #         docker_file_name: "Dockerfile-bit-non-root"

  docker_non_root_build_node_20:
    machine:
      image: ubuntu-2004:202111-02
    steps:
      - attach_workspace:
          at: ./
      - docker_build_and_push:
          docker_build_arg_value: "node:20.11.1"
          image_name: "bitcli/bit-non-root"
          docker_file_name: "Dockerfile-bit-non-root"
          docker_tag_suffix: "-node-20.11.1"

  server_docker_build_node_20:
    machine:
      image: ubuntu-2004:202111-02
    steps:
      - attach_workspace:
          at: ./
      - docker_build_and_push:
          docker_build_arg_name: "BIT_IMAGE"
          docker_build_arg_value: "`npm show @teambit/bit version`-node-20.11.1"
          image_name: "bitcli/bit-server"
          docker_file_name: "Dockerfile-bit-server"
          docker_tag_suffix: "-node-20.11.1"

  set_ssh_key:
    <<: *defaults
    working_directory: ~/.ssh
    steps:
      - run: 'echo "-----BEGIN RSA PRIVATE KEY-----" >> ~/.ssh/id_rsa'
      - run: 'echo ${testerBitsrcSSHPrivateKey} >> id_rsa'
      - run: 'echo "-----END RSA PRIVATE KEY-----" >> ~/.ssh/id_rsa'
      - run: 'echo ${testerBitsrcSSHPublicKey} >> id_rsa.pub'
      - save_cache:
          key: bitsrc-ssh-key3
          paths:
            - ~/.ssh/id_rsa
            - ~/.ssh/id_rsa.pub

  set_npm_registries:
    <<: *defaults
    steps:
      # - run:
      #     name: setting npmjs registry
      #     command: echo "//registry.npmjs.org/:_authToken=${npmjsRegistryToken}" >> ~/.npmrc
      # - run: npm whoami
      # prod registry
      # - run: npm config set @bit:registry https://node.bit.dev
      - run: npm config set @bit:registry https://node-registry.bit.cloud
      # - run: echo "//node.bit.dev/:_authToken=$registryProdToken" >> ~/.npmrc
      - run: echo "//node-registry.bit.cloud/:_authToken=$registryProdToken" >> ~/.npmrc
      # - run: echo "always-auth=true" >> ~/.npmrc
      # stage registry
      # -
      # run: 'npm config set @bit:registry https://node-stg.bit.dev'
      # -
      # run: 'echo "//node-stg.bit.dev/:_authToken=$registryStgToken" >> ~/.npmrc'
      - save_cache:
          key: bitsrc-registry10
          # key: bitsrc-registry-stg-v2
          paths:
            - ~/.npmrc


  generate_docs:
    <<: *defaults
    steps:
      - attach_workspace:
          at: ./
      - run:
          name: 'generate docs'
          command: 'cd bit && npm run doc-gen'
      - run:
          name: Setup generate doc build number environment variables
          command: echo "$CIRCLE_BUILD_NUM" > DOC_GEN_BUILD_NUM.txt
      - store_artifacts:
          path: bit/dist/cli.md
      - persist_to_workspace:
          root: .
          paths:
            - DOC_GEN_BUILD_NUM.txt

  slack_deploy_notification:
    <<: *defaults
    steps:
      - attach_workspace:
          at: ./
      - run:
          name: Setup generate doc build number environment variable
          command: echo "export DOC_GEN_BUILD_NUM=$(cat DOC_GEN_BUILD_NUM.txt)" >> $BASH_ENV && source $BASH_ENV
      - run:
          name: 'notify slack'
          command: 'cd bit && node ./scripts/slack-deploy-notification.js'
      - run:
          name: 'notify community slack'
          command: 'cd bit && node ./scripts/slack-deploy-notification.js community'

  unit_test:
    <<: *defaults
    steps:
      - run:
          name: 'save SHA to a file'
          command: 'echo $CIRCLE_SHA1 > .circle-sha'
      - attach_workspace:
          at: ./
      - run: 'cd bit && mkdir junit'
      - run:
          name: 'Run unit tests'
          command: 'cd bit && npm run test-circle'
          environment:
            FORCE_COLOR: 1
            MOCHA_FILE: junit/unit-test-results.xml
          when: always
      - store_test_results:
          path: bit/junit
      - store_artifacts:
          path: bit/junit

  lint:
    <<: *defaults
    resource_class: medium
    steps:
      - run:
          name: 'save SHA to a file'
          command: 'echo $CIRCLE_SHA1 > .circle-sha'
      - restore_cache:
          keys:
            - 'repo-{{ checksum ".circle-sha" }}'
      - attach_workspace:
          at: ./
      - run:
          name: 'run ESLint'
          command: 'cd bit && node --max-old-space-size=4096 node_modules/eslint/bin/eslint.js "{src,e2e,scopes,components}/**/*.{ts,tsx}" --format junit -o junit/eslint-results.xml'
          environment:
            NODE_OPTIONS: --max-old-space-size=4096
      - store_test_results:
          path: bit/junit
      - store_artifacts:
          path: bit/junit

  generate_and_check_types:
    <<: *defaults
    steps:
      - attach_workspace:
          at: ./
      - run:
          name: 'generate types'
          command: 'cd bit && npm run build:types'
      - run:
          name: 'run TSC'
          command: 'cd bit && npm run check-types'
      - run:
          name: 'make sure there is no "ramda" imported to Harmony'
          command: 'cd bit && ./scripts/validate-no-ramda.sh'
      - run:
          name: 'make sure there is no import aspects from default export'
          command: 'cd bit && ./scripts/validate-import-named-aspects.sh'
      - run:
          name: 'make sure the packages used in legacy are specified in package.json'
          command: 'cd bit && node scripts/validate-pkg-exist-in-pkg-json.js'
      - persist_to_workspace:
          root: .
          paths:
            - bit/dist

  setup_harmony:
    resource_class: large
    <<: *defaults
    environment:
      BIT_FEATURES: cloud-importer-v2
    steps:
      - attach_workspace:
          at: ./
      - restore_cache:
          key: bitsrc-registry10
      - restore_cache:
          key: core-aspect-env-v0.0.59-v1
      - run: echo $BIT_FEATURES
      - run: node -v
      - run: npm -v
      # - run:
      #     name: 'install husky globally'
      #     command: 'npm i -g husky'

      - install_bvm
      - run: npm view @teambit/bit version > ./version.txt
      - restore_cache:
          key: v3-linux-bvm-folder-{{ checksum "version.txt" }}
      - run: bvm config set DEFAULT_LINK bbit
      - run: bvm config set RELEASE_TYPE nightly
      - run: bvm upgrade
      # - run: bvm install 1.7.41
      - run: bvm link --verbose
      - bit_config:
          env: "hub"
          bin_name: "bbit"
      - run: bbit
      - save_cache:
          key: v3-linux-bvm-folder-{{ checksum "version.txt" }}
          paths:
            - /home/circleci/.bvm
      - run: cd bit && bbit init
      - run:
          name: bbit install
          command: cd bit && bbit install
      - save_cache:
          key: core-aspect-env-v0.0.59-v1
          paths:
            - /home/circleci/Library/Caches/Bit/capsules/caec9a107
      - run: cd bit && npm run link-bit-legacy
      # - run: cd bit && bbit compile

      # the following 3 commands should help debugging a random error on Circle: "sh: 1: babel: not found"
      # - run: cd bit && ls -l node_modules/@babel
      # - run: cd bit && ls -l node_modules/@babel/cli/bin
      # - run: cd bit && ls -l node_modules/.bin

      - run:
          name: 'Build bit source code'
          command: 'cd bit && npm run build'
      - run:
          name: 'Build bit-legacy types'
          command: 'cd bit && npm run build:types'
      - persist_to_workspace:
          root: .
          paths:
            - bit
            - .pnpm-store
      - store_artifacts:
          path: ~/Library/Caches/Bit/logs
      - store_artifacts:
          path: bit/yarn.lock

  bit_build:
    resource_class: xlarge
    <<: *defaults
    environment:
      BIT_FEATURES: cloud-importer-v2
      NODE_OPTIONS: --max-old-space-size=15000
    steps:
      - attach_workspace:
          at: ./
      - bit_global_for_npm
      - bit_config
      - restore_cache:
          key: bitsrc-ssh-key3
      - restore_cache:
          key: bitsrc-registry10
      - run: npm view @teambit/bit version > ./version.txt
      - restore_cache:
          key: v3-linux-bvm-folder-{{ checksum "version.txt" }}
      - restore_cache:
          key: core-aspect-env-v0.0.59-v1
      # - update_ssh_agent
      # temporary, check if we can remove it
      - run: cd bit && bit cc
      - run:
          name: 'bit status'
          command: 'cd bit && bit status'
      # run second time until we do real bit export
      - run:
          name: 'bit status'
          command: 'cd bit && ./scripts/bit-status.sh'
      - run:
          name: 'bit diff'
          command: cd bit && bit diff
      - run:
          name: 'bit build'
          command: 'cd bit && bit build'
          environment:
            NODE_OPTIONS: --max-old-space-size=15000
      - store_artifacts:
          path: ~/Library/Caches/Bit/logs

  bit_tag:
    resource_class: xlarge
    <<: *defaults
    environment:
      BIT_FEATURES: cloud-importer-v2
      NODE_OPTIONS: --max-old-space-size=15000
    steps:
      - attach_workspace:
          at: ./
      - bit_global_for_npm
      - install_bvm
      - run: npm view @teambit/bit version > ./version.txt
      - restore_cache:
          key: v3-linux-bvm-folder-{{ checksum "version.txt" }}
      - restore_cache:
          key: core-aspect-env-v0.0.59-v1
      - bit_config:
          env: "hub"
      - restore_cache:
          key: bitsrc-ssh-key3
      - restore_cache:
          key: bitsrc-registry10
      - update_ssh_agent
      - set_git_credentials
      - run:
          name: setting npmjs registry with publishing permission
          command: echo "//registry.npmjs.org/:_authToken=${npmjsRegistryToken}" >> ~/.npmrc
      - run: cd bit && node scripts/bump-bit-legacy-ver.js
      - run: bvm link
      - run: cd bit && bit config set force_local_build true
      # temporary, check if we can remove it
      - run: cd bit && bit cc
      - run: cd bit && bit status
      - run: cd bit && bit diff
      - run: cd bit && npm run generate-cli-reference
      - run: cd bit && npm run generate-cli-reference-json
      - run: cd bit && npm run generate-cli-reference-docs
      - run: cd bit && bit status # just to make sure that the new cli-reference.mdx file is valid
      - run: cd bit && bit checkout head teambit.harmony/content/cli-reference --auto-merge-resolve ours --skip-dependency-installation
      - run: cd bit && bit checkout head --skip-dependency-installation
      - run: cd bit && git diff
      # - run: cd bit && rm -rf node_modules/@teambit/legacy
      # - run: cd bit && bbit checkout head
      # - run: cd bit && npm run link-bit-legacy
      # since we removed the node_modules we need to make sure we compile, install and link everything again
      # - run: cd bit && bbit install --skip-import
      # - run: cd bit && bbit compile
      - run: cd bit && npm run link-bit-legacy
      # temporary, check if we can remove it
      - run: cd bit && bit cc

      # - run: cd bit && bit config set cache.max.objects 100000
      # - run: cd bit && node scripts/soft-tag-scope-teambit.js
      - run:
          name: tag persist
          # command: cd bit && bit tag --ignore-newest-version
          # command: cd bit && bit tag --increment-by 3
          # command: cd bit && bit tag --increment-by 2
          command: cd bit && bit tag
          # command: cd bit && bit tag --persist
          # command: cd bit && bit tag --persist --ignore-newest-version
          no_output_timeout: '25m'
          environment:
            NODE_OPTIONS: --max-old-space-size=15000
      - run: cd bit && git diff
      - run:
          name: backup bit objects (before export)
          command: cd bit && tar -zcvf objects-before-export.tar .git/bit/objects
      - persist_to_workspace:
          root: .
          paths:
            - bit/.git/bit
            - bit/.bitmap
            - bit/workspace.jsonc
            - bit/scopes/harmony/cli-reference
      - store_artifacts:
          path: ~/Library/Caches/Bit/logs
      - store_artifacts:
          path: bit/objects-before-export.tar

  # This is a special task that just wait 5 minutes (sleep)
  # it required before we install @teambit/bit from the registry
  # because sometime the registry metedata is cached which lead to sometimes getting missing packages during install
  sleep_5_minutes:
    <<: *defaults
    resource_class: small
    steps:
      - run: sleep 300;

  bundle_version_linux:
    <<: *defaults
    environment:
      # do not download chromium when installing puppeteer
      PUPPETEER_SKIP_CHROMIUM_DOWNLOAD: "true"
    steps:
      - attach_workspace:
            at: ./
      - set_bit_cloud_registry
      - setup_bit_version
      - setup_pnpm
      - run:
          name: install bit for Linux x64
          command: >
            cd bit-${BIT_VERSION} &&
            pnpm init &&
            echo "node-linker=hoisted" >> .npmrc &&
            echo "registry=https://node-registry.bit.cloud" >> .npmrc &&
            pnpm dlx @ialdama/jsonmod --key pnpm.supportedArchitectures.os --values linux --values linux &&
            pnpm dlx @ialdama/jsonmod --key pnpm.supportedArchitectures.cpu --values x64 --values x64 &&
            pnpm add @teambit/bit
      - compress_bit
      - run:
          name: move to linux folder
          command: mkdir linux && mv bit-${BIT_VERSION}.tar.gz linux/bit-${BIT_VERSION}.tar.gz
      - run:
          name: install bit for Linux arm64
          command: >
            cd bit-${BIT_VERSION} &&
            pnpm dlx @ialdama/jsonmod --key pnpm.supportedArchitectures.cpu --values arm64 --values arm64 &&
            pnpm install
      - compress_bit
      - run:
          name: move to linux-arm64 folder
          command: mkdir linux-arm64 && mv bit-${BIT_VERSION}.tar.gz linux-arm64/bit-${BIT_VERSION}.tar.gz

      - persist_to_workspace:
          root: .
          paths:
            - linux
            - linux-arm64
      - store_artifacts:
          path: linux
      - store_artifacts:
          path: linux-arm64

  bundle_version_macos:
    <<: *defaults
    environment:
      # do not download chromium when installing puppeteer
      PUPPETEER_SKIP_CHROMIUM_DOWNLOAD: "true"
    steps:
      - attach_workspace:
            at: ./
      - set_bit_cloud_registry
      - setup_bit_version
      - setup_pnpm
      - run:
          name: install bit for macOS x64
          command: >
            cd bit-${BIT_VERSION} &&
            pnpm init &&
            echo "node-linker=hoisted" >> .npmrc &&
            echo "registry=https://node-registry.bit.cloud" >> .npmrc &&
            pnpm dlx @ialdama/jsonmod --key pnpm.supportedArchitectures.os --values darwin --values darwin &&
            pnpm dlx @ialdama/jsonmod --key pnpm.supportedArchitectures.cpu --values x64 --values x64 &&
            pnpm add @teambit/bit
      - compress_bit
      - run:
          name: move to macos folder
          command: mkdir macos && mv bit-${BIT_VERSION}.tar.gz macos/bit-${BIT_VERSION}.tar.gz
      - run:
          name: install bit for macOS arm64
          command: >
            cd bit-${BIT_VERSION} &&
            pnpm dlx @ialdama/jsonmod --key pnpm.supportedArchitectures.cpu --values arm64 --values arm64 &&
            pnpm install
      - compress_bit
      - run:
          name: move to macos-arm64 folder
          command: mkdir macos-arm64 && mv bit-${BIT_VERSION}.tar.gz macos-arm64/bit-${BIT_VERSION}.tar.gz

      - persist_to_workspace:
          root: .
          paths:
            - macos
            - macos-arm64
      - store_artifacts:
          path: macos
      - store_artifacts:
          path: macos-arm64

  bundle_version_windows:
    <<: *defaults
    environment:
      # do not download chromium when installing puppeteer
      PUPPETEER_SKIP_CHROMIUM_DOWNLOAD: "true"
    steps:
      - attach_workspace:
            at: ./
      - set_bit_cloud_registry
      - setup_bit_version
      - setup_pnpm
      - run:
          name: install bit for Windows x64
          command: >
            cd bit-${BIT_VERSION} &&
            pnpm init &&
            echo "node-linker=hoisted" >> .npmrc &&
            echo "registry=https://node-registry.bit.cloud" >> .npmrc &&
            echo "prefer-symlinked-executables=false" >> .npmrc &&
            pnpm dlx @ialdama/jsonmod --key pnpm.supportedArchitectures.os --values win32 --values win32 &&
            pnpm dlx @ialdama/jsonmod --key pnpm.supportedArchitectures.cpu --values x64 --values x64 &&
            pnpm dlx @ialdama/jsonmod --key pnpm.neverBuiltDependencies --values cpu-features --values ssh2 &&
            pnpm add @teambit/bit
      - compress_bit
      - run:
          name: move to windows folder
          command: mkdir windows && mv bit-${BIT_VERSION}.tar.gz windows/bit-${BIT_VERSION}.tar.gz

      - persist_to_workspace:
          root: .
          paths:
            - windows
      - store_artifacts:
          path: windows

  harmony_publish_to_gcloud:
    docker:
      - image: bitcli/node-gcloud-sdk
    <<: *defaults
    steps:
      - attach_workspace:
          at: ./
      - run:
          name: Setup bit version environment variables
          command: echo "export BIT_VERSION=$(npm view @teambit/bit version)" >> $BASH_ENV && source $BASH_ENV
      - run:
          name: Configure gcloud auth
          command: echo "${COMMAND_GCLOUD_AUTHENTICATE}" > /tmp/gcloud-service-key.json && gcloud auth activate-service-account --key-file=/tmp/gcloud-service-key.json
      # - run:
      #     name: Upload tar file (Linux) to old location
      #     command: gsutil cp linux/bit-${BIT_VERSION}.tar.gz gs://bvm.bit.dev/versions/dev/Linux/${BIT_VERSION}/bit-${BIT_VERSION}.tar.gz
      # - run:
      #     name: Upload tar file (Windows) to old location
      #     command: gsutil cp windows/bit-${BIT_VERSION}.tar.gz gs://bvm.bit.dev/versions/dev/Windows_NT/${BIT_VERSION}/bit-${BIT_VERSION}.tar.gz
      # - run:
      #     name: Upload tar file (OSX) to old location
      #     command: gsutil cp macos/bit-${BIT_VERSION}.tar.gz gs://bvm.bit.dev/versions/dev/Darwin/${BIT_VERSION}/bit-${BIT_VERSION}.tar.gz
      # - run:
      #     name: Upload tar file (OSX-arm64) to old location
      #     command: gsutil cp macos-arm64/bit-${BIT_VERSION}.tar.gz gs://bvm.bit.dev/versions/dev/Darwin-arm64/${BIT_VERSION}/bit-${BIT_VERSION}.tar.gz
      - run:
          name: Upload tar file (Linux)
          command: gsutil cp linux/bit-${BIT_VERSION}.tar.gz gs://bvm.bit.dev/bit/versions/${BIT_VERSION}/bit-${BIT_VERSION}-linux-x64.tar.gz && mv linux/bit-${BIT_VERSION}.tar.gz bit-${BIT_VERSION}-linux-x64.tar.gz && sha256sum bit-${BIT_VERSION}-linux-x64.tar.gz > checksum.txt && gsutil cp checksum.txt gs://bvm.bit.dev/bit/versions/${BIT_VERSION}/bit-${BIT_VERSION}-linux-x64.checksum.txt
      - run:
          name: Upload tar file (Linux-arm64)
          command: gsutil cp linux-arm64/bit-${BIT_VERSION}.tar.gz gs://bvm.bit.dev/bit/versions/${BIT_VERSION}/bit-${BIT_VERSION}-linux-arm64.tar.gz && mv linux-arm64/bit-${BIT_VERSION}.tar.gz bit-${BIT_VERSION}-linux-arm64.tar.gz && sha256sum bit-${BIT_VERSION}-linux-arm64.tar.gz > checksum.txt && gsutil cp checksum.txt gs://bvm.bit.dev/bit/versions/${BIT_VERSION}/bit-${BIT_VERSION}-linux-arm64.checksum.txt
      - run:
          name: Upload tar file (Windows)
          command: gsutil cp windows/bit-${BIT_VERSION}.tar.gz gs://bvm.bit.dev/bit/versions/${BIT_VERSION}/bit-${BIT_VERSION}-win-x64.tar.gz && mv windows/bit-${BIT_VERSION}.tar.gz bit-${BIT_VERSION}-win-x64.tar.gz && sha256sum bit-${BIT_VERSION}-win-x64.tar.gz > checksum.txt && gsutil cp checksum.txt gs://bvm.bit.dev/bit/versions/${BIT_VERSION}/bit-${BIT_VERSION}-win-x64.checksum.txt
      - run:
          name: Upload tar file (OSX)
          command: gsutil cp macos/bit-${BIT_VERSION}.tar.gz gs://bvm.bit.dev/bit/versions/${BIT_VERSION}/bit-${BIT_VERSION}-darwin-x64.tar.gz && mv macos/bit-${BIT_VERSION}.tar.gz bit-${BIT_VERSION}-darwin-x64.tar.gz && sha256sum bit-${BIT_VERSION}-darwin-x64.tar.gz > checksum.txt && gsutil cp checksum.txt gs://bvm.bit.dev/bit/versions/${BIT_VERSION}/bit-${BIT_VERSION}-darwin-x64.checksum.txt
      - run:
          name: Upload tar file (OSX-arm64)
          command: gsutil cp macos-arm64/bit-${BIT_VERSION}.tar.gz gs://bvm.bit.dev/bit/versions/${BIT_VERSION}/bit-${BIT_VERSION}-darwin-arm64.tar.gz && mv macos-arm64/bit-${BIT_VERSION}.tar.gz bit-${BIT_VERSION}-darwin-arm64.tar.gz && sha256sum bit-${BIT_VERSION}-darwin-arm64.tar.gz > checksum.txt && gsutil cp checksum.txt gs://bvm.bit.dev/bit/versions/${BIT_VERSION}/bit-${BIT_VERSION}-darwin-arm64.checksum.txt
      - run: cd bit && node scripts/update-bit-gcp-index.js
      - run:
          name: Update index.json
          command: gsutil cp bit/index.json gs://bvm.bit.dev/bit/index.json
      - run:
          name: clear index.json cache
          command: gsutil setmeta -h "Cache-Control:no-cache" gs://bvm.bit.dev/bit/index.json
      - store_artifacts:
          path: bit/index.json

  bit_export:
    <<: *defaults
    environment:
      BIT_FEATURES: cloud-importer-v2
    steps:
      - attach_workspace:
          at: ./
      - bit_global_for_npm
      - bit_config:
          env: "hub"
      - restore_cache:
          key: bitsrc-ssh-key3
      - restore_cache:
          key: bitsrc-registry10
      - update_ssh_agent
      - set_git_credentials
      - run: bit config set user.token ${BIT_CLOUD_PROD_TOKEN}
      - run: cd bit && git diff
      - run:
          name: export components
          command: cd bit && bit export
          no_output_timeout: '20m'
      - run:
          name: backup bit objects (after export)
          command: cd bit && tar -zcvf objects-after-export.tar .git/bit/objects
      - run: cd bit && git commit -am "bump teambit version to `npm show @teambit/bit version` [skip ci]"
      # git pull first in case another commit entered to master so then the push could work with no errors.
      - run: cd bit && git config pull.rebase true && GIT_MERGE_AUTOEDIT=no git pull origin master
      # we use master here instead of ${CIRCLE_BRANCH} because we want to support running this from tag (manual nightly) as well
      - run: cd bit && git push origin master
      - store_artifacts:
          path: ~/Library/Caches/Bit/logs
      - store_artifacts:
          path: bit/objects-after-export.tar
      - store_artifacts:
          path: bit/.bitmap

  harmony_deploy_approval_job:
    <<: *defaults
    steps:
      - run: 'echo "starting harmony deploy"'

  e2e_test:
    <<: *defaults
    environment:
      BITSRC_ENV: stg
      BIT_FEATURES: cloud-importer-v2
    parallelism: 25
    steps:
      - attach_workspace:
          at: ./
      # - run:
      #     # there are bugs in version 6.4.1 see https://github.com/teambit/bit/issues/1746
      #     name: 'update npm to latest version'
      #     command: 'npm i -g npm@latest'
      - bit_global_for_npm
      - bit_config
      - restore_cache:
          key: bitsrc-ssh-key3
      - restore_cache:
          key: bitsrc-registry10
      - restore_cache:
          key: core-aspect-env-v0.0.59-v1
      - run: npm view @teambit/bit version > ./version.txt
      - restore_cache:
          key: v3-linux-bvm-folder-{{ checksum "version.txt" }}
      # add the id_rsa to ssh_agent to make sure we authenticate with the correct user
      # - run: 'chmod 400 ~/.ssh/id_rsa'
      # - run: 'ssh-add ~/.ssh/id_rsa'
      - run: 'cd bit && mkdir junit'
      - run: 'bit config set package-manager.cache /home/circleci/package-manager-cache'
      # Make sure when we run bit from e2e tests we run it from the global not from here
      - run: 'rm bit/node_modules/.bin/bit'
      - run:
          name: 'Run e2e tests'
          command: 'cd bit && circleci tests glob "e2e/**/*.e2e*.ts" | circleci tests split --split-by=filesize | xargs -n 1 npm run mocha-circleci'
          # command which support only - for debug purpose
          # command: cd bit && npm run e2e-test-circle --debug
          environment:
            MOCHA_FILE: junit/e2e-test-results.xml
          when: always
      - store_test_results:
          path: bit/junit
      - store_artifacts:
          path: bit/junit
      - store_artifacts:
          path: ~/Library/Caches/Bit/logs

  # # simple job just to print node version on windows
  # # this is to check what version of node you get when you update the windows orb
  # # as it's missing in their docs
  # windows_print_node_version:
    # <<: *windows_defaults
    # steps:
      # # - checkout
      # - run: node -v
      # - run: npm -v
      # - run: yarn -v
      # # - run: choco install nodejs --version 20.11.1
      # # - run: node -v
      # - run: cinst nodejs --version 20.11.1
      # - run: node -v

  windows_checkout_code:
    <<: *windows_defaults
    steps:
      # - checkout
      - run: git clone https://github.com/teambit/bit.git
      - persist_to_workspace:
          root: C:\Users\circleci\project
          paths:
            - bit

  # TODO: make it powershell if you want to use it
  windows_set_ssh_key:
    <<: *windows_defaults
    working_directory: C:\Users\circleci\.ssh
    steps:
      - run: 'echo "-----BEGIN RSA PRIVATE KEY-----" >> id_rsa'
      - run: 'echo ${testerBitsrcSSHPrivateKey} >> id_rsa'
      - run: 'echo "-----END RSA PRIVATE KEY-----" >> id_rsa'
      - run: 'echo ${testerBitsrcSSHPublicKey} >> id_rsa.pub'
      - save_cache:
          key: windows_bitsrc-ssh-key-v1
          paths:
            - id_rsa
            - id_rsa.pub

  windows_set_npm_registries:
    <<: *windows_defaults
    steps:
      # npmjs registry
      - run:
          name: setting npmjs registry
          command: Add-Content C:\Users\circleci\.npmrc ("//registry.npmjs.org/:_authToken=" + $Env:npmjsRegistryToken)
      # prod registry
      # -
      # run: npm config set @bit:registry https://node.bit.dev
      # - run: Add-Content -Path C:\Users\circleci\.npmrc  -Value '@bit:registry=https://node.bit.dev'
      - run: Add-Content -Path C:\Users\circleci\.npmrc  -Value '@bit:registry=https://node-registry.bit.cloud'
      # -
      #   run: Get-Content -Path C:\Users\circleci\.npmrc
      # -
      #   run: Add-Content -Path C:\Users\circleci\.npmrc  -Value '//node.bit.dev/:_authToken=$Env:registryProdToken'
      - run:
          name: setting bit registry
          command: Add-Content C:\Users\circleci\.npmrc ("//node.bit.dev/:_authToken=" + $Env:registryProdToken)
      - run:
          name: setting bit registry
          command: Add-Content C:\Users\circleci\.npmrc ("//node-registry.bit.cloud /:_authToken=" + $Env:registryProdToken)
      # stage registry
      # -
      #   run: Add-Content -Path C:\Users\circleci\.npmrc  -Value '@bit:registry=https://node-stg.bit.dev'
      # -
      #   run:
      #     name: setting bit registry
      #     command: Add-Content C:\Users\circleci\.npmrc ("//node-stg.bit.dev/:_authToken=" + $Env:registryStgToken)
      # -
      #   run: Add-Content -Path C:\Users\circleci\.npmrc  -Value '//node.bit.dev/:_authToken=$Env:registryStgToken'
      - save_cache:
          key: windows_bitsrc-registry-v6
          # key: windows_bitsrc-registry-stg-v2
          paths:
            - C:\Users\circleci\.npmrc

  windows_install_npm_deps:
    <<: *windows_defaults
    # skipping the pre-built binaries to make sure we build them by the pack step
    # testing the install script will be done in different workflow dedicated for this
    environment:
      SKIP_FETCH_BINARY: "true"
    steps:
      - attach_workspace:
          at: .
      - restore_cache:
          key: windows_bitsrc-registry-v6
          # key: windows_bitsrc-registry-stg-v2
      # -
      #   run: 'npm config list'
      - run:
          name: 'Install npm dependencies'
          command: 'cd bit; npm install'
      - persist_to_workspace:
          root: .
          paths:
            - bit/node_modules

  windows_build:
    <<: *windows_defaults
    steps:
      - attach_workspace:
          at: .
      - run:
          name: 'Build bit source code'
          command: 'cd bit; npm run build'
      - persist_to_workspace:
          root: .
          paths:
            - bit/dist

  windows_bvm_install:
    <<: *windows_defaults
    # environment:
    #   Path: C:\Users\circleci\.npm-global;C:\Users\circleci\AppData\Local\.bvm;$ENV:PATH
    steps:
      - attach_workspace:
          at: .
      - windows_add_bvm_to_path
      - windows_set_node_version
      - run: npm view @teambit/bit version | Out-File -FilePath .\version.txt
      - run: Get-Content -Path .\version.txt
      - restore_cache:
          key: v2-bvm-folder-{{ checksum "version.txt" }}
      - run: 'npm i -g @teambit/bvm'
      - run: bvm config set RELEASE_TYPE nightly
      - run:
          name: 'bvm upgrade'
          command: 'bvm upgrade'
          no_output_timeout: 60m
      # - windows_add_bvm_to_path
      - run: 'bit -v'
      - run: bit -v | Out-File -FilePath .\version.txt
      - run: Get-Content -Path .\version.txt
      - save_cache:
          key: v2-bvm-folder-{{ checksum "version.txt" }}
          paths:
            - C:\Users\circleci\AppData\Local\.bvm
      - persist_to_workspace:
          root: .
          paths:
            - version.txt

  windows_build_bvm:
    <<: *windows_defaults
    environment:
      BITSRC_ENV: stg
      SKIP_REGISTRY_TESTS: "true"
      SKIP_BIT_DEV_TESTS: "true"
      BIT_FEATURES: cloud-importer-v2
    steps:
      - attach_workspace:
          at: .
      # We can't use Node.js newer than 16.13.2 due to this issue with npm: https://github.com/npm/cli/issues/4234
      - windows_add_bvm_to_path
      - windows_set_node_version
      # - run: Get-Content -Path .\version.txt
      # - restore_cache:
      #     key: bvm-folder-v1
      - restore_cache:
          key: v2-bvm-folder-{{ checksum "version.txt" }}
      - run: bit -v
      - run:
          name: 'save SHA to a file'
          command: 'echo $CIRCLE_SHA1 > .circle-sha'
      - restore_cache:
          key: windows_bitsrc-ssh-key-v1
      - restore_cache:
          key: windows_bitsrc-registry-v1
          # key: windows_bitsrc-registry-stg-v2
      # -
      #   restore_cache:
      #     keys:
      #       - 'builded-{{ checksum ".circle-sha" }}'
      # -
      # add the id_rsa to ssh_agent to make sure we authenticate with the correct user
      #   run: 'chmod 400 ~/.ssh/id_rsa'
      # -
      #   run: 'ssh-add ~/.ssh/id_rsa'
      - bit_config:
          token: "fake-token"
      - run: 'pwd'
      - run: 'ls'
      - run: 'ls bit\bit'
      - run: 'cd bit\bit; bit install'
      - run: 'cd bit\bit; bit compile'
      - run: 'cd bit\bit; npm run build'
      - run: 'cd bit\bit; npm run build:types:windows'
      - persist_to_workspace:
          root: .
          paths:
            - bit
  windows_e2e_test_bvm:
    <<: *windows_defaults
    environment:
      BITSRC_ENV: stg
      SKIP_REGISTRY_TESTS: "true"
      SKIP_BIT_DEV_TESTS: "true"
    parallelism: 25
    steps:
      - attach_workspace:
          at: .
      # We can't use Node.js newer than 16.13.2 due to this issue with npm: https://github.com/npm/cli/issues/4234
      - windows_add_bvm_to_path
      - windows_set_node_version
      # - run: Get-Content -Path .\version.txt
      # - restore_cache:
      #     key: bvm-folder-v1
      - restore_cache:
          key: v2-bvm-folder-{{ checksum "version.txt" }}
      # - run: bit -v
      - run: 'setx path "%path%;C:\Users\circleci\AppData\Local\.bvm"'
      - run: bit -v
      # - run: 'npm i -g @teambit/bvm'
      # - run: 'bvm list'
      # - run: 'bvm link'
      # - run: bit -v
      - run:
          name: 'save SHA to a file'
          command: 'echo $CIRCLE_SHA1 > .circle-sha'
      - restore_cache:
          key: windows_bitsrc-ssh-key-v1
      - restore_cache:
          key: windows_bitsrc-registry-v1
          # key: windows_bitsrc-registry-stg-v2
      # -
      #   restore_cache:
      #     keys:
      #       - 'builded-{{ checksum ".circle-sha" }}'
      # -
      # add the id_rsa to ssh_agent to make sure we authenticate with the correct user
      #   run: 'chmod 400 ~/.ssh/id_rsa'
      # -
      #   run: 'ssh-add ~/.ssh/id_rsa'
      - run: 'cd bit\bit; mkdir junit'
      - bit_config:
          token: "fake-token"
      - run:
          name: 'write e2e files'
          command: 'cd bit\bit; circleci tests glob "e2e\*\*.e2e*.ts" | circleci tests split --split-by=filesize | Out-File -FilePath .\spec-files.txt'
      - run: Get-Content -Path .\bit\bit\spec-files.txt
      - run: 'cd bit\bit; cmd /c rmdir /s /q .\node_modules\@teambit\legacy; New-Item -Path node_modules\@teambit\legacy -ItemType SymbolicLink -Value .'
      - run:
          name: 'run e2e tests'
          command: 'cd bit\bit; $content = get-content spec-files.txt; npm run mocha-circleci $content'
          # command which support only - for debug purpose - this needed to be tested on windows (the glob might not work)
          # command: cd bit; npm run e2e-test-circle --debug
          environment:
            MOCHA_FILE: junit\e2e-test-results.xml
            NODE_OPTIONS: --no-warnings
          when: always
      - store_test_results:
          path: bit\junit
      - store_artifacts:
          path: bit\junit
      -
        store_artifacts:
          path: C:\Users\circleci\AppData\Local\Bit\logs\debug.log
  windows_e2e_test:
    <<: *windows_defaults
    environment:
      BITSRC_ENV: stg
      SKIP_REGISTRY_TESTS: "true"
      SKIP_BIT_DEV_TESTS: "true"
    parallelism: 25
    steps:
      - attach_workspace:
          at: .
      - run: $Env:Path
      - run: corepack enable && corepack prepare yarn@4.0.1 --activate
      - run: 'npm -v'
      # -
      #   run:
      #     # there are bugs in version 6.4.1 see https://github.com/teambit/bit/issues/1746
      #     name: 'update npm to latest version'
      #     command: 'npm i -g npm@latest'
      #
      # this might be required if you try to update npm version
      # - run: setx path "C:\Users\circleci\.npm-global"
      - run:
          name: 'save SHA to a file'
          command: 'echo $CIRCLE_SHA1 > .circle-sha'
      - restore_cache:
          key: windows_bitsrc-ssh-key-v1
      - restore_cache:
          key: windows_bitsrc-registry-v1
          # key: windows_bitsrc-registry-stg-v2
      # -
      #   restore_cache:
      #     keys:
      #       - 'builded-{{ checksum ".circle-sha" }}'
      # -
      # add the id_rsa to ssh_agent to make sure we authenticate with the correct user
      #   run: 'chmod 400 ~/.ssh/id_rsa'
      # -
      #   run: 'ssh-add ~/.ssh/id_rsa'
      - run: 'cd bit; mkdir junit'
      - run:
          name: 'npm link bit to global'
          command: cd bit; npm link
      - bit_config
      - run:
          name: 'write e2e files'
          command: 'cd bit; circleci tests glob "e2e\*\*.e2e*.ts" | circleci tests split --split-by=timings > spec-files.txt'
      - run:
          name: 'run e2e tests'
          command: 'cd bit; $content = get-content spec-files.txt; npm run mocha-circleci $content'
          # command which support only - for debug purpose - this needed to be tested on windows (the glob might not work)
          # command: cd bit; npm run e2e-test-circle --debug
          environment:
            MOCHA_FILE: junit\e2e-test-results.xml
            NODE_OPTIONS: --no-warnings
          when: always
      - store_test_results:
          path: bit\junit
      - store_artifacts:
          path: bit\junit
      # TODO: make it work for windows
      # -
      #   store_artifacts:
      #     path: ~/Library/Caches/Bit/logs/debug.log

workflows:
  build_and_test:
    jobs:
      - checkout_code
      - set_ssh_key
      - set_npm_registries
      - setup_harmony:
          requires:
            - set_npm_registries
            - checkout_code
      - unit_test:
          requires:
            - setup_harmony
      - lint:
          requires:
            - setup_harmony
      - generate_and_check_types:
          requires:
            - setup_harmony
      - generate_docs:
          <<: *semver_tags_only_filters
          requires:
            - setup_harmony
      - e2e_test:
          requires:
            - setup_harmony
      - bit_build:
          requires:
            - generate_and_check_types

  # windows_e2e:
  #   jobs:
  #     - windows_approval_job:
  #         type: approval
  #     - windows_checkout_code:
  #         requires:
  #           - windows_approval_job
  #     # - windows_set_ssh_key:
  #     #     requires:
  #     #       - windows_approval_job
  #     - windows_set_npm_registries:
  #         requires:
  #           - windows_approval_job
  #     - windows_install_npm_deps:
  #         requires:
  #           - windows_checkout_code
  #           - windows_set_npm_registries
  #     - windows_build:
  #         requires:
  #           - windows_install_npm_deps
  #     - windows_e2e_test:
  #         requires:
  #           - windows_build
  #           # - windows_set_ssh_key
  #           - windows_set_npm_registries

  nightly:
    triggers:
      - schedule: # every day at 3AM UTC (= 11PM EST = 6AM IST)
          cron: '0 3 * * *'
          filters:
            branches:
              only:
                - master
    jobs:
      - checkout_code
      - set_ssh_key
      - set_npm_registries
      - setup_harmony:
          requires:
            - set_npm_registries
            - checkout_code
      - bit_tag:
          <<: *master_only_filter
          requires:
            - setup_harmony
      - sleep_5_minutes:
          <<: *master_only_filter
          requires:
            - bit_tag
            - bit_export
      - bundle_version_linux:
          <<: *master_only_filter
          requires:
            - bit_tag
            - bit_export
            - sleep_5_minutes
      - bundle_version_macos:
          <<: *master_only_filter
          requires:
            - bit_tag
            - bit_export
            - sleep_5_minutes
      - bundle_version_windows:
          <<: *master_only_filter
          requires:
            - bit_tag
            - bit_export
            - sleep_5_minutes
      - harmony_publish_to_gcloud:
          <<: *master_only_filter
          requires:
            - bundle_version_linux
            - bundle_version_macos
            - bundle_version_windows
            - checkout_code # This is needed to generate index.json
      - bit_export:
          <<: *master_only_filter
          requires:
            - bit_tag
      # - docker_build:
      #     requires:
      #       - harmony_publish_to_gcloud
      # - docker_non_root_build:
      #     requires:
      #       - harmony_publish_to_gcloud
      # - server_docker_build:
      #     requires:
      #       - docker_build
      # - docker_build_node_18:
      #     requires:
      #       - harmony_publish_to_gcloud
      # - docker_non_root_build_node_18:
      #     requires:
      #       - harmony_publish_to_gcloud
      # - server_docker_build_node_18:
      #     requires:
      #       - docker_build_node_18
      - docker_build_node_20:
          requires:
            - harmony_publish_to_gcloud
      - docker_non_root_build_node_20:
          requires:
            - harmony_publish_to_gcloud
      - server_docker_build_node_20:
          requires:
            - docker_build_node_20

  windows-nightly:
    triggers:
      - schedule: # every day at 5AM UTC (= 1AM EST = 8AM IST)
          cron: '0 5 * * *'
          filters:
            branches:
              only:
                - master
    jobs:
      - windows_checkout_code
      - windows_set_ssh_key
      - windows_bvm_install:
          <<: *master_only_filter
          requires:
            - windows_checkout_code
      - windows_build_bvm:
          <<: *master_only_filter
          requires:
            - windows_bvm_install
      - windows_e2e_test_bvm:
          <<: *master_only_filter
          requires:
            - windows_checkout_code
            - windows_set_ssh_key
            - windows_bvm_install
            - windows_build_bvm

  # Uncomment in case you want to run the windows tests
  # build_and_test_windows:
  #   jobs:
  #     - windows_set_ssh_key
  #     - windows_checkout_code
  #     - windows_bvm_install
  #     # - windows_bvm_install:
  #         # requires:
  #         #   - windows_checkout_code
  #     - windows_build_bvm:
  #         requires:
  #           - windows_bvm_install
  #           - windows_checkout_code
  #     - windows_e2e_test_bvm:
  #         requires:
  #           - windows_checkout_code
  #           - windows_set_ssh_key
  #           - windows_bvm_install
  #           - windows_build_bvm
  # TODO: check if we can combine it with the regular nightly somehow
  harmony_deploy:
    jobs:
      - harmony_deploy_approval_job:
          <<: *master_only_filter
          type: approval
      - checkout_code:
          <<: *master_only_filter
          requires:
            - harmony_deploy_approval_job
      - set_ssh_key:
          <<: *master_only_filter
          requires:
            - harmony_deploy_approval_job
      - set_npm_registries:
          <<: *master_only_filter
          requires:
            - harmony_deploy_approval_job
      - setup_harmony:
          <<: *master_only_filter
          requires:
            - harmony_deploy_approval_job
            - set_npm_registries
            - checkout_code
      - bit_tag:
          <<: *master_only_filter
          requires:
            - harmony_deploy_approval_job
            - setup_harmony
      - sleep_5_minutes:
          <<: *master_only_filter
          requires:
            - harmony_deploy_approval_job
            - bit_tag
            - bit_export
      - bundle_version_linux:
          <<: *master_only_filter
          requires:
            - harmony_deploy_approval_job
            - bit_tag
            - bit_export
            - sleep_5_minutes
      - bundle_version_macos:
          <<: *master_only_filter
          requires:
            - harmony_deploy_approval_job
            - bit_tag
            - bit_export
            - sleep_5_minutes
      - bundle_version_windows:
          <<: *master_only_filter
          requires:
            - harmony_deploy_approval_job
            - bit_tag
            - bit_export
            - sleep_5_minutes
      - harmony_publish_to_gcloud:
          <<: *master_only_filter
          requires:
            - harmony_deploy_approval_job
            - bundle_version_linux
            - bundle_version_macos
            - bundle_version_windows
            - checkout_code # This is needed to generate index.json
      - bit_export:
          <<: *master_only_filter
          requires:
            - bit_tag
            - harmony_deploy_approval_job
      # - docker_build:
      #     requires:
      #       - harmony_deploy_approval_job
      #       - harmony_publish_to_gcloud
      # - docker_non_root_build:
      #     requires:
      #       - harmony_deploy_approval_job
      #       - harmony_publish_to_gcloud
      # - server_docker_build:
      #     requires:
      #       - harmony_deploy_approval_job
      #       - docker_build
      # - docker_build_node_18:
      #     requires:
      #       - harmony_deploy_approval_job
      #       - harmony_publish_to_gcloud
      # - docker_non_root_build_node_18:
      #     requires:
      #       - harmony_deploy_approval_job
      #       - harmony_publish_to_gcloud
      # - server_docker_build_node_18:
      #     requires:
      #       - harmony_deploy_approval_job
      #       - docker_build_node_18
      - docker_build_node_20:
          requires:
            - harmony_deploy_approval_job
            - harmony_publish_to_gcloud
      - docker_non_root_build_node_20:
          requires:
            - harmony_deploy_approval_job
            - harmony_publish_to_gcloud
      - server_docker_build_node_20:
          requires:
            - harmony_deploy_approval_job
            - docker_build_node_20

  # uncomment to update esbuild arm64 cache
  # get_arm64_workflow_packages:
  #   jobs:
  #     - get_darwin_arm64_packages:
  #         filters:
  #           branches:
  #             only: circle-esbuild-cache
  # uncomment and change the filter branch name to debug the bvm bundle jobs
  # bvm_bundle_debug:
  #   jobs:
  #     - checkout_code:
  #         filters:
  #           branches:
  #             only: manual-release
  #     - bundle_version_linux:
  #         filters:
  #           branches:
  #             only: manual-release
  #     - bundle_version_macos:
  #         filters:
  #           branches:
  #             only: manual-release
  #     - bundle_version_windows:
  #         filters:
  #           branches:
  #             only: manual-release
  #     - harmony_publish_to_gcloud:
  #         filters:
  #           branches:
  #             only: manual-release
  #         requires:
  #           - bundle_version_linux
  #           - bundle_version_macos
  #           - bundle_version_windows
  #           - checkout_code # This is needed to generate index.json
  #     - docker_build_node_20:
  #         requires:
  #           - checkout_code
  #           - harmony_publish_to_gcloud
  #     - docker_non_root_build_node_20:
  #         requires:
  #           - checkout_code
  #           - harmony_publish_to_gcloud
  #     - server_docker_build_node_20:
  #         requires:
  #           - docker_build_node_20
  # uncomment to print node version on windows default orb
  # windows_print_node_version_workflow:
  #   jobs:
  #     - windows_print_node_version:
  #         filters:
  #           branches:
  #             only: update-circle-node-versions

