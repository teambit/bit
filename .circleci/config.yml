default_image: &default_image
  docker:
    - image: circleci/node:10.14.2

default_resource_class: &default_resource_class
  resource_class: small

windows_default_resource_size: &windows_default_resource_size
  size: medium

default_working_dir: &default_working_dir
  working_directory: ~/bit

windows_default_working_dir: &windows_default_working_dir
  working_directory: C:\Users\circleci\project\bit

windows_default_executor_name: &windows_default_executor_name
  name: win/default

windows_default_executor: &windows_default_executor
  executor:
    <<: *windows_default_executor_name
    <<: *windows_default_resource_size

windows_defaults: &windows_defaults
  <<: *windows_default_executor
  <<: *windows_default_working_dir

defaults: &defaults
  <<: *default_image
  <<: *default_resource_class
  <<: *default_working_dir

semver_tags_only_filters: &semver_tags_only_filters
  filters:
    # ignore any commit on any branch by default
    branches:
      ignore: /.*/
    # only act on version tags
    tags:
      only: /^v[0-9]+(\.[0-9]+)*$/

dev_tag_only_filters: &dev_tag_only_filters
  filters:
    # ignore any commit on any branch by default
    branches:
      ignore: /.*/
    # only act on version tags
    tags:
      only: /^dev$/

version: 2.1

orbs:
  win: circleci/windows@2.4.0
jobs:
  checkout_code:
    <<: *defaults
    resource_class: large
    steps:
      - checkout
      -
        run:
          name: 'save SHA to a file'
          command: 'echo $CIRCLE_SHA1 > .circle-sha'
      -
        persist_to_workspace:
          root: /home/circleci
          paths:
            - bit

  set_ssh_key:
    <<: *defaults
    working_directory: ~/.ssh
    steps:
      -
        run: 'echo "-----BEGIN RSA PRIVATE KEY-----" >> ~/.ssh/id_rsa'
      -
        run: 'echo ${testerBitsrcSSHPrivateKey} >> id_rsa'
      -
        run: 'echo "-----END RSA PRIVATE KEY-----" >> ~/.ssh/id_rsa'
      -
        run: 'echo ${testerBitsrcSSHPublicKey} >> id_rsa.pub'
      -
        save_cache:
          key: bitsrc-ssh-key3
          paths:
            - ~/.ssh/id_rsa
            - ~/.ssh/id_rsa.pub

  set_npm_registries:
    <<: *defaults
    steps:
      # npmjs regisry
      -
        run:
          name: setting npmjs regisry
          command: echo "//registry.npmjs.org/:_authToken=${npmjsRegistryToken}" >> ~/.npmrc
      # - run: npm whoami
      # prod registry
      -
        run: npm config set @bit:registry https://node.bit.dev
      -
        run: echo "//node.bit.dev/:_authToken=$registryProdToken" >> ~/.npmrc
      -
        run: echo "always-auth=true" >> ~/.npmrc
      # stage registry
      # -
        # run: 'npm config set @bit:registry https://node-stg.bit.dev'
      # -
        # run: 'echo "//node-stg.bit.dev/:_authToken=$registryStgToken" >> ~/.npmrc'
      -
        save_cache:
          key: bitsrc-registry6
          # key: bitsrc-registry-stg-v2
          paths:
            - ~/.npmrc

  validate-git-tag-and-version:
    <<: *defaults
    steps:
      -
        attach_workspace:
          at: ./
      - run:
          name: Setup bit version environment variables
          command: cd bit && echo "export BIT_VERSION=$(cat ./package.json | jq .version -r)" >> $BASH_ENV && source $BASH_ENV
      -
        run:
          name: 'installing semver tool'
          command: 'sudo npm i -g semver'
      -
        run:
          name: 'validate version in package.json does not contains pre release tags'
          # This will return code 1 when the version contains pre release tags
          command: 'semver $BIT_VERSION -r x.x.x'
      -
        run:
          name: 'validate tag match version in package.json'
          command: 'cd bit && ./scripts/compare-versions.sh $CIRCLE_TAG v$BIT_VERSION'

  configure-bit:
    <<: *defaults
    resource_class: large
    environment:
      # change the npm config to avoid using sudo
      NPM_CONFIG_PREFIX: ~/.npm-global
      BITSRC_ENV: stg
    steps:
      -
        attach_workspace:
          at: ./
      -
        restore_cache:
          key: bitsrc-registry6
      -
        run: 'echo ''export PATH=~/.npm-global/bin:$PATH'' >> $BASH_ENV'
      -
        run:
          name: 'create npm global dir'
          command: 'mkdir -p /home/circleci/.npm-global/bin'
      -
        run:
          name: 'link bit to path'
          command: 'ln -sf /home/circleci/bit/bit/bin/bit.js /home/circleci/.npm-global/bin/bit'
      -
        run: which bit
      -
        run: 'bit config set analytics_reporting false'
      -
        run: 'bit config set error_reporting false'
      -
        run: 'bit config set user.name tester'
      -
        run: 'bit config set user.email ci@bit.dev'
      -
        run: 'bit config set hub_domain hub-stg.bit.dev'
      -
        run: 'bit config set package-manager.cache /home/circleci/package-manager-cache'
      -
        save_cache:
          key: bit-global-config-v5
          paths:
            - ~/Library/Caches/Bit/config/config.json

  pack:
    <<: *defaults
    steps:
      -
        attach_workspace:
          at: ./
      -
        run: 'sudo npm i -g pkg@4.4.6'
      # -
      #   run:
      #     name: 'save pkg targets names'
      #     command: 'cat ./bit/package.json | jq .scripts.pkg:all | sed -E "s/^.*--targets (.*) -.*$/\1/" > /home/circleci/pkg-target.txt'
      -
        restore_cache:
          keys:
            # - 'pkg-cache-v3-{{ checksum "/home/circleci/pkg-target.txt" }}'
            - pkg-cache-v3
      -
        run:
          name: 'set pkg path'
          command: 'echo ''export PKG_CACHE_PATH=/home/circleci/pkg-cache'' >> $BASH_ENV'
      -
        run:
          name: 'Pack bit'
          command: 'cd bit && npm run pkg:all'
      # -
      #   save_cache:
      #     key: 'pkg-cache-v3-{{ checksum "/home/circleci/pkg-target.txt" }}'
      #     paths:
      #       - ~/pkg-cache
      -
        save_cache:
          key: pkg-cache-v3
          paths:
            - /home/circleci/pkg-cache
      # -
      #   run:
      #     name: 'copy unsuported files'
      #     command: 'cd bit && cp ./node_modules/open/xdg-open ./releases/xdg-open'
      -
        persist_to_workspace:
          root: .
          paths:
            - bit/releases

  npm-publish:
    <<: *defaults
    steps:
      -
        attach_workspace:
          at: ./
      - run:
          name: Authenticate with registry
          command: echo "//registry.npmjs.org/:_authToken=$npmToken" > ~/.npmrc
      -
        run:
          name: Publish bit to the npm registry
          command: 'cd bit && npm publish'

  github-release:
    <<: *defaults
    steps:
      -
        attach_workspace:
          at: ./
      # - run:
      #     name: set GitHub token
      #     command: export GH_RELEASE_GITHUB_API_TOKEN=$ghToken
      -
        run: 'cd bit && npm run release:circle'

  github-pre-release:
    <<: *defaults
    steps:
      -
        attach_workspace:
          at: ./
      # - run:
      #     name: set GitHub token
      #     command: export GH_RELEASE_GITHUB_API_TOKEN=$ghToken
      -
        run: 'cd bit && npm run pre-release:circle'

  build-debian:
    <<: *defaults
    docker:
      -
        image: 'bitcli/debian-artifact-builder:latest'
    steps:
      -
        attach_workspace:
          at: ./
      -
        run:
          name: Build debian file
          command: 'cd bit && ./scripts/linux/debian/build-linux-deb.sh'
      -
        persist_to_workspace:
          root: .
          paths:
            - bit/releases/deb

  build-rpm:
    <<: *defaults
    docker:
      -
        image: 'bitcli/rpm-artifact-builder:latest'
    steps:
      -
        attach_workspace:
          at: ./
      -
        run:
          name: Build rpm file
          command: 'cd bit && ./scripts/linux/centos/build-linux-rpm.sh'
      -
        persist_to_workspace:
          root: .
          paths:
            - bit/releases/rpm

  publish_to_jfrog:
    <<: *defaults
    steps:
      -
        attach_workspace:
          at: ./
      - run:
          name: print bit version
          command: cd bit && cat ./package.json | jq .version -r
      - run:
          name: Setup bit version environment variables
          command: cd bit && echo "export BIT_VERSION=$(cat ./package.json | jq .version -r)" >> $BASH_ENV && source $BASH_ENV
      - run:
          name: Install jFrog CLI
          command: curl -fL https://getcli.jfrog.io | sh
      - run:
          name: Configure jfrog auth
          command: ./jfrog rt config --url $jfrogUrl --user $jfrogUser --access-token $jfrogAcessToken --interactive=false
      -
        run:
          name: Upload debian file
          command: ./jfrog rt u "bit/releases/deb/*.deb" bit-deb/stable/${BIT_VERSION}/bit_${BIT_VERSION}_amd64.deb --build-name bit_${BIT_VERSION}_amd64.deb --build-number $CIRCLE_BUILD_NUM --deb "all/stable/amd64" --flat=false
      -
        run:
          name: Upload rpm file
          command: ./jfrog rt u "bit/releases/rpm/*.rpm" bit-yum/stable/bit/${BIT_VERSION}/bit-${BIT_VERSION}-${CIRCLE_BUILD_NUM}.x86_64.rpm --flat=false
  # this should be unified with the prod version and get params for dev

  publish_to_jfrog_dev:
    <<: *defaults
    steps:
      -
        attach_workspace:
          at: ./
      - run:
          name: print bit version
          command: cd bit && cat ./package.json | jq .version -r
      - run:
          name: Setup bit version environment variables
          command: cd bit && echo "export BIT_VERSION=$(cat ./package.json | jq .version -r)" >> $BASH_ENV && source $BASH_ENV
      - run:
          name: Install jFrog CLI
          command: curl -fL https://getcli.jfrog.io | sh
      - run:
          name: Configure jfrog auth
          command: ./jfrog rt config --url $jfrogUrl --user $jfrogUser --access-token $jfrogAcessToken --interactive=false
      -
        run:
          name: Upload debian file
          command: ./jfrog rt u "bit/releases/deb/*.deb" bit-deb/development/${BIT_VERSION}/bit_${BIT_VERSION}_amd64.deb --build-name bit_${BIT_VERSION}_amd64.deb --build-number $CIRCLE_BUILD_NUM --deb "all/development/amd64" --flat=false
      -
        run:
          name: Upload rpm file
          command: ./jfrog rt u "bit/releases/rpm/*.rpm" bit-yum/development/bit/${BIT_VERSION}/bit-${BIT_VERSION}-${CIRCLE_BUILD_NUM}.x86_64.rpm --flat=false

  generate_docs:
    <<: *defaults
    steps:
      -
        attach_workspace:
          at: ./
      -
        run:
          name: 'generate docs'
          command: 'cd bit && npm run doc-gen'
      - run:
          name: Setup genereate doc build number environment variables
          command: echo "$CIRCLE_BUILD_NUM" > DOC_GEN_BUILD_NUM.txt
      -
        store_artifacts:
          path: bit/dist/cli.md
      -
        persist_to_workspace:
          root: .
          paths:
            - DOC_GEN_BUILD_NUM.txt

  slack_deploy_notification:
    <<: *defaults
    steps:
      -
        attach_workspace:
          at: ./
      - run:
          name: Setup genereate doc build number environment variable
          command: echo "export DOC_GEN_BUILD_NUM=$(cat DOC_GEN_BUILD_NUM.txt)" >> $BASH_ENV && source $BASH_ENV
      -
        run:
          name: 'notify slack'
          command: 'cd bit && node ./scripts/slack-deploy-notification.js'
      -
        run:
          name: 'notify community slack'
          command: 'cd bit && node ./scripts/slack-deploy-notification.js community'

  unit_test:
    <<: *defaults
    steps:
      -
        run:
          name: 'save SHA to a file'
          command: 'echo $CIRCLE_SHA1 > .circle-sha'
      -
        attach_workspace:
          at: ./
      -
        run: 'cd bit && mkdir junit'
      -
        run:
          name: 'Run unit tests'
          command: 'cd bit && npm run test-circle'
          environment:
            MOCHA_FILE: junit/unit-test-results.xml
          when: always
      -
        store_test_results:
          path: bit/junit
      -
        store_artifacts:
          path: bit/junit

  lint:
    <<: *defaults
    resource_class: medium
    steps:
      -
        run:
          name: 'save SHA to a file'
          command: 'echo $CIRCLE_SHA1 > .circle-sha'
      -
        restore_cache:
          keys:
            - 'repo-{{ checksum ".circle-sha" }}'
      -
        attach_workspace:
          at: ./
      -
        run:
          name: 'run ESLint'
          command: 'cd bit && npm run lint-circle'
      -
        store_test_results:
          path: bit/junit
      -
        store_artifacts:
          path: bit/junit

  generate_and_check_types:
    <<: *defaults
    steps:
      -
        attach_workspace:
          at: ./
      -
        run:
          name: 'generate types'
          command: 'cd bit && npm run build:types'
      -
        run:
          name: 'run TSC'
          command: 'cd bit && npm run check-types'

  setup_harmony:
    resource_class: large
    <<: *defaults
    steps:
      -
        attach_workspace:
          at: ./
      -
        restore_cache:
          key: bitsrc-registry6
      -
        run:
          name: 'install harmony'
          command: 'cd bit && npm run install-harmony'
      -
        run:
          name: 'build harmony'
          command: 'cd bit && npm run build-harmony'
      -
        run:
          name: 'Build bit source code'
          command: 'cd bit && npm run build'
      -
        persist_to_workspace:
          root: .
          paths:
            - bit/dist
            - bit/node_modules
            - .pnpm-store

  bit_build:
    <<: *defaults
    environment:
      # change the npm config to avoid using sudo
      NPM_CONFIG_PREFIX: ~/.npm-global
    steps:
      -
        attach_workspace:
          at: ./
      -
        restore_cache:
          key: bit-global-config-v5
      -
        run:
          name: 'create npm global dir'
          command: 'mkdir -p /home/circleci/.npm-global/bin'
      -
        run:
          name: 'link bit to path'
          command: 'ln -sf /home/circleci/bit/bit/bin/bit.js /home/circleci/.npm-global/bin/bit'
      -
        run: 'echo ''export PATH=~/.npm-global/bin:$PATH'' >> $BASH_ENV'
      -
        restore_cache:
          key: bitsrc-ssh-key3
      -
        restore_cache:
          key: bitsrc-registry6
      -
        # add the id_rsa to ssh_agent to make sure we authenticate with the correct user
        run: 'chmod 400 ~/.ssh/id_rsa'
      -
        run: 'ssh-add ~/.ssh/id_rsa'
      -
        run:
          name: 'bit status'
          command: 'cd bit && bit status'
      -
        run:
          name: 'bit build'
          command: 'cd bit && bit build'


  e2e_test:
    <<: *defaults
    environment:
      # change the npm config to avoid using sudo
      NPM_CONFIG_PREFIX: ~/.npm-global
      BITSRC_ENV: stg
    parallelism: 25
    steps:
      -
        attach_workspace:
          at: ./
      -
        restore_cache:
          key: bit-global-config-v5
      -
        run:
          # there are bugs in version 6.4.1 see https://github.com/teambit/bit/issues/1746
          name: 'update npm to latest version'
          command: 'npm i -g npm@latest'
      -
        run:
          name: 'create npm global dir'
          command: 'mkdir -p /home/circleci/.npm-global/bin'
      -
        run:
          name: 'link bit to path'
          command: 'ln -sf /home/circleci/bit/bit/bin/bit.js /home/circleci/.npm-global/bin/bit'
      -
        run: 'echo ''export PATH=~/.npm-global/bin:$PATH'' >> $BASH_ENV'
      -
        run:
          name: 'install expect lib (needed to add user for CI NPM registry, see npm-ci-registry.js)'
          command: 'sudo apt-get install expect'
      -
        restore_cache:
          key: bitsrc-ssh-key3
      -
        restore_cache:
          key: bitsrc-registry6
      -
        # add the id_rsa to ssh_agent to make sure we authenticate with the correct user
        run: 'chmod 400 ~/.ssh/id_rsa'
      -
        run: 'ssh-add ~/.ssh/id_rsa'
      -
        run: 'cd bit && mkdir junit'
      -
        run: 'bit config set package-manager.cache /home/circleci/package-manager-cache'
      -
        run:
          name: 'Run e2e tests'
          command: 'cd bit && circleci tests glob "e2e/**/*.e2e*.ts" | circleci tests split --split-by=timings | xargs -n 1 npm run mocha-circleci'
          # command which support only - for debug purpose
          # command: cd bit && npm run e2e-test-circle --debug
          environment:
            MOCHA_FILE: junit/e2e-test-results.xml
          when: always
      -
        store_test_results:
          path: bit/junit
      -
        store_artifacts:
          path: bit/junit
      -
        store_artifacts:
          path: ~/Library/Caches/Bit/logs

workflows:
  version: 2
  build_and_test:
    jobs:
      - checkout_code
      - set_ssh_key
      - set_npm_registries
      -
        setup_harmony:
          requires:
            - set_npm_registries
            - checkout_code
      -
        unit_test:
          requires:
            - setup_harmony
      -
        lint:
          requires:
            - setup_harmony
      -
        generate_and_check_types:
          requires:
            - setup_harmony
      -
        generate_docs:
          <<: *semver_tags_only_filters
          requires:
            - setup_harmony

      -
        configure-bit:
          requires:
            - set_ssh_key
            - setup_harmony
      -
        e2e_test:
          requires:
            - configure-bit
      -
        bit_build:
          requires:
            - configure-bit
