version: 2
jobs:
  checkout_code:
    docker:
      -
        image: 'circleci/node:8.12.0'
    resource_class: small
    working_directory: ~/bit
    steps:
      - checkout
      -
        run:
          name: 'save SHA to a file'
          command: 'echo $CIRCLE_SHA1 > .circle-sha'
      -
        run:
          name: 'clone bit-javascript'
          command: ./scripts/clone-bit-javascript.sh
      -
        persist_to_workspace:
          root: /home/circleci
          paths:
            - bit
            - bit-javascript
  set_ssh_key:
    docker:
      -
        image: 'circleci/node:8.12.0'
    resource_class: small
    working_directory: ~/.ssh
    steps:
      -
        run: 'echo "-----BEGIN RSA PRIVATE KEY-----" >> ~/.ssh/id_rsa'
      -
        run: 'echo ${testerBitsrcSSHPrivateKey} >> id_rsa'
      -
        run: 'echo "-----END RSA PRIVATE KEY-----" >> ~/.ssh/id_rsa'
      -
        run: 'echo ${testerBitsrcSSHPublicKey} >> id_rsa.pub'
      -
        save_cache:
          key: bitsrc-ssh-key3
          paths:
            - ~/.ssh/id_rsa
            - ~/.ssh/id_rsa.pub
  set_bitsrc_registry:
    docker:
      -
        image: 'circleci/node:8.12.0'
    resource_class: small
    working_directory: ~/bit
    steps:
      # prod registry
      # -
        # run: npm config set @bit:registry https://node.bit.dev
      # -
        # run: echo "//node.bit.dev/:_authToken=$registryProdToken" >> ~/.npmrc
      # stage registry
      -
        run: 'npm config set @bit:registry https://node-stg.bit.dev'
      -
        run: 'echo "//node-stg.bit.dev/:_authToken=$registryStgToken" >> ~/.npmrc'
      -
        save_cache:
          # key: bitsrc-registry2
          key: bitsrc-registry-stg-v2
          paths:
            - ~/.npmrc
  install_npm_deps:
    docker:
      -
        image: 'circleci/node:8.12.0'
    resource_class: small
    working_directory: ~/bit
    # skipping the pre-built binaries to make sure we build them by the pack step
    # testing the install script will be done in different workflow dedicated for this
    environment:
      SKIP_FETCH_BINARY: true
      # SKIP_LOCAL_BUILD_BINARY: true
    steps:
      -
        run:
          name: 'save SHA to a file'
          command: 'echo $CIRCLE_SHA1 > .circle-sha'
      -
        attach_workspace:
          at: ./
      # -
      #   restore_cache:
      #     keys:
      #       - 'npm-deps-v14-{{ checksum "./bit/package.json" }}-{{ checksum "./bit/package-lock.json" }}-{{ checksum "./bit/.circleci/config.yml" }}'
      -
        run:
          name: 'install pkg to support local build'
          command: 'sudo npm install -g pkg'
      -
        run:
          name: 'Install npm dependencies'
          command: 'cd bit && npm install'
      # -
      #   save_cache:
      #     key: 'npm-deps-v14-{{ checksum "./bit/package.json" }}-{{ checksum "./bit/package-lock.json" }}-{{ checksum "./bit/.circleci/config.yml" }}'
      #     paths:
      #       - ./bit/node_modules
      -
        persist_to_workspace:
          root: .
          paths:
            - bit/node_modules
            - bit/releases
  install_bit_javascript_npm_deps:
    docker:
      -
        image: 'circleci/node:8.12.0'
    resource_class: small
    working_directory: ~/bit
    steps:
      -
        attach_workspace:
          at: ./
      -
        run:
          name: 'Install npm dependencies'
          command: 'cd bit-javascript && npm install'
      -
        persist_to_workspace:
          root: .
          paths:
            - bit-javascript/node_modules
  build:
    docker:
      -
        image: 'circleci/node:8.12.0'
    resource_class: small
    working_directory: ~/bit
    steps:
      -
        run:
          name: 'save SHA to a file'
          command: 'echo $CIRCLE_SHA1 > .circle-sha'
      -
        attach_workspace:
          at: ./
      -
        run:
          name: 'Build bit source code'
          command: 'cd bit && npm run build'
      -
        persist_to_workspace:
          root: .
          paths:
            - bit/dist
  pack:
    docker:
      -
        image: 'circleci/node:8.12.0'
    resource_class: small
    working_directory: ~/bit
    steps:
      -
        attach_workspace:
          at: ./
      -
        run: 'sudo npm i -g pkg'
      -
        run:
          name: 'save pkg targets names'
          command: 'cat ./bit/package.json | jq .scripts.pkg | sed -E "s/^.*--targets (.*) -.*$/\1/" > /home/circleci/pkg-target.txt'
      -
        restore_cache:
          keys:
            - 'pkg-cache-v2-{{ checksum "/home/circleci/pkg-target.txt" }}'
            - pkg-cache-v2
      -
        run:
          name: 'set pkg path'
          command: 'echo ''export PKG_CACHE_PATH=/home/circleci/pkg-cache'' >> $BASH_ENV'
      -
        run:
          name: 'npm link bit-javascript to bit'
          command: 'cd bit && sudo npm link ../bit-javascript'
      -
        run:
          name: 'Pack bit'
          command: 'cd bit && npm run pkg'
      -
        save_cache:
          key: 'pkg-cache-v2-{{ checksum "/home/circleci/pkg-target.txt" }}'
          paths:
            - ~/pkg-cache
      -
        save_cache:
          key: pkg-cache-v2
          paths:
            - /home/circleci/pkg-cache
      -
        run:
          name: 'copy unsuported files'
          command: 'cd bit && cp ./node_modules/opn/xdg-open ./releases/xdg-open'
      -
        persist_to_workspace:
          root: .
          paths:
            - bit/releases
  build_bit_javascript:
    docker:
      -
        image: 'circleci/node:8.12.0'
    resource_class: small
    working_directory: ~/bit
    steps:
      -
        run:
          name: 'save SHA to a file'
          command: 'echo $CIRCLE_SHA1 > .circle-sha'
      -
        attach_workspace:
          at: ./
      -
        run:
          name: 'Build bit javascript source code'
          command: 'cd bit-javascript && npm run build'
      -
        persist_to_workspace:
          root: .
          paths:
            - bit-javascript/dist
  unit_test:
    docker:
      -
        image: 'circleci/node:8.12.0'
    resource_class: small
    working_directory: ~/bit
    steps:
      -
        run:
          name: 'save SHA to a file'
          command: 'echo $CIRCLE_SHA1 > .circle-sha'
      -
        attach_workspace:
          at: ./
      -
        run: 'cd bit && mkdir junit'
      -
        run:
          name: 'Run unit tests'
          command: 'cd bit && npm run test-circle'
          environment:
            MOCHA_FILE: junit/unit-test-results.xml
          when: always
      -
        store_test_results:
          path: bit/junit
      -
        store_artifacts:
          path: bit/junit
  unit_test_bit_javascript:
    docker:
      -
        image: 'circleci/node:8.12.0'
    resource_class: small
    working_directory: ~/bit
    steps:
      -
        run:
          name: 'save SHA to a file'
          command: 'echo $CIRCLE_SHA1 > .circle-sha'
      -
        attach_workspace:
          at: ./
      -
        run: 'cd bit-javascript && mkdir junit'
      -
        run:
          name: 'Run unit tests'
          command: 'cd bit-javascript && npm run test-circle'
          environment:
            MOCHA_FILE: junit/unit-test-results.xml
          when: always
      -
        store_test_results:
          path: bit-javascript/junit
      -
        store_artifacts:
          path: bit-javascript/junit
  lint:
    docker:
      -
        image: 'circleci/node:8.12.0'
    resource_class: medium
    working_directory: ~/bit
    steps:
      -
        run:
          name: 'save SHA to a file'
          command: 'echo $CIRCLE_SHA1 > .circle-sha'
      -
        restore_cache:
          keys:
            - 'repo-{{ checksum ".circle-sha" }}'
      -
        attach_workspace:
          at: ./
      -
        run:
          name: 'run ESLint'
          command: 'cd bit && npm run lint-circle'
      -
        store_test_results:
          path: bit/junit
      -
        store_artifacts:
          path: bit/junit
  e2e_test:
    docker:
      -
        image: 'circleci/node:8.12.0'
    resource_class: small
    working_directory: ~/bit
    environment:
      # change the npm config to avoid using sudo
      NPM_CONFIG_PREFIX: ~/.npm-global
      BITSRC_ENV: stg
    parallelism: 25
    steps:
      -
        attach_workspace:
          at: ./
      -
        run: 'sudo npm i -g yarn'
      -
        run:
          # there are bugs in version 6.4.1 see https://github.com/teambit/bit/issues/1746
          name: 'update npm to latest version'
          command: 'npm i -g npm@latest'
      -
        run: 'echo ''export PATH=~/.npm-global/bin:$PATH'' >> $BASH_ENV'
      -
        run:
          name: 'save SHA to a file'
          command: 'echo $CIRCLE_SHA1 > .circle-sha'
      -
        run:
          name: 'install expect lib (needed to add user for CI NPM registry, see npm-ci-registry.js)'
          command: 'sudo apt-get install expect'
      # -
      #   run:
      #     name: 'create global npm directory (to avoid using sudo for npm link)'
      #     command: 'mkdir ~/.npm-global'
      -
        restore_cache:
          key: bitsrc-ssh-key3
      -
        restore_cache:
          # key: bitsrc-registry2
          key: bitsrc-registry-stg-v2
      -
        restore_cache:
          keys:
            - 'builded-{{ checksum ".circle-sha" }}'
      -
        # add the id_rsa to ssh_agent to make sure we authenticate with the correct user
        run: 'chmod 400 ~/.ssh/id_rsa'
      -
        run: 'ssh-add ~/.ssh/id_rsa'
      -
        run: 'cd bit && mkdir junit'
      # -
      #   run: 'mv ./bit/releases/bit-bin ./bit/releases/bit'
      # -
      #   run: 'echo ''export PATH=~/bit/bit/releases:$PATH'' >> $BASH_ENV'
      -
        run:
          name: 'npm link bit to global'
          command: cd bit && npm link
      -
        run:
          name: 'npm link bit-javascript to bit'
          command: 'cd bit && sudo npm link ../bit-javascript'
      -
        run: which bit
      -
        run: 'bit config set analytics_reporting false'
      -
        run: 'bit config set error_reporting false'
      -
        run: 'bit config set user.name tester'
      -
        run: 'bit config set user.email ci@bit.dev'
      -
        # do not change this one, it's important to use the production for getting components bit use for running
        # if you want the tests to work with stage, you should change the hub domain few lines below
        run: 'bit config set hub_domain hub.bit.dev'
      # -
      #   run:
      #     name: 'bit import'
      #     command: 'cd bit && bit import'
      # -
      #   run:
      #     name: 'npm install'
      #     command: 'cd bit && bit install'
      -
        # uncomment to configure circle to run against stg environment
        run: 'bit config set hub_domain hub-stg.bit.dev'
      -
        run:
          name: 'Run e2e tests'
          command: 'cd bit && circleci tests glob "e2e/**/*.e2e*.js" | circleci tests split --split-by=timings | xargs -n 1 npm run mocha-circleci'
          # command which support only - for debug purpose
          # command: cd bit && npm run e2e-test-circle --debug
          environment:
            MOCHA_FILE: junit/e2e-test-results.xml
          when: always
      -
        store_test_results:
          path: bit/junit
      -
        store_artifacts:
          path: bit/junit
      -
        store_artifacts:
          path: ~/Library/Caches/Bit/logs/debug.log
  performance_e2e_test:
    docker:
      -
        image: 'circleci/node:8.12.0'
    working_directory: ~/bit
    environment:
      # change the npm config to avoid using sudo
      NPM_CONFIG_PREFIX: ~/.npm-global
      BITSRC_ENV: stg
      # NPM_CONFIG_DEBUG: true
    parallelism: 1
    steps:
      -
        attach_workspace:
          at: ./
      -
        run: 'echo ''export PATH=~/.npm-global/bin:$PATH'' >> $BASH_ENV'
      -
        run: 'cd bit && mkdir junit'
      -
        run:
          name: 'npm link bit to global'
          command: 'cd bit && npm link'
      -
        run: 'bit config set analytics_reporting false'
      -
        run: 'bit config set error_reporting false'
      -
        run: 'bit config set user.name tester'
      -
        run: 'bit config set user.email ci@bit.dev'
      -
        # uncomment to configure circle to run against stg enviorment
        run: 'bit config set hub_domain hub-stg.bit.dev'
      -
        run:
          name: 'Run performance tests'
          command: 'cd bit && npm run performance-test-circle'
          environment:
            MOCHA_FILE: junit/e2e-test-results.xml
          when: always
          no_output_timeout: '25m'
      -
        store_test_results:
          path: bit/junit
      -
        store_artifacts:
          path: bit/junit
      -
        store_artifacts:
          path: ~/Library/Caches/Bit/logs/debug.log
workflows:
  version: 2
  build_and_test:
    jobs:
      - checkout_code
      - set_ssh_key
      - set_bitsrc_registry
      -
        install_npm_deps:
          requires:
            - checkout_code
      -
        install_bit_javascript_npm_deps:
          requires:
            - checkout_code
      -
        build:
          requires:
            - install_npm_deps
      -
        build_bit_javascript:
          requires:
            - install_bit_javascript_npm_deps
      -
        unit_test:
          requires:
            - build
      -
        unit_test_bit_javascript:
          requires:
            - build_bit_javascript
      -
        lint:
          requires:
            - install_npm_deps
      # -
      #   pack:
      #     requires:
      #       - build
      #       - build_bit_javascript
      -
        e2e_test:
          filters:
            branches:
              ignore:
                - performance-tests
          requires:
            - set_ssh_key
            - set_bitsrc_registry
            - build
            - build_bit_javascript
            # - pack
      -
        performance_e2e_test:
          filters:
            branches:
              only:
                - performance-tests
          requires:
            - build
            - build_bit_javascript

  performance_tests:
    triggers:
      - schedule:
          cron: "0 9 * * *"
          filters:
            branches:
              only:
                - master
    jobs:
      - checkout_code
      -
        install_npm_deps:
          requires:
            - checkout_code
      -
        install_bit_javascript_npm_deps:
          requires:
            - checkout_code
      -
        build:
          requires:
            - install_npm_deps
      -
        build_bit_javascript:
          requires:
            - install_bit_javascript_npm_deps
      -
        performance_e2e_test:
          requires:
            - build
            - build_bit_javascript
