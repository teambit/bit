{
  "__schema": "APISchema",
  "location": {
    "file": "index.ts",
    "line": 13,
    "character": 1
  },
  "module": {
    "__schema": "Module",
    "location": {
      "file": "index.ts",
      "line": 13,
      "character": 1
    },
    "exports": [
      {
        "__schema": "FunctionLikeSchema",
        "location": {
          "file": "index.ts",
          "line": 13,
          "character": 1
        },
        "name": "myFunc",
        "signature": "function myFunc(a?: number, b?: number): number",
        "modifiers": [
          "export"
        ],
        "params": [
          {
            "__schema": "ParameterSchema",
            "location": {
              "file": "index.ts",
              "line": 13,
              "character": 24
            },
            "name": "a",
            "defaultValue": "4",
            "type": {
              "__schema": "TypeRefSchema",
              "location": {
                "file": "index.ts",
                "line": 13,
                "character": 24
              },
              "name": "number"
            }
          },
          {
            "__schema": "ParameterSchema",
            "location": {
              "file": "index.ts",
              "line": 13,
              "character": 31
            },
            "name": "b",
            "defaultValue": "5",
            "type": {
              "__schema": "TypeRefSchema",
              "location": {
                "file": "index.ts",
                "line": 13,
                "character": 31
              },
              "name": "number"
            }
          }
        ],
        "returnType": {
          "__schema": "KeywordTypeSchema",
          "location": {
            "file": "index.ts",
            "line": 13,
            "character": 39
          },
          "name": "number"
        }
      },
      {
        "__schema": "TypeSchema",
        "location": {
          "file": "button.tsx",
          "line": 7,
          "character": 1
        },
        "name": "ButtonElementType",
        "signature": "type ButtonElementType = \"a\" | \"button\"",
        "type": {
          "__schema": "TypeUnionSchema",
          "location": {
            "file": "button.tsx",
            "line": 7,
            "character": 33
          },
          "types": [
            {
              "__schema": "LiteralTypeSchema",
              "location": {
                "file": "button.tsx",
                "line": 7,
                "character": 33
              },
              "name": "'a'"
            },
            {
              "__schema": "LiteralTypeSchema",
              "location": {
                "file": "button.tsx",
                "line": 7,
                "character": 39
              },
              "name": "'button'"
            }
          ]
        }
      },
      {
        "__schema": "TypeSchema",
        "location": {
          "file": "button.tsx",
          "line": 9,
          "character": 1
        },
        "name": "ButtonProps",
        "signature": "type ButtonProps = any",
        "type": {
          "__schema": "TypeIntersectionSchema",
          "location": {
            "file": "button.tsx",
            "line": 9,
            "character": 27
          },
          "types": [
            {
              "__schema": "InferenceTypeSchema",
              "location": {
                "file": "button.tsx",
                "line": 9,
                "character": 27
              }
            },
            {
              "__schema": "TypeLiteralSchema",
              "location": {
                "file": "button.tsx",
                "line": 9,
                "character": 45
              },
              "members": [
                {
                  "__schema": "VariableSchema",
                  "location": {
                    "file": "button.tsx",
                    "line": 13,
                    "character": 3
                  },
                  "name": "children",
                  "signature": "(property) children: any",
                  "type": {
                    "__schema": "InferenceTypeSchema",
                    "location": {
                      "file": "button.tsx",
                      "line": 13,
                      "character": 13
                    }
                  }
                },
                {
                  "__schema": "VariableSchema",
                  "location": {
                    "file": "button.tsx",
                    "line": 18,
                    "character": 3
                  },
                  "name": "href",
                  "signature": "(property) href?: string",
                  "type": {
                    "__schema": "KeywordTypeSchema",
                    "location": {
                      "file": "button.tsx",
                      "line": 18,
                      "character": 10
                    },
                    "name": "string"
                  }
                },
                {
                  "__schema": "VariableSchema",
                  "location": {
                    "file": "button.tsx",
                    "line": 23,
                    "character": 3
                  },
                  "name": "className",
                  "signature": "(property) className?: string",
                  "type": {
                    "__schema": "KeywordTypeSchema",
                    "location": {
                      "file": "button.tsx",
                      "line": 23,
                      "character": 15
                    },
                    "name": "string"
                  }
                }
              ]
            },
            {
              "__schema": "InferenceTypeSchema",
              "location": {
                "file": "button.tsx",
                "line": 24,
                "character": 5
              }
            }
          ]
        }
      },
      {
        "__schema": "FunctionLikeSchema",
        "location": {
          "file": "button.tsx",
          "line": 26,
          "character": 1
        },
        "name": "Button",
        "signature": "function Button(props: ButtonProps): any",
        "modifiers": [
          "export"
        ],
        "params": [
          {
            "__schema": "ParameterSchema",
            "location": {
              "file": "button.tsx",
              "line": 26,
              "character": 24
            },
            "name": "props",
            "type": {
              "__schema": "TypeRefSchema",
              "location": {
                "file": "button.tsx",
                "line": 26,
                "character": 31
              },
              "name": "ButtonProps"
            }
          }
        ],
        "returnType": {
          "__schema": "InferenceTypeSchema",
          "location": {
            "file": "button.tsx",
            "line": 26,
            "character": 1
          },
          "type": "any"
        }
      },
      {
        "__schema": "ClassSchema",
        "className": "Bar",
        "location": {
          "file": "button.tsx",
          "line": 59,
          "character": 1
        },
        "members": [
          {
            "__schema": "FunctionLikeSchema",
            "location": {
              "file": "button.tsx",
              "line": 60,
              "character": 3
            },
            "name": "foo",
            "signature": "(method) Bar.foo(): void",
            "modifiers": [],
            "params": [],
            "returnType": {
              "__schema": "InferenceTypeSchema",
              "location": {
                "file": "button.tsx",
                "line": 60,
                "character": 3
              },
              "type": "void"
            }
          }
        ]
      },
      {
        "__schema": "FunctionLikeSchema",
        "location": {
          "file": "index.ts",
          "line": 23,
          "character": 1
        },
        "name": "Hi",
        "signature": "function Hi(): void",
        "modifiers": [
          "export"
        ],
        "params": [],
        "returnType": {
          "__schema": "InferenceTypeSchema",
          "location": {
            "file": "index.ts",
            "line": 23,
            "character": 1
          },
          "type": "void"
        }
      },
      {
        "__schema": "VariableSchema",
        "location": {
          "file": "index.ts",
          "line": 25,
          "character": 14
        },
        "name": "a",
        "signature": "const a: 4",
        "type": {
          "__schema": "InferenceTypeSchema",
          "location": {
            "file": "index.ts",
            "line": 25,
            "character": 14
          },
          "type": "4"
        }
      },
      {
        "__schema": "VariableSchema",
        "location": {
          "file": "index.ts",
          "line": 25,
          "character": 21
        },
        "name": "b",
        "signature": "const b: 5",
        "type": {
          "__schema": "LiteralTypeSchema",
          "location": {
            "file": "index.ts",
            "line": 25,
            "character": 24
          },
          "name": "5"
        }
      },
      {
        "__schema": "Module",
        "location": {
          "file": "button.composition.tsx",
          "line": 3,
          "character": 1
        },
        "exports": [
          {
            "__schema": "FunctionLikeSchema",
            "location": {
              "file": "button.composition.tsx",
              "line": 6,
              "character": 14
            },
            "name": "BasicButton",
            "signature": "const BasicButton: () => any",
            "modifiers": [],
            "params": [],
            "returnType": {
              "__schema": "InferenceTypeSchema",
              "location": {
                "file": "button.composition.tsx",
                "line": 6,
                "character": 14
              },
              "type": "any"
            }
          },
          {
            "__schema": "FunctionLikeSchema",
            "location": {
              "file": "button.composition.tsx",
              "line": 10,
              "character": 14
            },
            "name": "ButtonWithAlert",
            "signature": "const ButtonWithAlert: (a: any, b: () => {}) => any",
            "modifiers": [],
            "params": [
              {
                "__schema": "ParameterSchema",
                "location": {
                  "file": "button.composition.tsx",
                  "line": 10,
                  "character": 33
                },
                "name": "a",
                "type": {
                  "__schema": "TypeRefSchema",
                  "location": {
                    "file": "button.composition.tsx",
                    "line": 10,
                    "character": 33
                  },
                  "name": "any"
                }
              },
              {
                "__schema": "ParameterSchema",
                "location": {
                  "file": "button.composition.tsx",
                  "line": 10,
                  "character": 36
                },
                "name": "b",
                "type": {
                  "__schema": "FunctionLikeSchema",
                  "location": {
                    "file": "button.composition.tsx",
                    "line": 10,
                    "character": 39
                  },
                  "name": "",
                  "signature": "",
                  "modifiers": [],
                  "params": [],
                  "returnType": {
                    "__schema": "TypeLiteralSchema",
                    "location": {
                      "file": "button.composition.tsx",
                      "line": 10,
                      "character": 45
                    },
                    "members": []
                  }
                }
              }
            ],
            "returnType": {
              "__schema": "InferenceTypeSchema",
              "location": {
                "file": "button.composition.tsx",
                "line": 10,
                "character": 14
              },
              "type": "any"
            }
          },
          {
            "__schema": "FunctionLikeSchema",
            "location": {
              "file": "button.composition.tsx",
              "line": 14,
              "character": 14
            },
            "name": "ButtonWithCustomStyles",
            "signature": "const ButtonWithCustomStyles: () => any",
            "modifiers": [],
            "params": [],
            "returnType": {
              "__schema": "InferenceTypeSchema",
              "location": {
                "file": "button.composition.tsx",
                "line": 14,
                "character": 14
              },
              "type": "any"
            }
          },
          {
            "__schema": "FunctionLikeSchema",
            "location": {
              "file": "button.composition.tsx",
              "line": 18,
              "character": 14
            },
            "name": "ButtonWithIcon",
            "signature": "const ButtonWithIcon: () => any",
            "modifiers": [],
            "params": [],
            "returnType": {
              "__schema": "InferenceTypeSchema",
              "location": {
                "file": "button.composition.tsx",
                "line": 18,
                "character": 14
              },
              "type": "any"
            }
          },
          {
            "__schema": "FunctionLikeSchema",
            "location": {
              "file": "button.composition.tsx",
              "line": 27,
              "character": 14
            },
            "name": "ButtonAsALink",
            "signature": "const ButtonAsALink: () => any",
            "modifiers": [],
            "params": [],
            "returnType": {
              "__schema": "InferenceTypeSchema",
              "location": {
                "file": "button.composition.tsx",
                "line": 27,
                "character": 14
              },
              "type": "any"
            }
          }
        ],
        "namespace": "Compositions"
      },
      {
        "__schema": "VariableSchema",
        "location": {
          "file": "index.ts",
          "line": 29,
          "character": 14
        },
        "name": "HiThere",
        "signature": "const HiThere: \"HiThere\"",
        "type": {
          "__schema": "InferenceTypeSchema",
          "location": {
            "file": "index.ts",
            "line": 29,
            "character": 14
          },
          "type": "\"HiThere\""
        }
      },
      {
        "__schema": "FunctionLikeSchema",
        "location": {
          "file": "index.ts",
          "line": 31,
          "character": 14
        },
        "name": "Function",
        "signature": "const Function: () => void",
        "modifiers": [],
        "params": [],
        "returnType": {
          "__schema": "InferenceTypeSchema",
          "location": {
            "file": "index.ts",
            "line": 31,
            "character": 14
          },
          "type": "void"
        }
      },
      {
        "__schema": "VariableSchema",
        "location": {
          "file": "index.ts",
          "line": 33,
          "character": 14
        },
        "name": "Array",
        "signature": "const Array: string[]",
        "type": {
          "__schema": "TypeRefSchema",
          "location": {
            "file": "index.ts",
            "line": 33,
            "character": 14
          },
          "name": "string[]",
          "packageName": ""
        }
      },
      {
        "__schema": "ClassSchema",
        "className": "ClassSomething",
        "location": {
          "file": "index.ts",
          "line": 37,
          "character": 1
        },
        "members": [
          {
            "__schema": "VariableSchema",
            "location": {
              "file": "index.ts",
              "line": 38,
              "character": 3
            },
            "name": "app",
            "signature": "(property) ClassSomething.app: string",
            "type": {
              "__schema": "InferenceTypeSchema",
              "location": {
                "file": "index.ts",
                "line": 38,
                "character": 3
              },
              "type": "string"
            }
          },
          {
            "__schema": "ConstructorSchema",
            "location": {
              "file": "index.ts",
              "line": 39,
              "character": 3
            },
            "params": [
              {
                "__schema": "ParameterSchema",
                "location": {
                  "file": "index.ts",
                  "line": 40,
                  "character": 5
                },
                "name": "da",
                "type": {
                  "__schema": "LiteralTypeSchema",
                  "location": {
                    "file": "index.ts",
                    "line": 40,
                    "character": 18
                  },
                  "name": "'dsa'"
                }
              }
            ]
          },
          {
            "__schema": "FunctionLikeSchema",
            "location": {
              "file": "index.ts",
              "line": 43,
              "character": 3
            },
            "name": "a",
            "signature": "(method) ClassSomething.a(): Foo",
            "modifiers": [],
            "params": [],
            "returnType": {
              "__schema": "InferenceTypeSchema",
              "location": {
                "file": "index.ts",
                "line": 43,
                "character": 3
              },
              "type": "Foo"
            }
          },
          {
            "__schema": "GetAccessorSchema",
            "location": {
              "file": "index.ts",
              "line": 46,
              "character": 3
            },
            "name": "getter",
            "signature": "(property) ClassSomething.getter: string",
            "type": {
              "__schema": "InferenceTypeSchema",
              "location": {
                "file": "index.ts",
                "line": 46,
                "character": 3
              },
              "type": "string"
            }
          },
          {
            "__schema": "SetAccessorSchema",
            "location": {
              "file": "index.ts",
              "line": 50,
              "character": 3
            },
            "name": "setter",
            "signature": "(property) ClassSomething.setter: boolean",
            "param": {
              "__schema": "ParameterSchema",
              "location": {
                "file": "index.ts",
                "line": 50,
                "character": 14
              },
              "name": "a",
              "type": {
                "__schema": "KeywordTypeSchema",
                "location": {
                  "file": "index.ts",
                  "line": 50,
                  "character": 17
                },
                "name": "boolean"
              }
            }
          }
        ]
      },
      {
        "__schema": "TypeSchema",
        "location": {
          "file": "index.ts",
          "line": 55,
          "character": 1
        },
        "name": "IndexSig",
        "signature": "type IndexSig = {\n    [key: string]: boolean;\n}",
        "type": {
          "__schema": "TypeLiteralSchema",
          "location": {
            "file": "index.ts",
            "line": 55,
            "character": 24
          },
          "members": [
            {
              "__schema": "IndexSignatureSchema",
              "location": {
                "file": "index.ts",
                "line": 55,
                "character": 26
              },
              "params": [
                {
                  "__schema": "ParameterSchema",
                  "location": {
                    "file": "index.ts",
                    "line": 55,
                    "character": 27
                  },
                  "name": "key",
                  "type": {
                    "__schema": "KeywordTypeSchema",
                    "location": {
                      "file": "index.ts",
                      "line": 55,
                      "character": 32
                    },
                    "name": "string"
                  }
                }
              ],
              "type": {
                "__schema": "KeywordTypeSchema",
                "location": {
                  "file": "index.ts",
                  "line": 55,
                  "character": 41
                },
                "name": "boolean"
              }
            }
          ]
        }
      },
      {
        "__schema": "InterfaceSchema",
        "location": {
          "file": "index.ts",
          "line": 57,
          "character": 1
        },
        "name": "Hello",
        "members": [
          {
            "__schema": "FunctionLikeSchema",
            "location": {
              "file": "index.ts",
              "line": 58,
              "character": 16
            },
            "name": "",
            "signature": "",
            "modifiers": [],
            "params": [],
            "returnType": {
              "__schema": "KeywordTypeSchema",
              "location": {
                "file": "index.ts",
                "line": 58,
                "character": 22
              },
              "name": "void"
            }
          },
          {
            "__schema": "FunctionLikeSchema",
            "location": {
              "file": "index.ts",
              "line": 59,
              "character": 3
            },
            "name": "methodSig",
            "signature": "(method) Hello.methodSig(): string",
            "modifiers": [],
            "params": [],
            "returnType": {
              "__schema": "KeywordTypeSchema",
              "location": {
                "file": "index.ts",
                "line": 59,
                "character": 16
              },
              "name": "string"
            }
          }
        ]
      },
      {
        "__schema": "VariableSchema",
        "location": {
          "file": "index.ts",
          "line": 68,
          "character": 14
        },
        "name": "a1",
        "signature": "const a1: {\n    a: number;\n    b: number;\n}",
        "type": {
          "__schema": "TypeQuerySchema",
          "location": {
            "file": "index.ts",
            "line": 68,
            "character": 18
          },
          "signature": "const obj: {\n    a: number;\n    b: number;\n}",
          "type": {
            "__schema": "InferenceTypeSchema",
            "location": {
              "file": "index.ts",
              "line": 68,
              "character": 25
            },
            "type": "{\n    a: number;\n    b: number;\n}"
          }
        }
      },
      {
        "__schema": "TypeSchema",
        "location": {
          "file": "index.ts",
          "line": 70,
          "character": 1
        },
        "name": "TypeOperator",
        "signature": "type TypeOperator = \"a\" | \"b\"",
        "type": {
          "__schema": "TypeOperatorSchema",
          "location": {
            "file": "index.ts",
            "line": 70,
            "character": 28
          },
          "operatorName": "keyof",
          "type": {
            "__schema": "TypeQuerySchema",
            "location": {
              "file": "index.ts",
              "line": 70,
              "character": 34
            },
            "signature": "const obj: {\n    a: number;\n    b: number;\n}",
            "type": {
              "__schema": "InferenceTypeSchema",
              "location": {
                "file": "index.ts",
                "line": 70,
                "character": 41
              },
              "type": "{\n    a: number;\n    b: number;\n}"
            }
          }
        }
      },
      {
        "__schema": "FunctionLikeSchema",
        "location": {
          "file": "index.ts",
          "line": 76,
          "character": 14
        },
        "name": "getBar",
        "signature": "const getBar: (bar: Bar) => Bar",
        "modifiers": [],
        "params": [
          {
            "__schema": "ParameterSchema",
            "location": {
              "file": "index.ts",
              "line": 76,
              "character": 24
            },
            "name": "bar",
            "type": {
              "__schema": "TypeRefSchema",
              "location": {
                "file": "index.ts",
                "line": 76,
                "character": 29
              },
              "name": "Bar"
            }
          }
        ],
        "returnType": {
          "__schema": "TypeRefSchema",
          "location": {
            "file": "index.ts",
            "line": 76,
            "character": 14
          },
          "name": "Bar"
        }
      },
      {
        "__schema": "FunctionLikeSchema",
        "location": {
          "file": "index.ts",
          "line": 78,
          "character": 14
        },
        "name": "tuple",
        "signature": "const tuple: ([a, b, c]: [string, Function, Record<string, any>]) => void",
        "modifiers": [],
        "params": [
          {
            "__schema": "ParameterSchema",
            "location": {
              "file": "index.ts",
              "line": 78,
              "character": 23
            },
            "name": "[a, b, c]",
            "type": {
              "__schema": "TupleTypeSchema",
              "location": {
                "file": "index.ts",
                "line": 78,
                "character": 34
              },
              "elements": [
                {
                  "__schema": "KeywordTypeSchema",
                  "location": {
                    "file": "index.ts",
                    "line": 78,
                    "character": 35
                  },
                  "name": "string"
                },
                {
                  "__schema": "TypeRefSchema",
                  "location": {
                    "file": "index.ts",
                    "line": 78,
                    "character": 43
                  },
                  "name": "Function"
                },
                {
                  "__schema": "TypeRefSchema",
                  "location": {
                    "file": "index.ts",
                    "line": 78,
                    "character": 53
                  },
                  "name": "Record",
                  "packageName": ""
                }
              ]
            }
          }
        ],
        "returnType": {
          "__schema": "InferenceTypeSchema",
          "location": {
            "file": "index.ts",
            "line": 78,
            "character": 14
          },
          "type": "void"
        }
      }
    ]
  }
}