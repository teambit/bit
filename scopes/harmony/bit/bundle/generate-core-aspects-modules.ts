import { getWorkspaceInfo } from '@teambit/workspace.modules.workspace-locator';
import camelcase from 'camelcase';
import { getCoreAspectName, getCoreAspectPackageName } from '@teambit/aspect-loader';
import fs from 'fs-extra';
import { join } from 'path';

import { coreAspectsIds } from '../core-aspects-ids';

let wsRootDir: string;

async function loadWsRootDir() {
  const consumerInfo = await getWorkspaceInfo(process.cwd());
  if (!consumerInfo) throw new Error('unable to find consumer');
  wsRootDir = consumerInfo.path;
  return consumerInfo.path;
}

export async function generateCoreAspectsModules(bundleDir: string, appName: string) {
  await loadWsRootDir();
  const generateOneAspectP = coreAspectsIds.map((id) => {
    const name = getCoreAspectName(id);
    const packageName = getCoreAspectPackageName(id);
    return handleOneAspect(bundleDir, name, packageName, appName);
  });
  generateOneAspectP.push(handleOneAspect(bundleDir, 'legacy', '@teambit/legacy', appName));
  generateOneAspectP.push(handleOneAspect(bundleDir, 'harmony', '@teambit/harmony', appName));
  return Promise.all(generateOneAspectP);
}

async function handleOneAspect(bundleDir: string, name: string, packageName: string, appName: string) {
  const dirPath = join(bundleDir, 'node_modules', packageName);
  await fs.ensureDir(dirPath);
  await generateIndexFile(dirPath, name, appName);
  await generateEsmMjsFile(dirPath, packageName);
  await generatePackageJson(dirPath, packageName);
}

async function generateIndexFile(dirPath: string, name: string, appName: string) {
  const indexFilePath = join(dirPath, 'index.js');
  const indexFileContent = getIndexContent(name, appName);
  return fs.outputFile(indexFilePath, indexFileContent);
}

async function generateEsmMjsFile(dirPath: string, packageName: string) {
  const esmMjsPath = join(wsRootDir, 'node_modules', packageName, 'esm.mjs');
  const exists = await fs.pathExists(esmMjsPath);
  if (exists) {
    const targetPath = join(dirPath, 'esm.mjs');
    return fs.copyFile(esmMjsPath, targetPath);
  }
  return Promise.resolve();
}

async function generatePackageJson(dirPath: string, packageName: string) {
  const packageJsonPath = join(wsRootDir, 'node_modules', packageName, 'package.json');
  const targetPath = join(dirPath, 'package.json');
  const origPackageJson = await fs.readJson(packageJsonPath);
  origPackageJson.main = 'index.js';
  if (origPackageJson.exports && origPackageJson.exports['.']) {
    origPackageJson.exports['.'].node.require = './index.js';
    origPackageJson.exports['.'].node.import = './esm.mjs';
    origPackageJson.exports['.'].default = './index.js';
  }
  return fs.writeJson(targetPath, origPackageJson, { spaces: 2 });
}

function getIndexContent(name: string, appName: string) {
  const camelName = camelcase(name);
  return `
// This file is auto generated by generate-core-aspects-modules.ts
Object.defineProperty(exports, "__esModule", { value: true });
const { ${camelName} } = require("../../${appName}");
module.exports = ${camelName};
`;
}
