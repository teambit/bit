[
  {
    "name": "completion",
    "alias": "",
    "options": [],
    "description": "enable bash/zsh-completion shortcuts for commands and options",
    "extendedDescription": "",
    "group": "general",
    "private": false
  },
  {
    "name": "cli",
    "alias": "",
    "options": [],
    "description": "EXPERIMENTAL. enters bit cli program and generates commands list",
    "extendedDescription": "",
    "group": "general",
    "private": false,
    "commands": [
      {
        "name": "generate",
        "alias": "",
        "options": [
          [
            "",
            "metadata",
            "metadata/front-matter to place at the top of the .md file, enter as an object e.g. --metadata.id=cli --metadata.title=commands"
          ],
          [
            "",
            "docs",
            "generate the cli-reference.docs.mdx file"
          ],
          [
            "j",
            "json",
            "output the commands info as JSON"
          ]
        ],
        "description": "generate an .md file with all commands details",
        "extendedDescription": "",
        "group": "general",
        "private": false
      }
    ]
  },
  {
    "name": "help",
    "alias": "$0",
    "options": [
      [
        "",
        "internal",
        "show internal commands"
      ]
    ],
    "description": "shows help",
    "extendedDescription": "",
    "group": "general",
    "private": false
  },
  {
    "name": "version",
    "alias": "",
    "options": [
      [
        "j",
        "json",
        "return the version in json format"
      ]
    ],
    "description": "shows bit version",
    "extendedDescription": "",
    "group": "general",
    "private": false
  },
  {
    "name": "component-issues",
    "alias": "",
    "options": [
      [
        "j",
        "json",
        "output issues in json format"
      ]
    ],
    "description": "list available component-issues",
    "extendedDescription": "",
    "group": "development",
    "private": true
  },
  {
    "name": "show <component-name>",
    "alias": "",
    "options": [
      [
        "j",
        "json",
        "return the component data in json format"
      ],
      [
        "l",
        "legacy",
        "use the legacy bit show."
      ],
      [
        "r",
        "remote",
        "show data for a remote component"
      ],
      [
        "b",
        "browser",
        "open the component page in the browser"
      ],
      [
        "c",
        "compare",
        "legacy-only. compare current file system component to its latest tagged version [default=latest]"
      ]
    ],
    "description": "display the component's essential information",
    "extendedDescription": "",
    "group": "info",
    "private": false,
    "arguments": [
      {
        "name": "component-name",
        "description": "component name or component id"
      }
    ]
  },
  {
    "name": "envs",
    "alias": "env",
    "options": [],
    "description": "list all components maintained by the workspace and their corresponding envs",
    "extendedDescription": "",
    "group": "development",
    "private": false,
    "commands": [
      {
        "name": "list",
        "alias": "",
        "options": [],
        "description": "list all envs currently used in the workspace",
        "extendedDescription": "",
        "group": "development",
        "private": false
      },
      {
        "name": "get <component-name>",
        "alias": "",
        "options": [
          [
            "",
            "services <string>",
            "show information about the specific services only. for multiple services, separate by a comma and wrap with quotes"
          ]
        ],
        "description": "show config information from a component's env",
        "extendedDescription": "",
        "group": "development",
        "private": false,
        "arguments": [
          {
            "name": "component-name",
            "description": "the 'component name' or 'component id' of the component whose env you'd like to inspect"
          }
        ]
      },
      {
        "name": "set <component-pattern> <env>",
        "options": [],
        "description": "Assigns one or more components a development environment (env)",
        "group": "development",
        "arguments": [
          {
            "name": "component-pattern",
            "description": "component name, component id, or component pattern. use component pattern to select multiple components.\nwrap the pattern with quotes. use comma to separate patterns and \"!\" to exclude. e.g. \"ui/**, !ui/button\".\nuse '$' prefix to filter by states/attributes, e.g. '$deprecated', '$modified' or '$env:teambit.react/react'.\nuse `bit pattern --help` to understand patterns better and `bit pattern <pattern>` to validate the pattern."
          },
          {
            "name": "env",
            "description": "the env's component id (include version if not latest, e.g `teambit.community/envs/community-react@1.95.13`)"
          }
        ],
        "examples": [
          {
            "cmd": "set ui/button teambit.react/react-env",
            "description": "configures 'ui/button' to use the latest version of the 'teambit.react/react-env' env"
          },
          {
            "cmd": "set ui/button teambit.community/envs/community-mdx@1.95.16",
            "description": "configures 'ui/button' to use the 'teambit.community/envs/community-mdx@1.95.16' env"
          },
          {
            "cmd": "set \"*/ui/**\" teambit.react/react-env",
            "description": "configures all components that have the 'ui' namespace to use the latest version of the teambit.react/react-env env"
          }
        ]
      },
      {
        "name": "unset <component-pattern>",
        "options": [],
        "description": "un-sets an env from components that were previously set by \"bit env set\" or by a component template",
        "extendedDescription": "keep in mind that this doesn't remove envs that are set via variants.\nin only removes envs that appear in the .bitmap file, which were previously configured via \"bit env set\".\nthe purpose of this command is to reset previously assigned envs to either allow variants configure the env or use the base node env.\nyou can use a `<pattern>` for multiple component ids, such as `bit env unset \"org.scope/utils/**\"`.\nuse comma to separate patterns and '!' to exclude. e.g. 'ui/**, !ui/button'\nuse '$' prefix to filter by states/attributes, e.g. '$deprecated', '$modified' or '$env:teambit.react/react'.\nalways wrap the pattern with single quotes to avoid collision with shell commands.\nuse `bit pattern --help` to understand patterns better and `bit pattern <pattern>` to validate the pattern.\n",
        "group": "development",
        "arguments": [
          {
            "name": "component-pattern",
            "description": "component name, component id, or component pattern. use component pattern to select multiple components.\nwrap the pattern with quotes. use comma to separate patterns and \"!\" to exclude. e.g. \"ui/**, !ui/button\".\nuse '$' prefix to filter by states/attributes, e.g. '$deprecated', '$modified' or '$env:teambit.react/react'.\nuse `bit pattern --help` to understand patterns better and `bit pattern <pattern>` to validate the pattern."
          }
        ]
      },
      {
        "name": "replace <current-env> <new-env>",
        "options": [],
        "description": "replace an existing env with another env for all components using the old env",
        "group": "development",
        "arguments": [
          {
            "name": "current-env",
            "description": "the component id of the env to be replaced"
          },
          {
            "name": "new-env",
            "description": "the component id of the new env"
          }
        ],
        "examples": [
          {
            "cmd": "replace teambit.harmony/aspect teambit.harmony/node",
            "description": "components configured to use the 'aspect' env will be configured to use the 'node' env, instead"
          }
        ]
      },
      {
        "name": "update [env-id] [pattern]",
        "options": [],
        "description": "update a version of an env for all components using that env",
        "group": "development",
        "arguments": [
          {
            "name": "env-id",
            "description": "the environment id (defaults to all envs). optionally, add a version (id@version), if no version is supplied will use the latest version on the remote."
          },
          {
            "name": "pattern",
            "description": "the components to update (defaults to all components). component name, component id, or component pattern. use component pattern to select multiple components.\nwrap the pattern with quotes. use comma to separate patterns and \"!\" to exclude. e.g. \"ui/**, !ui/button\".\nuse '$' prefix to filter by states/attributes, e.g. '$deprecated', '$modified' or '$env:teambit.react/react'.\nuse `bit pattern --help` to understand patterns better and `bit pattern <pattern>` to validate the pattern."
          }
        ],
        "examples": [
          {
            "cmd": "envs update",
            "description": "update all envs for all components in the workspace, to their latest version"
          },
          {
            "cmd": "envs update scope.org/env '**/ui/**'",
            "description": "update components in the \"ui\" namespace that use scope.org/env to use its latest version"
          },
          {
            "cmd": "envs update scope.org/env@2.0.0",
            "description": "update all components that use scope.org/env to version 2.0.0 (of this env)."
          }
        ]
      }
    ]
  },
  {
    "name": "globals",
    "alias": "",
    "options": [
      [
        "j",
        "json",
        "json format"
      ]
    ],
    "description": "list all globals",
    "extendedDescription": "",
    "group": "workspace",
    "private": false
  },
  {
    "name": "system <sub-command>",
    "alias": "",
    "options": [],
    "description": "system operations",
    "extendedDescription": "",
    "group": "workspace",
    "private": false,
    "commands": [
      {
        "name": "log",
        "alias": "",
        "options": [],
        "description": "print debug.log to the screen",
        "extendedDescription": "",
        "group": "workspace",
        "private": false
      },
      {
        "name": "tail-log",
        "alias": "",
        "options": [],
        "description": "print the log file to the screen as it is being written",
        "extendedDescription": "similar to linux \"tail -f\" command",
        "group": "workspace",
        "private": false
      }
    ]
  },
  {
    "name": "config",
    "alias": "",
    "options": [],
    "description": "global config management",
    "extendedDescription": "https://bit.dev/reference/config/bit-config",
    "group": "general",
    "private": false,
    "commands": [
      {
        "name": "set <key> <val>",
        "alias": "",
        "options": [],
        "description": "set a global configuration",
        "extendedDescription": "to set temporary configuration by env variable, prefix with \"BIT_CONFIG\", replace \".\" with \"_\" and change to upper case.\nfor example, \"user.token\" becomes \"BIT_CONFIG_USER_TOKEN\"",
        "group": "ungrouped",
        "private": false,
        "skipWorkspace": true
      },
      {
        "name": "del <key>",
        "alias": "",
        "options": [],
        "description": "delete given key from global configuration",
        "extendedDescription": "",
        "group": "ungrouped",
        "private": false
      },
      {
        "name": "get <key>",
        "alias": "",
        "options": [],
        "description": "get a value from global configuration",
        "extendedDescription": "",
        "group": "ungrouped",
        "private": false
      },
      {
        "name": "list",
        "alias": "",
        "options": [],
        "description": "list all configuration(s)",
        "extendedDescription": "",
        "group": "ungrouped",
        "private": false
      }
    ]
  },
  {
    "name": "remote",
    "alias": "",
    "options": [
      [
        "g",
        "global",
        "see globally configured remotes"
      ]
    ],
    "description": "manage set of tracked bit scope(s)",
    "extendedDescription": "",
    "group": "collaborate",
    "private": false,
    "commands": [
      {
        "name": "add <url>",
        "alias": "",
        "options": [
          [
            "g",
            "global",
            "configure a remote bit scope"
          ]
        ],
        "description": "add a bare-scope as a remote",
        "extendedDescription": "supported protocols are [file, http].\nfor example: \"http://localhost:3000\", \"file:///tmp/local-scope\"",
        "group": "ungrouped",
        "private": false
      },
      {
        "name": "del <name>",
        "alias": "",
        "options": [
          [
            "g",
            "global",
            "remove a globally configured remote scope"
          ]
        ],
        "description": "remove a tracked bit remote",
        "extendedDescription": "",
        "group": "ungrouped",
        "private": false
      }
    ]
  },
  {
    "name": "start [component-pattern]",
    "alias": "c",
    "options": [
      [
        "d",
        "dev",
        "start UI server in dev mode."
      ],
      [
        "p",
        "port [port-number]",
        "port of the UI server."
      ],
      [
        "r",
        "rebuild",
        "rebuild the UI (useful e.g. when updating the workspace UI - can use the dev flag for HMR in this case)"
      ],
      [
        "",
        "skip-ui-build",
        "skip building UI"
      ],
      [
        "v",
        "verbose",
        "show verbose output for inspection and prints stack trace"
      ],
      [
        "n",
        "no-browser",
        "do not automatically open browser when ready"
      ],
      [
        "",
        "skip-compilation",
        "skip the auto-compilation before starting the web-server"
      ],
      [
        "u",
        "ui-root-name [type]",
        "name of the ui root to use, e.g. \"teambit.scope/scope\" or \"teambit.workspace/workspace\""
      ]
    ],
    "description": "run the ui/development server",
    "extendedDescription": "",
    "group": "development",
    "private": false,
    "arguments": [
      {
        "name": "component-pattern",
        "description": "component name, component id, or component pattern. use component pattern to select multiple components.\nwrap the pattern with quotes. use comma to separate patterns and \"!\" to exclude. e.g. \"ui/**, !ui/button\".\nuse '$' prefix to filter by states/attributes, e.g. '$deprecated', '$modified' or '$env:teambit.react/react'.\nuse `bit pattern --help` to understand patterns better and `bit pattern <pattern>` to validate the pattern."
      }
    ]
  },
  {
    "name": "ui-build [type]",
    "alias": "c",
    "options": [],
    "description": "build production assets for deployment.",
    "extendedDescription": "",
    "group": "development",
    "private": true
  },
  {
    "name": "graph [id]",
    "alias": "",
    "options": [
      [
        "i",
        "image <image>",
        "image path and format. use one of the following extensions: [gif, png, svg, pdf]"
      ],
      [
        "r",
        "remote [remoteName]",
        "remote name (name is optional, leave empty when id is specified)"
      ],
      [
        "",
        "all-versions",
        "enter all components versions into the graph, not only latest"
      ],
      [
        "",
        "layout <name>",
        "GraphVis layout. default to \"dot\". options are [circo, dot, fdp, neato, osage, patchwork, sfdp, twopi]"
      ],
      [
        "j",
        "json",
        "json format"
      ]
    ],
    "description": "generate an image file with the workspace components' dependencies graph",
    "extendedDescription": "",
    "group": "discover",
    "private": false,
    "remoteOp": true
  },
  {
    "name": "scope <sub-command>",
    "alias": "",
    "options": [],
    "description": "manage the scope-name for components",
    "extendedDescription": "",
    "group": "development",
    "private": false,
    "commands": [
      {
        "name": "set <scope-name> [component-pattern]",
        "options": [],
        "description": "Sets the scope for specified component/s. If no component is specified, sets the default scope of the workspace",
        "extendedDescription": "default scopes for components are set in the bitmap file. the default scope for a workspace is set in the workspace.jsonc.\na component is set with a scope (as oppose to default scope) only once it is versioned.'\n\nyou can use a `<pattern>` for multiple component ids, such as `bit scope set scope-name \"org.scope/utils/**\"`.\nuse comma to separate patterns and '!' to exclude. e.g. 'ui/**, !ui/button'\nuse '$' prefix to filter by states/attributes, e.g. '$deprecated', '$modified' or '$env:teambit.react/react'.\nalways wrap the pattern with single quotes to avoid collision with shell commands.\nuse `bit pattern --help` to understand patterns better and `bit pattern <pattern>` to validate the pattern.\n",
        "group": "development",
        "arguments": [
          {
            "name": "scope-name",
            "description": "name of the scope to set"
          },
          {
            "name": "component-pattern",
            "description": "component name, component id, or component pattern. use component pattern to select multiple components.\nwrap the pattern with quotes. use comma to separate patterns and \"!\" to exclude. e.g. \"ui/**, !ui/button\".\nuse '$' prefix to filter by states/attributes, e.g. '$deprecated', '$modified' or '$env:teambit.react/react'.\nuse `bit pattern --help` to understand patterns better and `bit pattern <pattern>` to validate the pattern."
          }
        ]
      },
      {
        "name": "fork <original-scope> [new-scope] [pattern]",
        "options": [
          [
            "",
            "ast",
            "use ast to transform files instead of regex"
          ],
          [
            "x",
            "skip-dependency-installation",
            "do not install packages of the imported components"
          ]
        ],
        "description": "fork all components of the original-scope and refactor the source-code to use the new scope name",
        "extendedDescription": "optionally, provide [pattern] to limit the fork to specific components",
        "group": "development",
        "arguments": [
          {
            "name": "original-scope",
            "description": "the original scope to fork"
          },
          {
            "name": "new-scope",
            "description": "the new scope to fork to, default to the default-scope of the workspace"
          },
          {
            "name": "pattern",
            "description": "component name, component id, or component pattern. use component pattern to select multiple components.\nwrap the pattern with quotes. use comma to separate patterns and \"!\" to exclude. e.g. \"ui/**, !ui/button\".\nuse '$' prefix to filter by states/attributes, e.g. '$deprecated', '$modified' or '$env:teambit.react/react'.\nuse `bit pattern --help` to understand patterns better and `bit pattern <pattern>` to validate the pattern."
          }
        ]
      },
      {
        "name": "rename <current-scope-name> <new-scope-name>",
        "options": [
          [
            "",
            "preserve",
            "avoid renaming files and variables/classes according to the new scope name"
          ],
          [
            "r",
            "refactor",
            "update the import statements in all dependent components to the new package name (i.e. with the new scope name)"
          ],
          [
            "",
            "deprecate",
            "for exported components, instead of deleting the original components, deprecating them"
          ]
        ],
        "description": "rename the scope name for all components with the specified 'current scope name'. if exported, create new components and delete the original ones",
        "extendedDescription": "Note: if `<current-scope-name>` is also the defaultScope for the workspace, this command will set `<new-scope-name>`\nas the defaultScope instead, and that will then be set for all components by default. You may see updates in your .bitmap file\nas a result of this change",
        "group": "development",
        "arguments": [
          {
            "name": "current-scope-name",
            "description": "the scope name to be replaced by another scope name"
          },
          {
            "name": "new-scope-name",
            "description": "a new scope name to replace the current scope name"
          }
        ]
      },
      {
        "name": "rename-owner <current-owner-name> <new-owner-name>",
        "options": [
          [
            "r",
            "refactor",
            "update the import statements in all dependent components to the new package name (that contains the new owner name)"
          ],
          [
            "",
            "ast",
            "use ast to transform files instead of regex"
          ]
        ],
        "description": "Renames the owner part of the scope-name for all components with the specified 'current owner name'",
        "group": "development",
        "arguments": [
          {
            "name": "current-owner-name",
            "description": "the owner name to be replaced by another owner name"
          },
          {
            "name": "new-owner-name",
            "description": "a new owner name to replace the current owner name"
          }
        ]
      }
    ]
  },
  {
    "name": "cat-scope [scopePath]",
    "alias": "",
    "options": [
      [
        "f",
        "full",
        "show all of the objects in the scope (except \"Source\")"
      ],
      [
        "j",
        "json",
        "print the objects as a json format"
      ],
      [
        "e",
        "json-extra",
        "add hash and object type to the json"
      ]
    ],
    "description": "cat a scope and show all the contents",
    "extendedDescription": "",
    "group": "ungrouped",
    "private": true
  },
  {
    "name": "cat-component [id]",
    "alias": "cmp",
    "options": [
      [
        "j",
        "json",
        "json format"
      ]
    ],
    "description": "cat a bit object by component-id",
    "extendedDescription": "",
    "group": "ungrouped",
    "private": true
  },
  {
    "name": "cat-object <hash>",
    "alias": "",
    "options": [
      [
        "p",
        "pretty",
        "pretty print for the objects"
      ],
      [
        "s",
        "stringify",
        "JSON.stringify the object to see special characters, such as \"\n\""
      ],
      [
        "",
        "headers",
        "shows the headers only"
      ]
    ],
    "description": "cat a bit object by hash",
    "extendedDescription": "",
    "group": "ungrouped",
    "private": true
  },
  {
    "name": "cat-lane <id>",
    "alias": "cl",
    "options": [],
    "description": "cat a bit object by lane-name",
    "extendedDescription": "",
    "group": "ungrouped",
    "private": true
  },
  {
    "name": "run-action <action-name> <remote> <options>",
    "alias": "",
    "options": [],
    "description": "run an action on a remote",
    "extendedDescription": "",
    "group": "ungrouped",
    "private": true
  },
  {
    "name": "_scope-gc",
    "alias": "",
    "options": [
      [
        "v",
        "verbose",
        "show verbose output"
      ],
      [
        "d",
        "dry-run",
        "print the refs that are going to be deleted without actually deleting them"
      ],
      [
        "f",
        "find-comp-id-origin <comp-id>",
        "find the origin of a specific component"
      ],
      [
        "s",
        "find-scope-id-origin <scope-id>",
        "find the origin of all components of the given scope. for multiple scopes, wrap with quotes and separate with commas"
      ],
      [
        "r",
        "restore",
        "restore deleted objects (copy objects from \"deleted-objects\" directory to the scope)"
      ],
      [
        "",
        "restore-overwrite",
        "same as --restore but overwrite existing objects"
      ]
    ],
    "description": "delete objects that have no reference from the components/lanes of this scope",
    "extendedDescription": "the deleted objects are copied into \"deleted-objects\" directory in the local scope",
    "group": "ungrouped",
    "private": true,
    "remoteOp": true
  },
  {
    "name": "eject-conf <pattern>",
    "alias": "",
    "options": [
      [
        "p",
        "propagate",
        "mark propagate true in the config file, so that component.json configs will be merge with workspace configs"
      ],
      [
        "o",
        "override",
        "override file if exist"
      ]
    ],
    "description": "eject components configuration (create a `component.json` file)",
    "extendedDescription": "note this can be reversed at any time by snapping/tagging changes and deleting the component.json file \nyou can use a `<pattern>` for multiple component ids, such as `bit eject-conf \"org.scope/utils/**\"`.\nuse comma to separate patterns and '!' to exclude. e.g. 'ui/**, !ui/button'\nuse '$' prefix to filter by states/attributes, e.g. '$deprecated', '$modified' or '$env:teambit.react/react'.\nalways wrap the pattern with single quotes to avoid collision with shell commands.\nuse `bit pattern --help` to understand patterns better and `bit pattern <pattern>` to validate the pattern.\n",
    "group": "development",
    "private": false
  },
  {
    "name": "capsule",
    "alias": "",
    "options": [
      [
        "j",
        "json",
        "json format"
      ]
    ],
    "description": "manage capsules",
    "extendedDescription": "a capsule is a directory containing the component code, isolated from the workspace.\nnormally, capsules are created during the build process, the component files are copied and the packages are installed\nvia the configured package-manager. the purpose is to compile/test them in isolation to make sure they will work for\nother users after publishing/exporting them.",
    "group": "capsules",
    "private": false,
    "commands": [
      {
        "name": "list",
        "alias": "",
        "options": [
          [
            "j",
            "json",
            "json format"
          ]
        ],
        "description": "list the capsules generated for this workspace",
        "extendedDescription": "",
        "group": "capsules",
        "private": false
      },
      {
        "name": "create [component-id...]",
        "alias": "",
        "options": [
          [
            "b",
            "base-dir <name>",
            "set base dir of all capsules (hashed to create the base dir inside the root dir - host path by default)"
          ],
          [
            "r",
            "root-base-dir <name>",
            "set root base dir of all capsules (absolute path to use as root dir)"
          ],
          [
            "a",
            "always-new",
            "create new environment for capsule"
          ],
          [
            "s",
            "seeders-only",
            "create capsules for the seeders only (not for the entire graph)"
          ],
          [
            "i",
            "id <name>",
            "reuse capsule of certain name"
          ],
          [
            "",
            "use-hash",
            "whether to use hash function (of base dir) as capsules root dir name"
          ],
          [
            "j",
            "json",
            "json format"
          ],
          [
            "d",
            "install-packages",
            "install packages by the package-manager"
          ],
          [
            "p",
            "package-manager <name>",
            "npm, yarn or pnpm, default to npm"
          ]
        ],
        "description": "create capsules for components",
        "extendedDescription": "",
        "group": "capsules",
        "private": false
      },
      {
        "name": "delete",
        "alias": "",
        "options": [
          [
            "",
            "scope-aspects",
            "delete scope-aspects capsules"
          ],
          [
            "a",
            "all",
            "delete all capsules for all workspaces and scopes"
          ]
        ],
        "description": "delete capsules",
        "extendedDescription": "with no args, only workspace's capsules are deleted",
        "group": "capsules",
        "private": false
      }
    ]
  },
  {
    "name": "use <component-id>",
    "alias": "",
    "options": [],
    "description": "set aspects in the workspace/scope config to make them loadable by the workspace/scope",
    "extendedDescription": "",
    "group": "collaborate",
    "private": false,
    "remoteOp": true,
    "arguments": [
      {
        "name": "component-id",
        "description": "the component ID of the aspect"
      }
    ]
  },
  {
    "name": "unuse <component-id>",
    "alias": "",
    "options": [],
    "description": "unset aspects in the workspace config (opposite of \"use\" command)",
    "extendedDescription": "",
    "group": "collaborate",
    "private": false,
    "remoteOp": true,
    "arguments": [
      {
        "name": "component-id",
        "description": "the component ID of the aspect"
      }
    ]
  },
  {
    "name": "pattern <pattern>",
    "alias": "",
    "options": [
      [
        "j",
        "json",
        "return the output as JSON"
      ]
    ],
    "description": "list the component ids matching the given pattern",
    "extendedDescription": "this command helps validating a pattern before using it in other commands.\nNOTE: always wrap the pattern with quotes to avoid collision with shell commands. depending on your shell, it might be single or double quotes.\na pattern can be a simple component-id or component-name. e.g. 'ui/button'.\na pattern can be used with wildcards for multiple component ids, e.g. 'org.scope/utils/**' or '**/utils/**' to capture all org/scopes.\nto enter multiple patterns, separate them by a comma, e.g. 'ui/*, lib/*'\nto exclude, use '!'. e.g. 'ui/**, !ui/button'\nthe matching algorithm is from multimatch (@see https://github.com/sindresorhus/multimatch).\n\nto filter by a state or attribute, prefix the pattern with \"$\". e.g. '$deprecated', '$modified'.\nlist of supported states: [new, modified, deprecated, deleted, snappedOnMain, softTagged, codeModified, localOnly].\nto filter by multi-params state/attribute, separate the params with \":\", e.g. '$env:teambit.react/react'.\nlist of supported multi-params states: [env].\nto match a state and another criteria, use \" AND \" keyword. e.g. '$modified AND teambit.workspace/** AND $env:teambit.react/react'.\n",
    "group": "development",
    "private": false,
    "examples": [
      {
        "cmd": "bit pattern '**'",
        "description": "matches all components"
      },
      {
        "cmd": "bit pattern '*/ui/*'",
        "description": "matches components with any scope-name and the \"ui\" namespace. e.g. \"ui/button\" but not \"ui/elements/button\""
      },
      {
        "cmd": "bit pattern '*/ui/**'",
        "description": "matches components whose namespace starts with \"ui/\" e.g. \"ui/button\", \"ui/elements/button\""
      },
      {
        "cmd": "bit pattern 'bar, foo'",
        "description": "matches two components: bar and foo"
      },
      {
        "cmd": "bit pattern 'my-scope.org/**'",
        "description": "matches all components of the scope \"my-scope.org\""
      }
    ]
  },
  {
    "name": "local-only <sub-command>",
    "alias": "",
    "options": [],
    "description": "manage local-only components, which reside only in the workspace and are not snapped/tagged",
    "extendedDescription": "",
    "group": "development",
    "private": false,
    "commands": [
      {
        "name": "set <component-pattern>",
        "alias": "",
        "options": [],
        "description": "set a component as local-only",
        "extendedDescription": "",
        "group": "ungrouped",
        "private": false,
        "arguments": [
          {
            "name": "component-pattern",
            "description": "component name, component id, or component pattern. use component pattern to select multiple components.\nwrap the pattern with quotes. use comma to separate patterns and \"!\" to exclude. e.g. \"ui/**, !ui/button\".\nuse '$' prefix to filter by states/attributes, e.g. '$deprecated', '$modified' or '$env:teambit.react/react'.\nuse `bit pattern --help` to understand patterns better and `bit pattern <pattern>` to validate the pattern."
          }
        ]
      },
      {
        "name": "unset <component-pattern>",
        "alias": "",
        "options": [],
        "description": "remove a component from local-only",
        "extendedDescription": "",
        "group": "ungrouped",
        "private": false,
        "arguments": [
          {
            "name": "component-pattern",
            "description": "component name, component id, or component pattern. use component pattern to select multiple components.\nwrap the pattern with quotes. use comma to separate patterns and \"!\" to exclude. e.g. \"ui/**, !ui/button\".\nuse '$' prefix to filter by states/attributes, e.g. '$deprecated', '$modified' or '$env:teambit.react/react'.\nuse `bit pattern --help` to understand patterns better and `bit pattern <pattern>` to validate the pattern."
          }
        ]
      },
      {
        "name": "list",
        "alias": "",
        "options": [],
        "description": "list all local-only components",
        "extendedDescription": "",
        "group": "ungrouped",
        "private": false
      }
    ]
  },
  {
    "name": "ws-config <sub-command>",
    "alias": "workspace-config",
    "options": [],
    "description": "manage workspace config files",
    "extendedDescription": "",
    "group": "development",
    "private": false,
    "commands": [
      {
        "name": "write",
        "alias": "",
        "options": [
          [
            "c",
            "clean",
            "delete existing config files from the workspace. highly recommended to run it with \"--dry-run\" first"
          ],
          [
            "w",
            "writers <writers>",
            "only write config files for the given writers. use comma to separate multiple writers. use ws-config list to see all writers"
          ],
          [
            "s",
            "silent",
            "do not prompt for confirmation"
          ],
          [
            "",
            "no-dedupe",
            "write configs inside each one of the component's dir, avoid deduping"
          ],
          [
            "",
            "dry-run",
            "show the paths that configs will be written per env"
          ],
          [
            "",
            "dry-run-with-content",
            "use with --json flag. show the config content and the paths that will be written per env"
          ],
          [
            "v",
            "verbose",
            "showing verbose output for writing"
          ],
          [
            "j",
            "json",
            "json format"
          ]
        ],
        "description": "write config files in the workspace. useful for IDEs",
        "extendedDescription": "",
        "group": "development",
        "private": false
      },
      {
        "name": "clean",
        "alias": "",
        "options": [
          [
            "s",
            "silent",
            "do not prompt for confirmation"
          ],
          [
            "w",
            "writers <writers>",
            "only clean config files for the given writers. use comma to separate multiple writers. use ws-config list to see all writers"
          ],
          [
            "",
            "dry-run",
            "show the paths of configs that will be cleaned"
          ],
          [
            "j",
            "json",
            "json format"
          ]
        ],
        "description": "clean (delete) written config files in the workspace. useful for IDEs",
        "extendedDescription": "",
        "group": "development",
        "private": false
      },
      {
        "name": "list",
        "alias": "",
        "options": [
          [
            "j",
            "json",
            "json format"
          ]
        ],
        "description": "list config writers",
        "extendedDescription": "",
        "group": "development",
        "private": false
      }
    ]
  },
  {
    "name": "deprecate <component-name>",
    "alias": "d",
    "options": [
      [
        "",
        "new-id <string>",
        "if replaced by another component, enter the new component id. alternatively use \"bit rename --deprecate\" to do this automatically"
      ],
      [
        "",
        "range <string>",
        "enter a Semver range to deprecate specific versions. see https://www.npmjs.com/package/semver#ranges for the range syntax"
      ]
    ],
    "description": "deprecate a component",
    "extendedDescription": "",
    "group": "collaborate",
    "private": false,
    "remoteOp": true,
    "skipWorkspace": true,
    "arguments": [
      {
        "name": "component-name",
        "description": "component name or component id"
      }
    ]
  },
  {
    "name": "undeprecate <id>",
    "alias": "",
    "options": [],
    "description": "undeprecate a deprecated component (local/remote)",
    "extendedDescription": "",
    "group": "collaborate",
    "private": false,
    "remoteOp": true,
    "skipWorkspace": true
  },
  {
    "name": "git <sub-command>",
    "alias": "",
    "options": [],
    "description": "perform git operations",
    "extendedDescription": "",
    "group": "git",
    "private": false,
    "commands": [
      {
        "name": "set-merge-driver",
        "alias": "smd",
        "options": [
          [
            "g",
            "global",
            "set the git merge driver globally"
          ]
        ],
        "description": "setup bit's git merge driver for bitmap files",
        "extendedDescription": "",
        "group": "git",
        "private": false
      },
      {
        "name": "merge-bitmaps <ancestor> <current> <other>",
        "alias": "",
        "options": [],
        "description": "a special command to merge conflicting bitmap files during git merge",
        "extendedDescription": "",
        "group": "git",
        "private": true
      }
    ]
  },
  {
    "name": "add [path...]",
    "alias": "a",
    "options": [
      [
        "i",
        "id <name>",
        "manually set component id"
      ],
      [
        "m",
        "main <file>",
        "define component entry point"
      ],
      [
        "n",
        "namespace <namespace>",
        "organize component in a namespace"
      ],
      [
        "o",
        "override <boolean>",
        "override existing component if exists (default = false)"
      ],
      [
        "s",
        "scope <string>",
        "sets the component's scope. if not entered, the default-scope from workspace.jsonc will be used"
      ],
      [
        "e",
        "env <string>",
        "set the component's environment. (overrides the env from variants if exists)"
      ],
      [
        "j",
        "json",
        "output as json format"
      ]
    ],
    "description": "Add any subset of files to be tracked as a component(s).",
    "extendedDescription": "Learn the recommended workflow for tracking directories as components, in the link below.",
    "group": "development",
    "private": false
  },
  {
    "name": "create <template-name> <component-names...>",
    "alias": "",
    "options": [
      [
        "n",
        "namespace <string>",
        "sets the component's namespace and nested dirs inside the scope"
      ],
      [
        "s",
        "scope <string>",
        "sets the component's scope-name. if not entered, the default-scope will be used"
      ],
      [
        "a",
        "aspect <string>",
        "aspect-id of the template. helpful when multiple aspects use the same template name"
      ],
      [
        "t",
        "template <string>",
        "env-id of the template. alias for --aspect."
      ],
      [
        "p",
        "path <string>",
        "relative path in the workspace. by default the path is `<scope>/<namespace>/<name>`"
      ],
      [
        "e",
        "env <string>",
        "set the component's environment. (overrides the env from variants and the template)"
      ],
      [
        "f",
        "force",
        "replace existing files at the target location"
      ]
    ],
    "description": "create a new component (source files and config) using a template.",
    "extendedDescription": "",
    "group": "development",
    "private": false,
    "arguments": [
      {
        "name": "template-name",
        "description": "the template for generating the component \n(run 'bit templates' for a list of available templates)"
      },
      {
        "name": "component-names...",
        "description": "a list of component names to generate"
      }
    ],
    "examples": [
      {
        "cmd": "bit create react ui/button --aspect teambit.react/react-env",
        "description": "creates a component named 'ui/button' using the 'react' template"
      },
      {
        "cmd": "bit create node utils/is-string utils/is-number --aspect teambit.node/node",
        "description": "creates two components, 'utils/is-string' and 'utils/is-number' using the 'node' template from the 'node' aspect(env)"
      },
      {
        "cmd": "bit create mdx docs/create-components --aspect teambit.mdx/mdx-env --scope my-org.my-scope",
        "description": "creates an mdx component named 'docs/create-components' and sets it scope to 'my-org.my-scope'. \nby default, the scope is the `defaultScope` value, configured in your `workspace.jsonc`."
      },
      {
        "cmd": "bit create react ui/button --aspect teambit.react/react-env --env teambit.community/envs/community-react@3.0.3",
        "description": "creates a component named 'ui/button' from the teambit.react/react-env env and sets it to use the 'community-react' env. \n(the template's default env is 'teambit.react/react-env')."
      }
    ]
  },
  {
    "name": "templates",
    "alias": "",
    "options": [
      [
        "s",
        "show-all",
        "show hidden templates"
      ],
      [
        "a",
        "aspect <aspect-id>",
        "show templates provided by the aspect-id"
      ]
    ],
    "description": "list available templates for \"bit create\" and \"bit new\"",
    "extendedDescription": "list components templates when inside bit-workspace (for bit-create), otherwise, list workspace templates (for bit-new)",
    "group": "development",
    "private": false
  },
  {
    "name": "new <template-name> <workspace-name>",
    "alias": "",
    "options": [
      [
        "a",
        "aspect <aspect-id>",
        "id of the aspect that registered the template, mandatory for non-core aspects. helpful for core aspects in case of a name collision"
      ],
      [
        "t",
        "template <env-id>",
        "id of the dev environment to use for the template. Alias for --env."
      ],
      [
        "",
        "env <env-id>",
        "id of the dev environment to use for the template. Alias -t"
      ],
      [
        "d",
        "default-scope <scope-name>",
        "set the default scope for the workspace. used in the generated workspace.jsonc"
      ],
      [
        "",
        "standalone",
        "DEPRECATED. use --skip-git instead"
      ],
      [
        "s",
        "skip-git",
        "skip generation of Git repository in the new workspace"
      ],
      [
        "e",
        "empty",
        "skip template's default component creation (relevant for templates that add components by default)"
      ],
      [
        "",
        "load-from <path-to-template>",
        "local path to the workspace containing the template. Helpful during a development of a workspace-template"
      ],
      [
        "c",
        "current-dir",
        "create the new workspace in current directory (default is to create a new directory, inside the current dir)"
      ]
    ],
    "description": "create a new workspace from a template",
    "extendedDescription": "",
    "group": "start",
    "private": false,
    "arguments": [
      {
        "name": "template-name",
        "description": "the name of the workspace template (run 'bit templates' outside of a workspace to get a list of available workspace templates)"
      },
      {
        "name": "workspace-name",
        "description": "the name for the new workspace and workspace directory that will be created"
      }
    ]
  },
  {
    "name": "watch",
    "alias": "",
    "options": [
      [
        "v",
        "verbose",
        "show all watch events and compiler verbose output"
      ],
      [
        "",
        "skip-pre-compilation",
        "skip compilation step before starting to watch"
      ],
      [
        "t",
        "check-types [string]",
        "show errors/warnings for types. options are [file, project] to investigate only changed file or entire project. defaults to project"
      ],
      [
        "i",
        "import",
        "DEPRECATED. it is now the default. helpful when using git. import component objects if .bitmap changed not by bit"
      ],
      [
        "",
        "skip-import",
        "do not import component objects if .bitmap changed not by bit"
      ],
      [
        "",
        "generate-types",
        "EXPERIMENTAL. generate d.ts files for typescript components (hurts performance)"
      ],
      [
        "",
        "trigger <comp-id>",
        "trigger recompilation of the specified component regardless of what changed. helpful when this comp-id must be a bundle"
      ]
    ],
    "description": "automatically recompile modified components (on save)",
    "extendedDescription": "by default, the watcher doesn't use polling, to keep the CPU idle.\nif this doesn't work well for you, run \"bit config set watch_use_polling true\" to use polling.",
    "group": "development",
    "private": false
  },
  {
    "name": "build [component-pattern]",
    "alias": "",
    "options": [
      [
        "u",
        "unmodified",
        "include unmodified components (by default, only new and modified components are built)"
      ],
      [
        "d",
        "dev",
        "run the pipeline in dev mode"
      ],
      [
        "",
        "install",
        "install core aspects in capsules"
      ],
      [
        "",
        "reuse-capsules",
        "avoid deleting the capsules root-dir before starting the build"
      ],
      [
        "",
        "rewrite",
        "use only with --reuse-capsules. rewrite the component files"
      ],
      [
        "",
        "reinstall",
        "use only with --reuse-capsules. rerun the installation"
      ],
      [
        "",
        "tasks <string>",
        "build the specified task(s) only. for multiple tasks, separate by a comma and wrap with quotes.\nspecify the task-name (e.g. \"TypescriptCompiler\") or the task-aspect-id (e.g. teambit.compilation/compiler)"
      ],
      [
        "",
        "cache-packages-on-capsule-root",
        "set the package-manager cache on the capsule root"
      ],
      [
        "",
        "list-tasks <string>",
        "list tasks of an env or a component-id for each one of the pipelines: build, tag and snap"
      ],
      [
        "",
        "skip-tests",
        "skip running component tests during build process"
      ],
      [
        "",
        "skip-tasks <string>",
        "skip the given tasks. for multiple tasks, separate by a comma and wrap with quotes.\n  specify the task-name (e.g. \"TypescriptCompiler\") or the task-aspect-id (e.g. teambit.compilation/compiler)"
      ],
      [
        "",
        "fail-fast",
        "stop pipeline execution on the first failed task (by default a task is skipped only when its dependency failed)"
      ],
      [
        "",
        "include-snap",
        "include snap pipeline tasks. Warning: this may deploy/publish if you have such tasks"
      ],
      [
        "",
        "include-tag",
        "include tag pipeline tasks. Warning: this may deploy/publish if you have such tasks"
      ],
      [
        "i",
        "ignore-issues <issues>",
        "ignore component issues (shown in \"bit status\" as \"issues found\"), issues to ignore:\n[MissingPackagesDependenciesOnFs, MissingManuallyConfiguredPackages, UntrackedDependencies, ResolveErrors, RelativeComponents, RelativeComponentsAuthored, ParseErrors, MissingDists, LegacyInsideHarmony, MissingDependenciesOnFs, ImportNonMainFiles, MultipleEnvs, MissingLinksFromNodeModulesToSrc, CircularDependencies, DuplicateComponentAndPackage, MergeConfigHasConflict, NonLoadedEnv, ExternalEnvWithoutVersion, RemovedDependencies, RemovedEnv, DeprecatedDependencies, SelfReference, ImportFromDirectory]\nto ignore multiple issues, separate them by a comma and wrap with quotes. to ignore all issues, specify \"*\"."
      ]
    ],
    "description": "run set of tasks for build.",
    "extendedDescription": "by default, only new and modified components are built.\nthe build takes place in an isolated directories on the filesystem (called \"capsules\"). the component files are copied to these directories\nand the package-manager installs the dependencies in the capsules root. once done, the build pipeline is running.\nbecause this process can take a while on a large workspace, some flags are available to shorten the process. See the example section for more info.\n  ",
    "group": "development",
    "private": false,
    "arguments": [
      {
        "name": "component-pattern",
        "description": "component name, component id, or component pattern. use component pattern to select multiple components.\nwrap the pattern with quotes. use comma to separate patterns and \"!\" to exclude. e.g. \"ui/**, !ui/button\".\nuse '$' prefix to filter by states/attributes, e.g. '$deprecated', '$modified' or '$env:teambit.react/react'.\nuse `bit pattern --help` to understand patterns better and `bit pattern <pattern>` to validate the pattern."
      }
    ],
    "examples": [
      {
        "cmd": "build --reuse-capsules --tasks \"custom-task\"",
        "description": "helps to debug this \"custom-task\" without recreating the capsules from scratch"
      },
      {
        "cmd": "build --reuse-capsules --rewrite --tasks \"BabelCompile,MochaTest\"",
        "description": "helpful when for example the tests are failing and code changes are needed to debug it.\nthe \"--rewrite\" flag ensures the component files are fresh, and the \"--tasks\" ensures to re-compile them and then run the tests"
      }
    ]
  },
  {
    "name": "artifacts <component-pattern>",
    "alias": "",
    "options": [
      [
        "",
        "aspect <aspect-id>",
        "show/download only artifacts generated by this aspect-id"
      ],
      [
        "",
        "task <task-id>",
        "show/download only artifacts generated by this task-id"
      ],
      [
        "",
        "files <glob>",
        "show/download only artifacts matching the given files or the glob pattern (wrap glob patterns in quotes)"
      ],
      [
        "",
        "out-dir <string>",
        "download the files to the specified dir"
      ]
    ],
    "description": "list and download component artifacts",
    "extendedDescription": "artifacts are created on isolated capsules during tag or snap commands.\nexample of artifacts are dists files generated by a compiler, a JUnit.xml file generated by a tester\nand a package.tgz file generated by pkg aspect.\n",
    "group": "development",
    "private": false,
    "arguments": [
      {
        "name": "component-pattern",
        "description": "component name, component id, or component pattern. use component pattern to select multiple components.\nwrap the pattern with quotes. use comma to separate patterns and \"!\" to exclude. e.g. \"ui/**, !ui/button\".\nuse '$' prefix to filter by states/attributes, e.g. '$deprecated', '$modified' or '$env:teambit.react/react'.\nuse `bit pattern --help` to understand patterns better and `bit pattern <pattern>` to validate the pattern."
      }
    ]
  },
  {
    "name": "run <app-name>",
    "alias": "c",
    "options": [
      [
        "d",
        "dev",
        "start the application in dev mode."
      ],
      [
        "p",
        "port [port-number]",
        "port to run the app on"
      ],
      [
        "v",
        "verbose",
        "show verbose output for inspection and print stack trace"
      ],
      [
        "w",
        "watch",
        "watch and compile your components upon changes"
      ],
      [
        "a",
        "args <argv>",
        "the arguments passing to the app. for example, --args=\"--a=1 --b\". don't forget to use quotes to wrap the value to escape special characters."
      ]
    ],
    "description": "locally run an app component (independent of bit's dev server)",
    "extendedDescription": "",
    "group": "apps",
    "private": false,
    "arguments": [
      {
        "name": "app-name",
        "description": "the app's name is registered by the app (run 'bit app list' to list the names of the available apps)"
      }
    ]
  },
  {
    "name": "app <sub-command>",
    "alias": "apps",
    "options": [],
    "description": "Manages apps",
    "extendedDescription": "",
    "group": "apps",
    "private": false,
    "commands": [
      {
        "name": "list",
        "alias": "",
        "options": [
          [
            "j",
            "json",
            "return the component data in json format"
          ]
        ],
        "description": "list all registered apps",
        "extendedDescription": "",
        "group": "apps",
        "private": false
      },
      {
        "name": "run <app-name>",
        "alias": "c",
        "options": [
          [
            "d",
            "dev",
            "start the application in dev mode."
          ],
          [
            "p",
            "port [port-number]",
            "port to run the app on"
          ],
          [
            "v",
            "verbose",
            "show verbose output for inspection and print stack trace"
          ],
          [
            "w",
            "watch",
            "watch and compile your components upon changes"
          ],
          [
            "a",
            "args <argv>",
            "the arguments passing to the app. for example, --args=\"--a=1 --b\". don't forget to use quotes to wrap the value to escape special characters."
          ]
        ],
        "description": "locally run an app component (independent of bit's dev server)",
        "extendedDescription": "",
        "group": "apps",
        "private": false,
        "arguments": [
          {
            "name": "app-name",
            "description": "the app's name is registered by the app (run 'bit app list' to list the names of the available apps)"
          }
        ]
      }
    ]
  },
  {
    "name": "compile [component-names...]",
    "alias": "",
    "options": [
      [
        "c",
        "changed",
        "compile only new and modified components"
      ],
      [
        "v",
        "verbose",
        "show more data, such as, dist paths"
      ],
      [
        "j",
        "json",
        "return the compile results in json format"
      ],
      [
        "d",
        "delete-dist-dir",
        "delete existing dist folder before writing new compiled files"
      ],
      [
        "",
        "generate-types",
        "EXPERIMENTAL. generate d.ts files for typescript components (hurts performance)"
      ]
    ],
    "description": "compile components in the workspace",
    "extendedDescription": "",
    "group": "development",
    "private": false,
    "arguments": [
      {
        "name": "component-names...",
        "description": "a list of component names or component IDs (defaults to all components)"
      }
    ]
  },
  {
    "name": "install [packages...]",
    "alias": "in",
    "options": [
      [
        "t",
        "type [lifecycleType]",
        "\"runtime\" (default) or \"peer\" (dev is not a valid option)"
      ],
      [
        "u",
        "update",
        "update all dependencies to latest version according to their semver range"
      ],
      [
        "",
        "update-existing",
        "DEPRECATED (not needed anymore, it is the default now). update existing dependencies version and types"
      ],
      [
        "",
        "save-prefix [savePrefix]",
        "set the prefix to use when adding dependency to workspace.jsonc"
      ],
      [
        "",
        "skip-dedupe",
        "do not dedupe dependencies on installation"
      ],
      [
        "",
        "skip-import",
        "do not import bit objects post installation"
      ],
      [
        "",
        "skip-compile",
        "do not compile components"
      ],
      [
        "",
        "skip-write-config-files",
        "do not write config files (such as eslint, tsconfig, prettier, etc...)"
      ],
      [
        "a",
        "add-missing-deps",
        "install all missing dependencies"
      ],
      [
        "",
        "add-missing-peers",
        "install all missing peer dependencies"
      ],
      [
        "",
        "recurring-install",
        "automatically run install again if there are non loaded old envs in your workspace"
      ],
      [
        "",
        "no-optional [noOptional]",
        "do not install optional dependencies (works with pnpm only)"
      ],
      [
        "",
        "lockfile-only",
        "dependencies are not written to node_modules. Only the lockfile is updated"
      ]
    ],
    "description": "installs workspace dependencies",
    "extendedDescription": "when no package is specified, all workspace dependencies are installed and all workspace components are imported.",
    "group": "development",
    "private": false,
    "arguments": [
      {
        "name": "packages...",
        "description": "a list of packages to install (separated by spaces)"
      }
    ]
  },
  {
    "name": "uninstall [packages...]",
    "alias": "un",
    "options": [],
    "description": "uninstall dependencies",
    "extendedDescription": "",
    "group": "development",
    "private": false
  },
  {
    "name": "update [package-patterns...]",
    "alias": "up",
    "options": [
      [
        "y",
        "yes",
        "automatically update all outdated versions for packages specified in pattern (all if no pattern supplied) - use carefully as could result in breaking updates for dependencies"
      ],
      [
        "",
        "patch",
        "update to the latest patch version. Semver rules are ignored"
      ],
      [
        "",
        "minor",
        "update to the latest minor version. Semver rules are ignored"
      ],
      [
        "",
        "major",
        "update to the latest major version. Semver rules are ignored"
      ],
      [
        "",
        "semver",
        "update to the newest version respecting semver"
      ]
    ],
    "description": "update dependencies. By default, dependencies are updated to the highest semver compatible versions.",
    "extendedDescription": "",
    "group": "development",
    "private": false,
    "arguments": [
      {
        "name": "package-patterns...",
        "description": "a string list of package names, or patterns (separated by spaces or commas), e.g. \"@teambit/**,@my-org/ui.**\". The patterns should be in glob format. By default, all packages are selected."
      }
    ]
  },
  {
    "name": "link [component-names...]",
    "alias": "",
    "options": [
      [
        "j",
        "json",
        "return the output as JSON"
      ],
      [
        "",
        "verbose",
        "verbose output"
      ],
      [
        "r",
        "rewire",
        "Replace relative paths with module paths in code (e.g. \"../foo\" => \"@bit/foo\")"
      ],
      [
        "",
        "target <dir>",
        "link to an external directory (similar to npm-link) so other projects could use these components"
      ],
      [
        "",
        "skip-fetching-objects",
        "skip fetch missing objects from remotes before linking"
      ],
      [
        "",
        "peers",
        "link peer dependencies of the components too"
      ]
    ],
    "description": "create links in the node_modules directory, to core aspects and to components in the workspace",
    "extendedDescription": "",
    "group": "development",
    "private": false,
    "arguments": [
      {
        "name": "component-names...",
        "description": "names or IDs of the components to link"
      }
    ]
  },
  {
    "name": "eject <component-pattern>",
    "alias": "E",
    "options": [
      [
        "f",
        "force",
        "ignore local changes/versions. eject component/s even when they are staged or modified. Note: unexported tags/snaps will be lost"
      ],
      [
        "x",
        "skip-dependency-installation",
        "do not auto-install dependencies"
      ],
      [
        "j",
        "json",
        "print the results in JSON format"
      ],
      [
        "",
        "keep-files",
        "keep the component files in the workspace intact"
      ]
    ],
    "description": "remove component from the workspace and install it instead as a regular npm package.",
    "extendedDescription": "By default the component files will be removed from the workspace",
    "group": "development",
    "private": false,
    "arguments": [
      {
        "name": "component-pattern",
        "description": "component name, component id, or component pattern. use component pattern to select multiple components.\nwrap the pattern with quotes. use comma to separate patterns and \"!\" to exclude. e.g. \"ui/**, !ui/button\".\nuse '$' prefix to filter by states/attributes, e.g. '$deprecated', '$modified' or '$env:teambit.react/react'.\nuse `bit pattern --help` to understand patterns better and `bit pattern <pattern>` to validate the pattern."
      }
    ]
  },
  {
    "name": "list [remote-scope]",
    "alias": "ls",
    "options": [
      [
        "i",
        "ids",
        "show only component ids, unformatted"
      ],
      [
        "s",
        "scope",
        "show only components stored in the local scope, including indirect dependencies"
      ],
      [
        "o",
        "outdated",
        "highlight outdated components, in comparison with their latest remote version (if one exists)"
      ],
      [
        "d",
        "include-deleted",
        "EXPERIMENTAL. show also deleted components"
      ],
      [
        "j",
        "json",
        "show the output in JSON format"
      ],
      [
        "n",
        "namespace <string>",
        "show only components in the specified namespace/s e.g. '-n ui' or '*/ui'"
      ]
    ],
    "description": "list components on a workspace or a remote scope (with flag).",
    "extendedDescription": "",
    "group": "discover",
    "private": false,
    "remoteOp": true,
    "skipWorkspace": true
  },
  {
    "name": "move <current-component-dir> <new-component-dir>",
    "alias": "mv",
    "options": [],
    "description": "move a component to a different filesystem path",
    "extendedDescription": "(note: this does NOT affect the component's name or scope, just its location in the workspace)",
    "group": "development",
    "private": false,
    "arguments": [
      {
        "name": "current-component-dir",
        "description": "the component's current directory (relative to the workspace root)"
      },
      {
        "name": "new-component-dir",
        "description": "the new directory (relative to the workspace root) to create and move the component's files to"
      }
    ]
  },
  {
    "name": "import [component-patterns...]",
    "alias": "",
    "options": [
      [
        "p",
        "path <path>",
        "import components into a specific directory (a relative path in the workspace)"
      ],
      [
        "o",
        "objects",
        "import components objects to the local scope without checkout (without writing them to the file system). This is the default behavior for import with no id argument"
      ],
      [
        "O",
        "override",
        "override local changes"
      ],
      [
        "v",
        "verbose",
        "show verbose output for inspection"
      ],
      [
        "j",
        "json",
        "return the output as JSON"
      ],
      [
        "x",
        "skip-dependency-installation",
        "do not auto-install dependencies of the imported components"
      ],
      [
        "",
        "skip-write-config-files",
        "do not write config files (such as eslint, tsconfig, prettier, etc...)"
      ],
      [
        "m",
        "merge [strategy]",
        "merge local changes with the imported version. strategy should be \"theirs\", \"ours\" or \"manual\""
      ],
      [
        "",
        "dependencies",
        "import all dependencies (bit components only) of imported components and write them to the workspace"
      ],
      [
        "",
        "dependencies-head",
        "same as --dependencies, except it imports the dependencies with their head version"
      ],
      [
        "",
        "dependents",
        "import components found while traversing from the imported components upwards to the workspace components"
      ],
      [
        "",
        "dependents-via <string>",
        "same as --dependents except the traversal must go through the specified component. to specify multiple components, wrap with quotes and separate by a comma"
      ],
      [
        "",
        "dependents-all",
        "same as --dependents except not prompting for selecting paths but rather selecting all paths and showing final confirmation before importing"
      ],
      [
        "",
        "dependents-dry-run",
        "DEPRECATED. (this is the default now). same as --dependents, except it prints the found dependents and wait for confirmation before importing them"
      ],
      [
        "",
        "silent",
        "no prompt for --dependents/--dependents-via flags"
      ],
      [
        "",
        "filter-envs <envs>",
        "only import components that have the specified environment (e.g., \"teambit.react/react-env\")"
      ],
      [
        "",
        "save-in-lane",
        "when checked out to a lane and the component is not on the remote-lane, save it in the lane (defaults to save on main)"
      ],
      [
        "",
        "all-history",
        "relevant for fetching all components objects. avoid optimizations, fetch all history versions, always"
      ],
      [
        "",
        "fetch-deps",
        "fetch dependencies (bit components) objects to the local scope, but dont add to the workspace. Useful to resolve errors about missing dependency data"
      ],
      [
        "",
        "track-only",
        "do not write any component files, just create .bitmap entries of the imported components. Useful when the files already exist and just want to re-add the component to the bitmap"
      ],
      [
        "",
        "include-deprecated",
        "when importing with patterns, include deprecated components (default to exclude them)"
      ]
    ],
    "description": "import components from their remote scopes to the local workspace",
    "extendedDescription": "",
    "group": "collaborate",
    "private": false,
    "remoteOp": true,
    "arguments": [
      {
        "name": "component-patterns...",
        "description": "component IDs or component patterns (separated by space). Use patterns to import groups of components using a common scope or namespace. E.g., \"utils/*\" (wrap with double quotes)"
      }
    ]
  },
  {
    "name": "fetch [ids...]",
    "alias": "",
    "options": [
      [
        "l",
        "lanes",
        "fetch component objects from lanes. note, it does not save the remote lanes objects locally, only the refs"
      ],
      [
        "c",
        "components",
        "fetch components"
      ],
      [
        "",
        "all-history",
        "for each component, fetch all its versions. by default, only the latest version is fetched"
      ],
      [
        "j",
        "json",
        "return the output as JSON"
      ],
      [
        "",
        "from-original-scopes",
        "fetch indirect dependencies from their original scope as opposed to from their dependents"
      ]
    ],
    "description": "fetch remote objects and store locally",
    "extendedDescription": "for lanes, use \"/\" as a separator between the remote and the lane name, e.g. teambit.ui/fix-button",
    "group": "ungrouped",
    "private": true
  },
  {
    "name": "remove <component-pattern>",
    "alias": "rm",
    "options": [
      [
        "t",
        "track",
        "keep tracking component in .bitmap (default = false), helps transform a tagged-component to new"
      ],
      [
        "",
        "keep-files",
        "keep component files (just untrack the component)"
      ],
      [
        "f",
        "force",
        "removes the component from the scope, even if used as a dependency. WARNING: you will need to fix the components that depend on this component"
      ],
      [
        "s",
        "silent",
        "skip confirmation"
      ]
    ],
    "description": "remove component(s) from the local workspace",
    "extendedDescription": "to mark components as deleted on the remote scope, use \"bit delete\".",
    "group": "collaborate",
    "private": false,
    "remoteOp": true,
    "skipWorkspace": true,
    "arguments": [
      {
        "name": "component-pattern",
        "description": "component name, component id, or component pattern. use component pattern to select multiple components.\nwrap the pattern with quotes. use comma to separate patterns and \"!\" to exclude. e.g. \"ui/**, !ui/button\".\nuse '$' prefix to filter by states/attributes, e.g. '$deprecated', '$modified' or '$env:teambit.react/react'.\nuse `bit pattern --help` to understand patterns better and `bit pattern <pattern>` to validate the pattern."
      }
    ],
    "examples": [
      {
        "cmd": "remove \"$deprecated\"",
        "description": "remove all components that are deprecated"
      }
    ]
  },
  {
    "name": "delete <component-pattern>",
    "alias": "",
    "options": [
      [
        "",
        "lane",
        "when on a lane, delete the component from this lane only. avoid merging it to main or other lanes"
      ],
      [
        "",
        "update-main",
        "delete component/s on the main lane after merging this lane into main"
      ],
      [
        "",
        "range <string>",
        "EXPERIMENTAL. enter a Semver range to delete specific tags (cannot be used for snaps). see https://www.npmjs.com/package/semver#ranges for the range syntax"
      ],
      [
        "s",
        "silent",
        "skip confirmation"
      ],
      [
        "",
        "hard",
        "NOT-RECOMMENDED. delete a component completely from a remote scope. careful! this is a permanent change that could corrupt dependents."
      ],
      [
        "f",
        "force",
        "relevant for --hard. allow the deletion even if used as a dependency. WARNING: components that depend on this component will corrupt"
      ]
    ],
    "description": "mark components as deleted on the remote",
    "extendedDescription": "to remove components from your local workspace only, use \"bit remove\" command.\nthis command marks the components as deleted, and after snap/tag and export they will be marked as deleted from the remote scope as well.\n",
    "group": "collaborate",
    "private": false,
    "remoteOp": true,
    "skipWorkspace": true,
    "arguments": [
      {
        "name": "component-pattern",
        "description": "component name, component id, or component pattern. use component pattern to select multiple components.\nwrap the pattern with quotes. use comma to separate patterns and \"!\" to exclude. e.g. \"ui/**, !ui/button\".\nuse '$' prefix to filter by states/attributes, e.g. '$deprecated', '$modified' or '$env:teambit.react/react'.\nuse `bit pattern --help` to understand patterns better and `bit pattern <pattern>` to validate the pattern."
      }
    ]
  },
  {
    "name": "recover <component-name>",
    "alias": "",
    "options": [
      [
        "x",
        "skip-dependency-installation",
        "do not install packages in case of importing components"
      ],
      [
        "",
        "skip-write-config-files",
        "do not write config files (such as eslint, tsconfig, prettier, etc...)"
      ]
    ],
    "description": "recover component(s) soft-deleted from the workspace, or a remote scope",
    "extendedDescription": "",
    "group": "collaborate",
    "private": false
  },
  {
    "name": "resume-export <export-id> <remotes...>",
    "alias": "",
    "options": [],
    "description": "EXPERIMENTAL. resume failed export",
    "extendedDescription": "resume failed export to persist the pending objects on the given remotes.\nthe export-id is the id the client received in the error message during the failure.\nalternatively, exporting to any one of the failed scopes, throws server-is-busy error with the export-id",
    "group": "collaborate",
    "private": true,
    "remoteOp": true
  },
  {
    "name": "export [component-patterns...]",
    "alias": "e",
    "options": [
      [
        "e",
        "eject",
        "after export, remove the components from the workspace and install them as packages"
      ],
      [
        "a",
        "all",
        "export all components, including non-staged (useful when components in the remote scope are corrupted or missing)"
      ],
      [
        "",
        "all-versions",
        "export not only staged versions but all of them (useful when versions in the remote scope are corrupted or missing)"
      ],
      [
        "",
        "origin-directly",
        "avoid export to the central hub, instead, export directly to the original scopes. not recommended!"
      ],
      [
        "",
        "resume <string>",
        "in case the previous export failed and suggested to resume with an export-id, enter the id"
      ],
      [
        "",
        "head-only",
        "in case previous export failed and locally it shows exported and only one snap/tag was created, try using this flag"
      ],
      [
        "",
        "ignore-missing-artifacts",
        "don't throw an error when artifact files are missing. not recommended, unless you're sure the artifacts are in the remote"
      ],
      [
        "",
        "fork-lane-new-scope",
        "allow exporting a forked lane into a different scope than the original scope"
      ],
      [
        "",
        "open-browser",
        "open a browser once the export is completed in the cloud job url"
      ],
      [
        "",
        "verbose",
        "per exported component, show the versions being exported"
      ],
      [
        "j",
        "json",
        "show output in json format"
      ]
    ],
    "description": "export components from the workspace to remote scopes",
    "extendedDescription": "bit export => export all staged snaps/tags of components to their remote scope. if checked out to a lane, export the lane as well\n  `bit export [pattern...]` => export components included by the pattern to their remote scope (we recommend not using a pattern in\n    most scenarios so that all changes are exported simultaneously)\n  you can use a pattern for multiple ids, such as bit export \"utils/*\". (wrap the pattern with quotes to avoid collision with shell commands)",
    "group": "collaborate",
    "private": false,
    "remoteOp": true,
    "arguments": [
      {
        "name": "component-patterns...",
        "description": "(not recommended) component name, component id, or component pattern. use component pattern to select multiple components.\nwrap the pattern with quotes. use comma to separate patterns and \"!\" to exclude. e.g. \"ui/**, !ui/button\".\nuse '$' prefix to filter by states/attributes, e.g. '$deprecated', '$modified' or '$env:teambit.react/react'.\nuse `bit pattern --help` to understand patterns better and `bit pattern <pattern>` to validate the pattern."
      }
    ]
  },
  {
    "name": "pack <componentId> [scopePath]",
    "alias": "",
    "options": [
      [
        "d",
        "out-dir <out-dir>",
        "directory to put the result tar file"
      ],
      [
        "o",
        "override",
        "override existing pack file"
      ],
      [
        "k",
        "keep",
        "should keep isolated environment [default = false]"
      ],
      [
        "p",
        "prefix",
        "keep custom (binding) prefix"
      ],
      [
        "j",
        "json",
        "return the output as JSON"
      ]
    ],
    "description": "create tar for npm publish",
    "extendedDescription": "",
    "group": "collaborate",
    "private": true
  },
  {
    "name": "publish <component-pattern>",
    "alias": "",
    "options": [
      [
        "d",
        "dry-run",
        "npm publish --dry-run"
      ],
      [
        "",
        "allow-staged",
        "allow publishing components that were not exported yet (not recommended)"
      ],
      [
        "j",
        "json",
        "return the output as JSON"
      ]
    ],
    "description": "publish components to npm (npm publish)",
    "extendedDescription": "",
    "group": "collaborate",
    "private": true,
    "arguments": [
      {
        "name": "component-pattern",
        "description": "component name, component id, or component pattern. use component pattern to select multiple components.\nwrap the pattern with quotes. use comma to separate patterns and \"!\" to exclude. e.g. \"ui/**, !ui/button\".\nuse '$' prefix to filter by states/attributes, e.g. '$deprecated', '$modified' or '$env:teambit.react/react'.\nuse `bit pattern --help` to understand patterns better and `bit pattern <pattern>` to validate the pattern."
      }
    ]
  },
  {
    "name": "refactor <sub-command>",
    "alias": "",
    "options": [],
    "description": "source code refactoring / codemod",
    "extendedDescription": "",
    "group": "development",
    "private": false,
    "commands": [
      {
        "name": "dependency-name <old-id> <new-id>",
        "alias": "",
        "options": [],
        "description": "replace the dependency's old package-name with a new one in the code",
        "extendedDescription": "the `<old-id>` and `<new-id>` arguments can be either a component-id or a package-name.",
        "group": "development",
        "private": false
      }
    ]
  },
  {
    "name": "fork <source-component-id> [target-component-name]",
    "alias": "",
    "options": [
      [
        "s",
        "scope <string>",
        "default scope for the new component"
      ],
      [
        "p",
        "path <string>",
        "relative path in the workspace for the new component. by default the path is `<scope>/<namespace>/<name>`"
      ],
      [
        "r",
        "refactor",
        "update the import/require statements in all dependent components (in the same workspace)"
      ],
      [
        "x",
        "skip-dependency-installation",
        "do not install packages of the imported components"
      ],
      [
        "e",
        "env <string>",
        "set the environment for the new component"
      ],
      [
        "",
        "skip-config",
        "do not copy the config (aspects-config, env, etc) to the new component. helpful when it fails during aspect loading"
      ],
      [
        "",
        "preserve",
        "avoid refactoring file and variable/class names according to the new component name"
      ],
      [
        "",
        "no-link",
        "avoid saving a reference to the original component"
      ],
      [
        "",
        "ast",
        "use ast to transform files instead of regex"
      ]
    ],
    "description": "create a new component forked from an existing one (copies source files and configs)",
    "extendedDescription": "",
    "group": "collaborate",
    "private": false,
    "remoteOp": true,
    "skipWorkspace": true,
    "arguments": [
      {
        "name": "source-component-id",
        "description": "the component id of the source component"
      },
      {
        "name": "target-component-name",
        "description": "the name for the new component (component name without scope, e.g. name/spaces/my-button). to set a different scope, use the '--scope' flag"
      }
    ]
  },
  {
    "name": "checkout <to> [component-pattern]",
    "alias": "U",
    "options": [
      [
        "i",
        "interactive-merge",
        "when a component is modified and the merge process found conflicts, display options to resolve them"
      ],
      [
        "r",
        "auto-merge-resolve <merge-strategy>",
        "in case of merge conflict, resolve according to the provided strategy: [ours, theirs, manual]"
      ],
      [
        "",
        "manual",
        "same as \"--auto-merge-resolve manual\". in case of merge conflict, write the files with the conflict markers"
      ],
      [
        "a",
        "all",
        "all components"
      ],
      [
        "e",
        "workspace-only",
        "only relevant for 'bit checkout head' when on a lane. don't import components from the remote lane that are not already in the workspace"
      ],
      [
        "v",
        "verbose",
        "showing verbose output for inspection"
      ],
      [
        "x",
        "skip-dependency-installation",
        "do not auto-install dependencies of the imported components"
      ],
      [
        "",
        "force-ours",
        "do not merge, preserve local files as is"
      ],
      [
        "",
        "force-theirs",
        "do not merge, just overwrite with incoming files"
      ]
    ],
    "description": "switch between component versions or remove local changes",
    "extendedDescription": "\n`bit checkout <version> [component-pattern]` => checkout the specified ids (or all components when --all is used) to the specified version\n`bit checkout head [component-pattern]` => checkout to the last snap/tag (use --latest if you only want semver tags), omit [component-pattern] to checkout head for all\n`bit checkout head~x [component-pattern]` => go backward x generations from the head and checkout to that version\n`bit checkout latest [component-pattern]` => checkout to the latest satisfying semver tag, omit [component-pattern] to checkout latest for all\n`bit checkout reset [component-pattern]` => remove local modifications from the specified ids (or all components when --all is used). also, if a component dir is deleted from the filesystem, it'll be restored\nwhen on a lane, \"checkout head\" only checks out components on this lane. to update main components, run \"bit lane merge main\"",
    "group": "development",
    "private": false,
    "arguments": [
      {
        "name": "to",
        "description": "permitted values: [head, latest, reset, {specific-version}, {head~x}]. 'head' - last snap/tag. 'latest' - semver latest tag. 'reset' - removes local changes"
      },
      {
        "name": "component-pattern",
        "description": "component name, component id, or component pattern. use component pattern to select multiple components.\nwrap the pattern with quotes. use comma to separate patterns and \"!\" to exclude. e.g. \"ui/**, !ui/button\".\nuse '$' prefix to filter by states/attributes, e.g. '$deprecated', '$modified' or '$env:teambit.react/react'.\nuse `bit pattern --help` to understand patterns better and `bit pattern <pattern>` to validate the pattern."
      }
    ]
  },
  {
    "name": "revert <component-pattern> <to>",
    "alias": "",
    "options": [
      [
        "v",
        "verbose",
        "showing verbose output for inspection"
      ],
      [
        "x",
        "skip-dependency-installation",
        "do not install packages of the imported components"
      ]
    ],
    "description": "replace the current component files by the specified version, leave the version intact",
    "extendedDescription": "",
    "group": "development",
    "private": false,
    "arguments": [
      {
        "name": "component-pattern",
        "description": "component name, component id, or component pattern. use component pattern to select multiple components.\nwrap the pattern with quotes. use comma to separate patterns and \"!\" to exclude. e.g. \"ui/**, !ui/button\".\nuse '$' prefix to filter by states/attributes, e.g. '$deprecated', '$modified' or '$env:teambit.react/react'.\nuse `bit pattern --help` to understand patterns better and `bit pattern <pattern>` to validate the pattern."
      },
      {
        "name": "to",
        "description": "permitted values: [main, specific-version]. 'main' - head version on main."
      }
    ]
  },
  {
    "name": "test [component-pattern]",
    "alias": "at",
    "options": [
      [
        "w",
        "watch",
        "start the tester in watch mode."
      ],
      [
        "d",
        "debug",
        "start the tester in debug mode."
      ],
      [
        "a",
        "all",
        "DEPRECATED. (use --unmodified)"
      ],
      [
        "u",
        "unmodified",
        "test all components, not only new and modified"
      ],
      [
        "",
        "junit <filepath>",
        "write tests results as JUnit XML format into the specified file path"
      ],
      [
        "",
        "coverage",
        "show code coverage data"
      ],
      [
        "e",
        "env <id>",
        "test only components assigned the given env"
      ],
      [
        "",
        "update-snapshot",
        "if supported by the tester, re-record every snapshot that fails during the test run"
      ],
      [
        "s",
        "scope <scope-name>",
        "DEPRECATED. (use the pattern instead, e.g. \"scopeName/**\"). name of the scope to test"
      ]
    ],
    "description": "test components in the workspace. by default only runs tests for new and modified components",
    "extendedDescription": "",
    "group": "development",
    "private": false,
    "arguments": [
      {
        "name": "component-pattern",
        "description": "component name, component id, or component pattern. use component pattern to select multiple components.\nwrap the pattern with quotes. use comma to separate patterns and \"!\" to exclude. e.g. \"ui/**, !ui/button\".\nuse '$' prefix to filter by states/attributes, e.g. '$deprecated', '$modified' or '$env:teambit.react/react'.\nuse `bit pattern --help` to understand patterns better and `bit pattern <pattern>` to validate the pattern."
      }
    ]
  },
  {
    "name": "diff [component-pattern] [version] [to-version]",
    "alias": "",
    "options": [
      [
        "v",
        "verbose",
        "show a more verbose output where possible"
      ],
      [
        "t",
        "table",
        "show tables instead of plain text for dependencies diff"
      ]
    ],
    "description": "show the diff between the components' current source files and config, and their latest snapshot or tag",
    "extendedDescription": "",
    "group": "development",
    "private": false,
    "arguments": [
      {
        "name": "component-pattern",
        "description": "component name, component id, or component pattern. use component pattern to select multiple components.\nwrap the pattern with quotes. use comma to separate patterns and \"!\" to exclude. e.g. \"ui/**, !ui/button\".\nuse '$' prefix to filter by states/attributes, e.g. '$deprecated', '$modified' or '$env:teambit.react/react'.\nuse `bit pattern --help` to understand patterns better and `bit pattern <pattern>` to validate the pattern."
      },
      {
        "name": "version",
        "description": "specific version to compare against"
      },
      {
        "name": "to-version",
        "description": "specific version to compare to"
      }
    ],
    "examples": [
      {
        "cmd": "diff",
        "description": "show diff for all modified components"
      },
      {
        "cmd": "diff foo",
        "description": "show diff for a component \"foo\""
      },
      {
        "cmd": "diff foo 0.0.1",
        "description": "show diff for a component \"foo\" from the current state to version 0.0.1"
      },
      {
        "cmd": "diff foo 0.0.1 0.0.2",
        "description": "show diff for a component \"foo\" from version 0.0.1 to version 0.0.2"
      },
      {
        "cmd": "diff '$codeModified' ",
        "description": "show diff only for components with modified files. ignore config changes"
      }
    ]
  },
  {
    "name": "deps <sub-command>",
    "alias": "dependencies",
    "options": [],
    "description": "manage dependencies",
    "extendedDescription": "",
    "group": "info",
    "private": false,
    "commands": [
      {
        "name": "get <component-name>",
        "alias": "",
        "options": [
          [
            "",
            "scope",
            "get the data from the scope instead of the workspace"
          ],
          [
            "t",
            "tree",
            "render dependencies as a tree, similar to \"npm ls\""
          ]
        ],
        "description": "show direct and indirect dependencies of the given component",
        "extendedDescription": "",
        "group": "info",
        "private": false,
        "arguments": [
          {
            "name": "component-name",
            "description": "component name or component id"
          }
        ]
      },
      {
        "name": "remove <component-pattern> <package...>",
        "alias": "",
        "options": [
          [
            "d",
            "dev",
            "remove from devDependencies"
          ],
          [
            "p",
            "peer",
            "remove from peerDependencies"
          ]
        ],
        "description": "remove a dependency to component(s)",
        "extendedDescription": "",
        "group": "info",
        "private": false,
        "arguments": [
          {
            "name": "component-pattern",
            "description": "component name, component id, or component pattern. use component pattern to select multiple components.\nwrap the pattern with quotes. use comma to separate patterns and \"!\" to exclude. e.g. \"ui/**, !ui/button\".\nuse '$' prefix to filter by states/attributes, e.g. '$deprecated', '$modified' or '$env:teambit.react/react'.\nuse `bit pattern --help` to understand patterns better and `bit pattern <pattern>` to validate the pattern."
          },
          {
            "name": "package...",
            "description": "package name with or without a version, e.g. \"lodash@1.0.0\" or just \"lodash\" which will remove all lodash instances of any version"
          }
        ]
      },
      {
        "name": "unset <component-pattern> <package...>",
        "alias": "",
        "options": [
          [
            "d",
            "dev",
            "unset from devDependencies"
          ],
          [
            "p",
            "peer",
            "unset from peerDependencies"
          ]
        ],
        "description": "unset a dependency to component(s) that was previously set by \"bit deps set\"",
        "extendedDescription": "",
        "group": "info",
        "private": false,
        "arguments": [
          {
            "name": "component-pattern",
            "description": "component name, component id, or component pattern. use component pattern to select multiple components.\nwrap the pattern with quotes. use comma to separate patterns and \"!\" to exclude. e.g. \"ui/**, !ui/button\".\nuse '$' prefix to filter by states/attributes, e.g. '$deprecated', '$modified' or '$env:teambit.react/react'.\nuse `bit pattern --help` to understand patterns better and `bit pattern <pattern>` to validate the pattern."
          },
          {
            "name": "package...",
            "description": "package name with or without a version, e.g. \"lodash@1.0.0\" or just \"lodash\" which will remove all lodash instances of any version"
          }
        ]
      },
      {
        "name": "debug <component-name>",
        "alias": "",
        "options": [],
        "description": "show the immediate dependencies and how their versions were determined",
        "extendedDescription": "",
        "group": "info",
        "private": false,
        "arguments": [
          {
            "name": "component-name",
            "description": "component name or component id"
          }
        ]
      },
      {
        "name": "set <component-pattern> <package...>",
        "alias": "",
        "options": [
          [
            "d",
            "dev",
            "add to the devDependencies"
          ],
          [
            "o",
            "optional",
            "add to the optionalDependencies"
          ],
          [
            "p",
            "peer",
            "add to the peerDependencies"
          ]
        ],
        "description": "set a dependency to component(s)",
        "extendedDescription": "",
        "group": "info",
        "private": false,
        "arguments": [
          {
            "name": "component-pattern",
            "description": "component name, component id, or component pattern. use component pattern to select multiple components.\nwrap the pattern with quotes. use comma to separate patterns and \"!\" to exclude. e.g. \"ui/**, !ui/button\".\nuse '$' prefix to filter by states/attributes, e.g. '$deprecated', '$modified' or '$env:teambit.react/react'.\nuse `bit pattern --help` to understand patterns better and `bit pattern <pattern>` to validate the pattern."
          },
          {
            "name": "package...",
            "description": "package name with or without a version, e.g. \"lodash@1.0.0\" or just \"lodash\" which will be resolved to the latest"
          }
        ]
      },
      {
        "name": "reset <component-pattern>",
        "alias": "",
        "options": [],
        "description": "reset dependencies to the default values (revert any previously \"bit deps set\")",
        "extendedDescription": "",
        "group": "info",
        "private": false,
        "arguments": [
          {
            "name": "component-pattern",
            "description": "component name, component id, or component pattern. use component pattern to select multiple components.\nwrap the pattern with quotes. use comma to separate patterns and \"!\" to exclude. e.g. \"ui/**, !ui/button\".\nuse '$' prefix to filter by states/attributes, e.g. '$deprecated', '$modified' or '$env:teambit.react/react'.\nuse `bit pattern --help` to understand patterns better and `bit pattern <pattern>` to validate the pattern."
          }
        ]
      },
      {
        "name": "eject <component-pattern>",
        "alias": "",
        "options": [],
        "description": "write dependencies that were previously set via \"bit deps set\" into .bitmap",
        "extendedDescription": "",
        "group": "info",
        "private": false,
        "arguments": [
          {
            "name": "component-pattern",
            "description": "component name, component id, or component pattern. use component pattern to select multiple components.\nwrap the pattern with quotes. use comma to separate patterns and \"!\" to exclude. e.g. \"ui/**, !ui/button\".\nuse '$' prefix to filter by states/attributes, e.g. '$deprecated', '$modified' or '$env:teambit.react/react'.\nuse `bit pattern --help` to understand patterns better and `bit pattern <pattern>` to validate the pattern."
          }
        ]
      },
      {
        "name": "blame <component-name> <dependency-name>",
        "alias": "",
        "options": [],
        "description": "find out which snap/tag changed a dependency version",
        "extendedDescription": "",
        "group": "info",
        "private": false,
        "arguments": [
          {
            "name": "dependency-name",
            "description": "package-name. for components, you can use either component-id or package-name"
          }
        ]
      },
      {
        "name": "usage <dependency-name>",
        "alias": "",
        "options": [
          [
            "",
            "depth <number>",
            "max display depth of the dependency graph"
          ]
        ],
        "description": "find components that use the specified dependency",
        "extendedDescription": "",
        "group": "info",
        "private": false,
        "arguments": [
          {
            "name": "dependency-name",
            "description": "package-name. for components, you can use either component-id or package-name. if version is specified, it will search for the exact version"
          }
        ]
      }
    ]
  },
  {
    "name": "why <dependency-name>",
    "alias": "",
    "options": [
      [
        "",
        "depth <number>",
        "max display depth of the dependency graph"
      ]
    ],
    "description": "find components that use the specified dependency",
    "extendedDescription": "",
    "group": "info",
    "private": false,
    "arguments": [
      {
        "name": "dependency-name",
        "description": "package-name. for components, you can use either component-id or package-name. if version is specified, it will search for the exact version"
      }
    ]
  },
  {
    "name": "set-peer <component-id> <range>",
    "alias": "",
    "options": [],
    "description": "set a component as always peer",
    "extendedDescription": "",
    "group": "info",
    "private": false,
    "arguments": [
      {
        "name": "component-id",
        "description": "the component to set as always peer"
      },
      {
        "name": "range",
        "description": "the default range to use for the componnent, when added to peerDependencies"
      }
    ]
  },
  {
    "name": "unset-peer <component-id>",
    "alias": "",
    "options": [],
    "description": "unset a component as always peer",
    "extendedDescription": "",
    "group": "info",
    "private": false,
    "arguments": [
      {
        "name": "component-id",
        "description": "the component to unset as always peer"
      }
    ]
  },
  {
    "name": "dependents <component-name>",
    "alias": "",
    "options": [
      [
        "j",
        "json",
        "return the dependents in JSON format"
      ]
    ],
    "description": "show dependents of the given component",
    "extendedDescription": "",
    "group": "info",
    "private": false,
    "arguments": [
      {
        "name": "component-name",
        "description": "component name or component id"
      }
    ]
  },
  {
    "name": "insights [names...]",
    "alias": "",
    "options": [
      [
        "l",
        "list",
        "list all insights"
      ],
      [
        "j",
        "json",
        "return the insights in json format"
      ],
      [
        "",
        "include-deps",
        "include component dependencies that are not in this workspace"
      ]
    ],
    "description": "Insights on component graph",
    "extendedDescription": "",
    "group": "development",
    "private": true
  },
  {
    "name": "tag [component-patterns...]",
    "alias": "t",
    "options": [
      [
        "m",
        "message <message>",
        "a log message describing latest changes"
      ],
      [
        "u",
        "unmodified",
        "include unmodified components (by default, only new and modified components are tagged)"
      ],
      [
        "",
        "editor [editor]",
        "open an editor to write a tag message for each component. optionally, specify the editor-name (defaults to vim)."
      ],
      [
        "v",
        "ver <version>",
        "tag with the given version"
      ],
      [
        "l",
        "increment <level>",
        "options are: [major, premajor, minor, preminor, patch, prepatch, prerelease], default to patch"
      ],
      [
        "",
        "prerelease-id <id>",
        "prerelease identifier (e.g. \"dev\" to get \"1.0.0-dev.1\")"
      ],
      [
        "p",
        "patch",
        "syntactic sugar for \"--increment patch\""
      ],
      [
        "",
        "minor",
        "syntactic sugar for \"--increment minor\""
      ],
      [
        "",
        "major",
        "syntactic sugar for \"--increment major\""
      ],
      [
        "",
        "pre-release [identifier]",
        "syntactic sugar for \"--increment prerelease\" and `--prerelease-id <identifier>`"
      ],
      [
        "",
        "snapped",
        "tag only components whose head is a snap (not a tag)"
      ],
      [
        "",
        "unmerged",
        "complete a merge process by tagging the unmerged components"
      ],
      [
        "",
        "skip-tests",
        "skip running component tests during tag process"
      ],
      [
        "",
        "skip-tasks <string>",
        "skip the given tasks. for multiple tasks, separate by a comma and wrap with quotes.\nspecify the task-name (e.g. \"TypescriptCompiler\") or the task-aspect-id (e.g. teambit.compilation/compiler)"
      ],
      [
        "",
        "skip-auto-tag",
        "skip auto tagging dependents"
      ],
      [
        "",
        "soft",
        "do not persist. only keep note of the changes to be made"
      ],
      [
        "",
        "persist [skip-build]",
        "persist the changes generated by --soft tag. by default, run the build pipeline, unless \"skip-build\" is provided"
      ],
      [
        "",
        "disable-tag-pipeline",
        "skip the tag pipeline to avoid publishing the components"
      ],
      [
        "",
        "ignore-build-errors",
        "proceed to tag pipeline even when build pipeline fails"
      ],
      [
        "",
        "rebuild-deps-graph",
        "do not reuse the saved dependencies graph, instead build it from scratch"
      ],
      [
        "",
        "increment-by <number>",
        "(default to 1) increment semver flag (patch/minor/major) by. e.g. incrementing patch by 2: 0.0.1 -> 0.0.3."
      ],
      [
        "i",
        "ignore-issues <issues>",
        "ignore component issues (shown in \"bit status\" as \"issues found\"), issues to ignore:\n[MissingPackagesDependenciesOnFs, MissingManuallyConfiguredPackages, UntrackedDependencies, ResolveErrors, RelativeComponents, RelativeComponentsAuthored, ParseErrors, MissingDists, LegacyInsideHarmony, MissingDependenciesOnFs, ImportNonMainFiles, MultipleEnvs, MissingLinksFromNodeModulesToSrc, CircularDependencies, DuplicateComponentAndPackage, MergeConfigHasConflict, NonLoadedEnv, ExternalEnvWithoutVersion, RemovedDependencies, RemovedEnv, DeprecatedDependencies, SelfReference, ImportFromDirectory]\nto ignore multiple issues, separate them by a comma and wrap with quotes. to ignore all issues, specify \"*\"."
      ],
      [
        "I",
        "ignore-newest-version",
        "allow tagging even when the component has newer versions e.g. for hotfixes (default = false)"
      ],
      [
        "",
        "fail-fast",
        "stop pipeline execution on the first failed task (by default a task is skipped only when its dependency failed)"
      ],
      [
        "b",
        "build",
        "locally run the build pipeline (i.e. not via rippleCI) and complete the tag"
      ]
    ],
    "description": "create an immutable and exportable component snapshot, tagged with a release version.",
    "extendedDescription": "if no patterns are provided, it will tag all new and modified components.\nif patterns are entered, you can specify a version per pattern using \"@\" sign, e.g. bit tag foo@1.0.0 bar@minor baz@major",
    "group": "development",
    "private": false,
    "remoteOp": true,
    "arguments": [
      {
        "name": "component-patterns...",
        "description": "component name, component id, or component pattern. use component pattern to select multiple components.\nwrap the pattern with quotes. use comma to separate patterns and \"!\" to exclude. e.g. \"ui/**, !ui/button\".\nuse '$' prefix to filter by states/attributes, e.g. '$deprecated', '$modified' or '$env:teambit.react/react'.\nuse `bit pattern --help` to understand patterns better and `bit pattern <pattern>` to validate the pattern.. By default, all new and modified are tagged."
      }
    ],
    "examples": [
      {
        "cmd": "tag --ver 1.0.0",
        "description": "tag all components to version 1.0.0"
      }
    ]
  },
  {
    "name": "snap [component-pattern]",
    "alias": "",
    "options": [
      [
        "m",
        "message <message>",
        "snap message describing the latest changes - will appear in component history log"
      ],
      [
        "u",
        "unmodified",
        "include unmodified components (by default, only new and modified components are snapped)"
      ],
      [
        "",
        "unmerged",
        "complete a merge process by snapping the unmerged components"
      ],
      [
        "b",
        "build",
        "locally run the build pipeline (i.e. not via rippleCI) and complete the snap"
      ],
      [
        "",
        "editor [editor]",
        "open an editor to write a snap message per component. optionally specify the editor-name (defaults to vim)."
      ],
      [
        "",
        "skip-tests",
        "skip running component tests during snap process"
      ],
      [
        "",
        "skip-tasks <string>",
        "skip the given tasks. for multiple tasks, separate by a comma and wrap with quotes.\nspecify the task-name (e.g. \"TypescriptCompiler\") or the task-aspect-id (e.g. teambit.compilation/compiler)"
      ],
      [
        "",
        "skip-auto-snap",
        "skip auto snapping dependents"
      ],
      [
        "",
        "disable-snap-pipeline",
        "skip the snap pipeline. this will for instance skip packing and publishing component version for install, and app deployment"
      ],
      [
        "",
        "ignore-build-errors",
        "proceed to snap pipeline even when build pipeline fails"
      ],
      [
        "",
        "rebuild-deps-graph",
        "do not reuse the saved dependencies graph, instead build it from scratch"
      ],
      [
        "i",
        "ignore-issues <issues>",
        "ignore component issues (shown in \"bit status\" as \"issues found\"), issues to ignore:\n[MissingPackagesDependenciesOnFs, MissingManuallyConfiguredPackages, UntrackedDependencies, ResolveErrors, RelativeComponents, RelativeComponentsAuthored, ParseErrors, MissingDists, LegacyInsideHarmony, MissingDependenciesOnFs, ImportNonMainFiles, MultipleEnvs, MissingLinksFromNodeModulesToSrc, CircularDependencies, DuplicateComponentAndPackage, MergeConfigHasConflict, NonLoadedEnv, ExternalEnvWithoutVersion, RemovedDependencies, RemovedEnv, DeprecatedDependencies, SelfReference, ImportFromDirectory]\nto ignore multiple issues, separate them by a comma and wrap with quotes. to ignore all issues, specify \"*\"."
      ],
      [
        "",
        "fail-fast",
        "stop pipeline execution on the first failed task (by default a task is skipped only when its dependency failed)"
      ]
    ],
    "description": "create an immutable and exportable component snapshot (non-release version)",
    "extendedDescription": "",
    "group": "development",
    "private": false,
    "arguments": [
      {
        "name": "component-pattern",
        "description": "component name, component id, or component pattern. use component pattern to select multiple components.\nwrap the pattern with quotes. use comma to separate patterns and \"!\" to exclude. e.g. \"ui/**, !ui/button\".\nuse '$' prefix to filter by states/attributes, e.g. '$deprecated', '$modified' or '$env:teambit.react/react'.\nuse `bit pattern --help` to understand patterns better and `bit pattern <pattern>` to validate the pattern.. By default, only new and modified components are snapped (add --unmodified to snap all components in the workspace)."
      }
    ]
  },
  {
    "name": "reset [component-pattern]",
    "alias": "",
    "options": [
      [
        "a",
        "all",
        "revert all unexported tags/snaps for all components"
      ],
      [
        "",
        "head",
        "revert the head tag/snap only (by default, all local tags/snaps are reverted)"
      ],
      [
        "",
        "soft",
        "revert only soft-tags (components tagged with --soft flag)"
      ],
      [
        "f",
        "force",
        "revert the tag even if it's used as a dependency. WARNING: components that depend on this tag will be corrupted"
      ],
      [
        "",
        "never-exported",
        "reset only components that were never exported"
      ]
    ],
    "description": "revert tagged or snapped versions for component(s)",
    "extendedDescription": "https://bit.dev/components/tags#undoing-a-tag",
    "group": "development",
    "private": false,
    "arguments": [
      {
        "name": "component-pattern",
        "description": "component name, component id, or component pattern. use component pattern to select multiple components.\nwrap the pattern with quotes. use comma to separate patterns and \"!\" to exclude. e.g. \"ui/**, !ui/button\".\nuse '$' prefix to filter by states/attributes, e.g. '$deprecated', '$modified' or '$env:teambit.react/react'.\nuse `bit pattern --help` to understand patterns better and `bit pattern <pattern>` to validate the pattern."
      },
      {
        "name": "component-version",
        "description": "the version to untag (semver for tags. hash for snaps)"
      }
    ]
  },
  {
    "name": "_tag <data>",
    "alias": "",
    "options": [
      [
        "",
        "push",
        "export the updated objects to the original scopes once done"
      ],
      [
        "",
        "rebuild-artifacts",
        "run the full build pipeline. do not use the saved artifacts from the last snap"
      ],
      [
        "",
        "ignore-last-pkg-json",
        "ignore the package.json created by the last snap"
      ],
      [
        "m",
        "message <message>",
        "a log message describing latest changes"
      ],
      [
        "v",
        "ver <version>",
        "tag with the given version"
      ],
      [
        "l",
        "increment <level>",
        "options are: [major, premajor, minor, preminor, patch, prepatch, prerelease], default to patch"
      ],
      [
        "",
        "prerelease-id <id>",
        "prerelease identifier (e.g. \"dev\" to get \"1.0.0-dev.1\")"
      ],
      [
        "p",
        "patch",
        "syntactic sugar for \"--increment patch\""
      ],
      [
        "",
        "minor",
        "syntactic sugar for \"--increment minor\""
      ],
      [
        "",
        "major",
        "syntactic sugar for \"--increment major\""
      ],
      [
        "",
        "pre-release [identifier]",
        "syntactic sugar for \"--increment prerelease\" and `--prerelease-id <identifier>`"
      ],
      [
        "",
        "skip-tests",
        "skip running component tests during tag process"
      ],
      [
        "",
        "skip-tasks <string>",
        "skip the given tasks. for multiple tasks, separate by a comma and wrap with quotes.\nspecify the task-name (e.g. \"TypescriptCompiler\") or the task-aspect-id (e.g. teambit.compilation/compiler)"
      ],
      [
        "",
        "skip-auto-tag",
        "skip auto tagging dependents"
      ],
      [
        "",
        "disable-tag-pipeline",
        "skip the tag pipeline to avoid publishing the components"
      ],
      [
        "",
        "ignore-build-errors",
        "proceed to tag pipeline even when build pipeline fails"
      ],
      [
        "",
        "rebuild-deps-graph",
        "do not reuse the saved dependencies graph, instead build it from scratch"
      ],
      [
        "",
        "increment-by <number>",
        "(default to 1) increment semver flag (patch/minor/major) by. e.g. incrementing patch by 2: 0.0.1 -> 0.0.3."
      ],
      [
        "i",
        "ignore-issues <issues>",
        "ignore component issues (shown in \"bit status\" as \"issues found\"), issues to ignore:\n[MissingPackagesDependenciesOnFs, MissingManuallyConfiguredPackages, UntrackedDependencies, ResolveErrors, RelativeComponents, RelativeComponentsAuthored, ParseErrors, MissingDists, LegacyInsideHarmony, MissingDependenciesOnFs, ImportNonMainFiles, MultipleEnvs, MissingLinksFromNodeModulesToSrc, CircularDependencies, DuplicateComponentAndPackage, MergeConfigHasConflict, NonLoadedEnv, ExternalEnvWithoutVersion, RemovedDependencies, RemovedEnv, DeprecatedDependencies, SelfReference, ImportFromDirectory]\nto ignore multiple issues, separate them by a comma and wrap with quotes. to ignore all issues, specify \"*\"."
      ],
      [
        "I",
        "ignore-newest-version",
        "allow tagging even when the component has newer versions e.g. for hotfixes (default = false)"
      ],
      [
        "",
        "fail-fast",
        "stop pipeline execution on the first failed task (by default a task is skipped only when its dependency failed)"
      ],
      [
        "b",
        "build",
        "locally run the build pipeline (i.e. not via rippleCI) and complete the tag"
      ]
    ],
    "description": "tag components from a bare-scope by using build artifacts from previous snap and running the deploy-pipeline only",
    "extendedDescription": "this command should be running from a new bare scope, it first imports the components it needs and then processes the tag.\nthe input data is a stringified JSON of an array of the following object.\n{\n  componentId: string;    // ids always have scope, so it's safe to parse them from string\n  dependencies?: string[]; // e.g. [teambit/compiler@1.0.0, teambit/tester^@1.0.0, teambit/linter~@0.0.1]\n  versionToTag?: string;  // specific version (e.g. '1.0.0') or semver (e.g. 'minor', 'patch')\n  prereleaseId?: string;  // applicable when versionToTag is a pre-release. (e.g. \"dev\", for 1.0.0-dev.1)\n  message?: string;       // tag-message.\n}\nan example of the final data: '[{\"componentId\":\"ci.remote2/comp-b\",\"dependencies\":[\"ci.remote/comp1@0.0.2\"]}]'\n",
    "group": "development",
    "private": true,
    "remoteOp": true
  },
  {
    "name": "_snap <data>",
    "alias": "",
    "options": [
      [
        "",
        "push",
        "export the updated objects to the original scopes once done"
      ],
      [
        "m",
        "message <message>",
        "log message describing the latest changes"
      ],
      [
        "",
        "lane <lane-id>",
        "fetch the components from the given lane"
      ],
      [
        "",
        "build",
        "run the build pipeline"
      ],
      [
        "",
        "skip-tests",
        "skip running component tests during snap process"
      ],
      [
        "",
        "disable-snap-pipeline",
        "skip the snap pipeline"
      ],
      [
        "",
        "ignore-build-errors",
        "run the snap pipeline although the build pipeline failed"
      ],
      [
        "",
        "rebuild-deps-graph",
        "do not reuse the saved dependencies graph, instead build it from scratch"
      ],
      [
        "i",
        "ignore-issues [issues]",
        "ignore component issues (shown in \"bit status\" as \"issues found\"), issues to ignore:\n[MissingPackagesDependenciesOnFs, MissingManuallyConfiguredPackages, UntrackedDependencies, ResolveErrors, RelativeComponents, RelativeComponentsAuthored, ParseErrors, MissingDists, LegacyInsideHarmony, MissingDependenciesOnFs, ImportNonMainFiles, MultipleEnvs, MissingLinksFromNodeModulesToSrc, CircularDependencies, DuplicateComponentAndPackage, MergeConfigHasConflict, NonLoadedEnv, ExternalEnvWithoutVersion, RemovedDependencies, RemovedEnv, DeprecatedDependencies, SelfReference, ImportFromDirectory]\nto ignore multiple issues, separate them by a comma and wrap with quotes. to ignore all issues, specify \"*\"."
      ],
      [
        "",
        "tag",
        "make a tag instead of a snap"
      ],
      [
        "",
        "stream",
        "relevant for --json only. stream loader as json strings"
      ],
      [
        "j",
        "json",
        "output as json format"
      ],
      [
        "",
        "update-dependents",
        "when snapped on a lane, mark it as update-dependents so it will be skipped from the workspace"
      ]
    ],
    "description": "snap components from a bare-scope",
    "extendedDescription": "this command should be running from a new bare scope, it first imports the components it needs and then processes the snap.\nthe input data is a stringified JSON of an array of the following object.\n{\n  componentId: string;     // ids always have scope, so it's safe to parse them from string\n  dependencies?: string[]; // dependencies include versions. for components use component-id. e.g. [teambit.compilation/compiler@1.0.0, lodash@4.17.21]\n  aspects?: Record<string,any> // e.g. { \"teambit.react/react\": {}, \"teambit.envs/envs\": { \"env\": \"teambit.react/react\" } }\n  message?: string;       // tag-message.\n  files?: Array<{path: string, content: string}>; // replace content of specified source-files. the content is base64 encoded.\n  isNew?: boolean;        // if it's new, it'll be generated from the given files. otherwise, it'll be fetched from the scope and updated.\n  mainFile?: string;      // relevant when isNew is true. default to \"index.ts\".\n  newDependencies?: Array<{  // new dependencies (components and packages) to add.\n    id: string;              // component-id or package-name. e.g. \"teambit.react/react\" or \"lodash\".\n    version?: string;        // version of the package. e.g. \"2.0.3\". for packages, it is mandatory.\n    isComponent?: boolean;   // default true. if false, it's a package dependency\n    type?: 'runtime' | 'dev' | 'peer'; // default \"runtime\".\n  }>;\n  removeDependencies?: string[]; // component-id (for components) or package-name (for packages) to remove from the dependencies.\n  forkFrom?: string;      // origin id to fork from. the componentId is the new id. (no need to populate isNew prop).\n  version?: string; // relevant when passing \"--tag\". optionally, specify the semver to tag. default to \"patch\".\n}\nan example of the final data: '[{\"componentId\":\"ci.remote2/comp-b\",\"message\": \"first snap\"}]'\n",
    "group": "ungrouped",
    "private": true
  },
  {
    "name": "snap-distance <component-id> [source-snap] [target-snap]",
    "alias": "",
    "options": [],
    "description": "show common-snap and distance between two given snaps or between local and remote snaps",
    "extendedDescription": "in case source and target snaps are not provided, the command will use the local and remote heads.\nby \"head\" we mean component-head if on main, or lane-head if on lane.\nif source and target snaps are provided, the command will use them to calculate the distance.",
    "group": "ungrouped",
    "private": true
  },
  {
    "name": "merge [component-pattern]",
    "alias": "",
    "options": [
      [
        "",
        "ours",
        "DEPRECATED. use --auto-merge-resolve. in case of a conflict, keep the local modification"
      ],
      [
        "",
        "theirs",
        "DEPRECATED. use --auto-merge-resolve. in case of a conflict, override the local modification with the specified version"
      ],
      [
        "",
        "manual",
        "same as \"--auto-merge-resolve manual\". in case of merge conflict, write the files with the conflict markers"
      ],
      [
        "r",
        "auto-merge-resolve <merge-strategy>",
        "in case of a conflict, resolve according to the strategy: [ours, theirs, manual]"
      ],
      [
        "",
        "abort",
        "in case of an unresolved merge, revert to pre-merge state"
      ],
      [
        "",
        "resolve",
        "mark an unresolved merge as resolved and create a new snap with the changes"
      ],
      [
        "",
        "no-snap",
        "do not auto snap even if the merge completed without conflicts"
      ],
      [
        "",
        "build",
        "in case of snap during the merge, run the build-pipeline (similar to bit snap --build)"
      ],
      [
        "",
        "verbose",
        "show details of components that were not merged successfully"
      ],
      [
        "x",
        "skip-dependency-installation",
        "do not install new dependencies resulting from the merge"
      ],
      [
        "m",
        "message <message>",
        "override the default message for the auto snap"
      ]
    ],
    "description": "merge changes of the remote head into local - auto-snaps all merged components",
    "extendedDescription": "merge changes of the remote head into local when they are diverged. when on a lane, merge the remote head of the lane into the local\nand creates snaps for merged components that have diverged, on the lane.\nif no ids are specified, all pending-merge components will be merged. (run \"bit status\" to list them).\noptionally use '--abort' to revert the last merge. to revert a lane merge, use \"bit lane merge-abort\" command.",
    "group": "development",
    "private": false,
    "arguments": [
      {
        "name": "component-pattern",
        "description": "component name, component id, or component pattern. use component pattern to select multiple components.\nwrap the pattern with quotes. use comma to separate patterns and \"!\" to exclude. e.g. \"ui/**, !ui/button\".\nuse '$' prefix to filter by states/attributes, e.g. '$deprecated', '$modified' or '$env:teambit.react/react'.\nuse `bit pattern --help` to understand patterns better and `bit pattern <pattern>` to validate the pattern."
      }
    ]
  },
  {
    "name": "lane [sub-command]",
    "alias": "l",
    "options": [
      [
        "d",
        "details",
        "show more details on the state of each component in each lane"
      ],
      [
        "j",
        "json",
        "show lanes details in json format"
      ],
      [
        "r",
        "remote <remote-scope-name>",
        "show all remote lanes from the specified scope"
      ],
      [
        "",
        "merged",
        "list only merged lanes"
      ],
      [
        "",
        "not-merged",
        "list only lanes that haven't been merged"
      ]
    ],
    "description": "manage lanes - if no sub-command is used, runs \"bit lane list\"",
    "extendedDescription": "",
    "group": "collaborate",
    "private": false,
    "remoteOp": true,
    "skipWorkspace": true,
    "commands": [
      {
        "name": "list",
        "alias": "",
        "options": [
          [
            "d",
            "details",
            "show more details on the state of each component in each lane"
          ],
          [
            "j",
            "json",
            "show lanes' details in a json format"
          ],
          [
            "r",
            "remote <remote-scope-name>",
            "show all remote lanes from the specified scope"
          ],
          [
            "",
            "merged",
            "list only merged lanes"
          ],
          [
            "",
            "not-merged",
            "list only lanes that haven't been merged"
          ]
        ],
        "description": "list local or remote lanes",
        "extendedDescription": "",
        "group": "ungrouped",
        "private": false,
        "remoteOp": true,
        "skipWorkspace": true
      },
      {
        "name": "switch <lane>",
        "alias": "",
        "options": [
          [
            "h",
            "head",
            "switch to the head of the lane/main (fetches the latest changes from the remote)"
          ],
          [
            "r",
            "auto-merge-resolve <merge-strategy>",
            "merge local changes with the checked out version. strategy should be \"theirs\", \"ours\" or \"manual\""
          ],
          [
            "",
            "force-ours",
            "do not merge, preserve local files as is"
          ],
          [
            "",
            "force-theirs",
            "do not merge, just overwrite with incoming files"
          ],
          [
            "a",
            "get-all",
            "DEPRECATED. this is currently the default behavior"
          ],
          [
            "",
            "workspace-only",
            "checkout only the components in the workspace to the selected lane"
          ],
          [
            "x",
            "skip-dependency-installation",
            "do not install dependencies of the imported components"
          ],
          [
            "p",
            "pattern <component-pattern>",
            "switch only the lane components matching the specified component-pattern. only works when the workspace is empty\n\ncomponent name, component id, or component pattern. use component pattern to select multiple components.\nwrap the pattern with quotes. use comma to separate patterns and \"!\" to exclude. e.g. \"ui/**, !ui/button\".\nuse '$' prefix to filter by states/attributes, e.g. '$deprecated', '$modified' or '$env:teambit.react/react'.\nuse `bit pattern --help` to understand patterns better and `bit pattern <pattern>` to validate the pattern."
          ],
          [
            "n",
            "alias <string>",
            "relevant when the specified lane is a remote lane. create a local alias for the lane (doesnt affect the lane's name on the remote"
          ],
          [
            "",
            "verbose",
            "display detailed information about components that legitimately were not switched"
          ],
          [
            "j",
            "json",
            "return the output as JSON"
          ]
        ],
        "description": "switch to the specified lane",
        "extendedDescription": "",
        "group": "ungrouped",
        "private": true,
        "arguments": [
          {
            "name": "lane",
            "description": "lane-name or lane-id (if lane is not local) to switch to"
          }
        ]
      },
      {
        "name": "show [lane-name]",
        "alias": "",
        "options": [
          [
            "j",
            "json",
            "show the lane details in json format"
          ],
          [
            "r",
            "remote",
            "show details of the remote head of the provided lane"
          ]
        ],
        "description": "show lane details. if no lane specified, show the current lane",
        "extendedDescription": "",
        "group": "ungrouped",
        "private": false,
        "remoteOp": true,
        "skipWorkspace": true
      },
      {
        "name": "create <lane-name>",
        "alias": "",
        "options": [
          [
            "s",
            "scope <scope-name>",
            "remote scope to which this lane will be exported, default to the workspace.json's defaultScope (can be changed up to first export of the lane with \"bit lane change-scope\")"
          ],
          [
            "",
            "remote-scope <scope-name>",
            "DEPRECATED. use --scope"
          ],
          [
            "",
            "alias <name>",
            "a local alias to refer to this lane, defaults to the `<lane-name>` (can be added later with \"bit lane alias\")"
          ],
          [
            "",
            "fork-lane-new-scope",
            "create the new lane in a different scope than its parent lane (if created from another lane)"
          ]
        ],
        "description": "creates a new lane and switches to it",
        "extendedDescription": "a lane created from main (default-lane) is empty until components are snapped.\na lane created from another lane contains all the components of the original lane.",
        "group": "ungrouped",
        "private": false,
        "arguments": [
          {
            "name": "lane-name",
            "description": "the name for the new lane"
          }
        ]
      },
      {
        "name": "remove <lanes...>",
        "alias": "",
        "options": [
          [
            "r",
            "remote",
            "delete a remote lane. use remote/lane-id syntax e.g. bit lane remove owner.org/my-lane --remote. Delete is immediate, no export required"
          ],
          [
            "f",
            "force",
            "removes/deletes the lane even when the lane is not yet merged to main"
          ],
          [
            "s",
            "silent",
            "skip confirmation"
          ]
        ],
        "description": "remove or delete lanes",
        "extendedDescription": "",
        "group": "collaborate",
        "private": false,
        "arguments": [
          {
            "name": "lanes...",
            "description": "A list of lane names, separated by spaces"
          }
        ]
      },
      {
        "name": "change-scope <remote-scope-name>",
        "alias": "",
        "options": [
          [
            "l",
            "lane-name <lane-name>",
            "the name of the lane to change its remote scope. if not specified, the current lane is used"
          ]
        ],
        "description": "changes the remote scope of a lane",
        "extendedDescription": "NOTE: available only before the lane is exported to the remote",
        "group": "ungrouped",
        "private": false
      },
      {
        "name": "alias <lane-name> <alias>",
        "alias": "",
        "options": [],
        "description": "adds an alias to a lane",
        "extendedDescription": "an alias is a name that can be used locally to refer to a lane. it is saved locally and never reaches the remote.\nit is useful e.g. when having multiple lanes with the same name, but with different remote scopes.",
        "group": "ungrouped",
        "private": false
      },
      {
        "name": "rename <new-name>",
        "alias": "",
        "options": [
          [
            "l",
            "lane-name <lane-name>",
            "the name of the lane to rename. if not specified, the current lane is used"
          ]
        ],
        "description": "change the lane-name locally",
        "extendedDescription": "the remote will be updated after the next \"bit export\" command",
        "group": "ungrouped",
        "private": false
      },
      {
        "name": "diff [values...]",
        "alias": "",
        "options": [
          [
            "",
            "pattern <component-pattern>",
            "show lane-diff for components conforming to the specified component-pattern only\ncomponent-pattern format: component name, component id, or component pattern. use component pattern to select multiple components.\nwrap the pattern with quotes. use comma to separate patterns and \"!\" to exclude. e.g. \"ui/**, !ui/button\".\nuse '$' prefix to filter by states/attributes, e.g. '$deprecated', '$modified' or '$env:teambit.react/react'.\nuse `bit pattern --help` to understand patterns better and `bit pattern <pattern>` to validate the pattern."
          ]
        ],
        "description": "show diff between lanes",
        "extendedDescription": "bit lane diff => diff between the current lane and default lane. (only inside workspace).\nbit lane diff to => diff between the current lane (or default-lane when in scope) and \"to\" lane.\nbit lane diff from to => diff between \"from\" lane and \"to\" lane.",
        "group": "ungrouped",
        "private": true,
        "remoteOp": true,
        "skipWorkspace": true,
        "arguments": [
          {
            "name": "from",
            "description": "base lane for comparison"
          },
          {
            "name": "to",
            "description": "lane being compared to base lane"
          }
        ]
      },
      {
        "name": "remove-readme [laneName]",
        "alias": "",
        "options": [],
        "description": "DEPRECATED (only use it if you have used add-readme and want to undo it). remove lane readme component",
        "extendedDescription": "",
        "group": "ungrouped",
        "private": false,
        "skipWorkspace": false
      },
      {
        "name": "import <lane>",
        "alias": "",
        "options": [
          [
            "x",
            "skip-dependency-installation",
            "do not install dependencies of the imported components"
          ],
          [
            "p",
            "pattern <component-pattern>",
            "import only components from the lane that fit the specified component-pattern to the workspace. works only when the workspace is empty"
          ]
        ],
        "description": "import a remote lane to your workspace and switch to that lane",
        "extendedDescription": "",
        "group": "ungrouped",
        "private": false,
        "arguments": [
          {
            "name": "lane",
            "description": "the remote lane name"
          }
        ]
      },
      {
        "name": "remove-comp <component-pattern>",
        "alias": "rc",
        "options": [
          [
            "",
            "workspace-only",
            "do not mark the components as removed from the lane. instead, remove them from the workspace only"
          ],
          [
            "",
            "update-main",
            "EXPERIMENTAL. remove, i.e. delete, component/s on the main lane after merging this lane into main"
          ]
        ],
        "description": "DEPRECATED. remove components when on a lane",
        "extendedDescription": "",
        "group": "collaborate",
        "private": false,
        "arguments": [
          {
            "name": "component-pattern",
            "description": "component name, component id, or component pattern. use component pattern to select multiple components.\nwrap the pattern with quotes. use comma to separate patterns and \"!\" to exclude. e.g. \"ui/**, !ui/button\".\nuse '$' prefix to filter by states/attributes, e.g. '$deprecated', '$modified' or '$env:teambit.react/react'.\nuse `bit pattern --help` to understand patterns better and `bit pattern <pattern>` to validate the pattern."
          }
        ]
      },
      {
        "name": "fetch [lane-id]",
        "alias": "",
        "options": [
          [
            "a",
            "all",
            "fetch all remote lanes"
          ]
        ],
        "description": "fetch component objects from lanes. if no lane-id is provided, it fetches from the current lane",
        "extendedDescription": "note, it does not save the remote lanes objects locally, only the refs",
        "group": "ungrouped",
        "private": false
      },
      {
        "name": "eject <component-pattern>",
        "alias": "",
        "options": [],
        "description": "delete a component from the lane and install it as a package from main",
        "extendedDescription": "NOTE: unlike \"bit eject\" on main, this command doesn't only remove the component from the\nworkspace, but also mark it as deleted from the lane, so it won't be merged later on.",
        "group": "ungrouped",
        "private": false,
        "arguments": [
          {
            "name": "component-pattern",
            "description": "component name, component id, or component pattern. use component pattern to select multiple components.\nwrap the pattern with quotes. use comma to separate patterns and \"!\" to exclude. e.g. \"ui/**, !ui/button\".\nuse '$' prefix to filter by states/attributes, e.g. '$deprecated', '$modified' or '$env:teambit.react/react'.\nuse `bit pattern --help` to understand patterns better and `bit pattern <pattern>` to validate the pattern."
          }
        ]
      },
      {
        "name": "history [lane-name]",
        "alias": "",
        "options": [
          [
            "",
            "id <string>",
            "show a specific history item"
          ]
        ],
        "description": "EXPERIMENTAL. show lane history, default to the current lane",
        "extendedDescription": "",
        "group": "ungrouped",
        "private": false
      },
      {
        "name": "history-diff <from-history-id> <to-history-id>",
        "alias": "",
        "options": [
          [
            "l",
            "lane <lane-name>",
            "the name of the lane to diff. if not specified, the current lane is used"
          ],
          [
            "",
            "pattern <component-pattern>",
            "show lane-diff for components conforming to the specified component-pattern only\ncomponent-pattern format: component name, component id, or component pattern. use component pattern to select multiple components.\nwrap the pattern with quotes. use comma to separate patterns and \"!\" to exclude. e.g. \"ui/**, !ui/button\".\nuse '$' prefix to filter by states/attributes, e.g. '$deprecated', '$modified' or '$env:teambit.react/react'.\nuse `bit pattern --help` to understand patterns better and `bit pattern <pattern>` to validate the pattern."
          ]
        ],
        "description": "EXPERIMENTAL. show diff between two lane-history ids",
        "extendedDescription": "run \"bit lane history\" to find these history-ids",
        "group": "ungrouped",
        "private": false
      },
      {
        "name": "checkout <history-id>",
        "alias": "",
        "options": [
          [
            "x",
            "skip-dependency-installation",
            "do not install dependencies of the checked out components"
          ]
        ],
        "description": "EXPERIMENTAL. checkout to a previous history of the current lane. see also \"bit lane revert\"",
        "extendedDescription": "",
        "group": "ungrouped",
        "private": false,
        "arguments": [
          {
            "name": "history-id",
            "description": "the history-id to checkout to. run \"bit lane history\" to list the ids"
          }
        ]
      },
      {
        "name": "revert <history-id>",
        "alias": "",
        "options": [
          [
            "x",
            "skip-dependency-installation",
            "do not install dependencies of the checked out components"
          ]
        ],
        "description": "EXPERIMENTAL. revert to a previous history of the current lane. see also \"bit lane checkout\"",
        "extendedDescription": "revert is similar to \"lane checkout\", but it keeps the versions and only change the files.\nchoose one or the other based on your needs.\nif you want to continue working on this lane and needs the changes from the history to be the head, then use \"lane revert\".\nif you want to fork the lane from a certain point in history, use \"lane checkout\" and create a new lane from it.",
        "group": "ungrouped",
        "private": false,
        "arguments": [
          {
            "name": "history-id",
            "description": "the history-id to checkout to. run \"bit lane history\" to list the ids"
          }
        ]
      },
      {
        "name": "merge <lane> [pattern]",
        "alias": "",
        "options": [
          [
            "",
            "manual",
            "same as \"--auto-merge-resolve manual\". in case of merge conflict, write the files with the conflict markers"
          ],
          [
            "r",
            "auto-merge-resolve <merge-strategy>",
            "in case of a merge conflict, resolve according to the provided strategy: [ours, theirs, manual]"
          ],
          [
            "",
            "ours",
            "DEPRECATED. use --auto-merge-resolve. in case of a conflict, keep local modifications"
          ],
          [
            "",
            "theirs",
            "DEPRECATED. use --auto-merge-resolve. in case of a conflict, override local with incoming changes"
          ],
          [
            "",
            "workspace",
            "merge only lane components that are in the current workspace"
          ],
          [
            "",
            "no-auto-snap",
            "do not auto snap after merge completed without conflicts of diverged components (see command description)"
          ],
          [
            "",
            "no-snap",
            "do not pass snaps from the other lane even for non-diverged components (see command description)"
          ],
          [
            "",
            "tag",
            "auto-tag all lane components after merging into main (or tag-merge in case of snap-merge)"
          ],
          [
            "",
            "build",
            "in case of snap during the merge, run the build-pipeline (similar to bit snap --build)"
          ],
          [
            "m",
            "message <message>",
            "override the default message for the auto snap"
          ],
          [
            "",
            "keep-readme",
            "skip deleting the lane readme component after merging"
          ],
          [
            "",
            "no-squash",
            "relevant for merging lanes into main, which by default squashes all lane snaps"
          ],
          [
            "",
            "squash",
            "relevant for merging a lane into another non-main lane, which by default does not squash"
          ],
          [
            "",
            "ignore-config-changes",
            "allow merging when components are modified due to config changes (such as dependencies) only and not files"
          ],
          [
            "",
            "verbose",
            "display detailed information about components that were legitimately unmerged"
          ],
          [
            "x",
            "skip-dependency-installation",
            "do not install dependencies of the imported components"
          ],
          [
            "",
            "skip-fetch",
            "use the local state of target-lane if exits locally, without updating it from the remote"
          ],
          [
            "",
            "include-deps",
            "relevant for \"pattern\" and \"--workspace\". merge also dependencies of the specified components"
          ],
          [
            "",
            "resolve-unrelated [merge-strategy]",
            "relevant when a component on a lane and the component on main have nothing in common. merge-strategy can be \"ours\" (default) or \"theirs\""
          ],
          [
            "",
            "include-non-lane-comps",
            "DEPRECATED (this is now the default). when merging main, include workspace components that are not on the lane (by default only lane components are merged)"
          ],
          [
            "",
            "exclude-non-lane-comps",
            "when merging main into a lane, exclude workspace components that are not on the lane (by default all workspace components are merged)"
          ]
        ],
        "description": "merge a local or a remote lane to the current lane",
        "extendedDescription": "by default, the provided lane will be fetched from the remote before merging.\nto merge the lane from the local scope without updating it first, use \"--skip-fetch\" flag.\n\nwhen the current and merge candidate lanes are diverged in history and the files could be merged with no conflicts,\nthese components will be snap-merged to complete the merge. use \"no-auto-snap\" to opt-out, or \"tag\" to tag instead.\n\nwhen the components are not diverged in history, and the current lane is behind the merge candidate, the merge will\nsimply update the components and the heads according to the merge candidate.\nto opt-out, use \"--no-snap\", the components will be written as the merge candidate, and will be left as modified.\n\nin case a component in both ends don't share history (no snap is found in common), the merge will require \"--resolve-unrelated\" flag.\nthis flag keeps the history of one end and saves a reference to the other end. the decision of which end to keep is determined by the following:\n1. if the component exists on main, then the history linked to main will be kept.\nin this case, the strategy of \"--resolve-unrelated\" only determines which source-code to keep. it's not about the history.\n2. if the component doesn't exist on main, then by default, the history of the current lane will be kept.\nunless \"--resolve-unrelated\" is set to \"theirs\", in which case the history of the other lane will be kept.\n2. a. an edge case: if the component is deleted on the current lane, the strategy will always be \"theirs\".\nso then the history (and the source-code) of the other lane will be kept.\n",
        "private": true,
        "remoteOp": true,
        "arguments": [
          {
            "name": "lane",
            "description": "lane-name or full lane-id (if remote) to merge to the current lane"
          },
          {
            "name": "pattern",
            "description": "partially merge the lane - only components that match the specified component-pattern\nComponent pattern format: component name, component id, or component pattern. use component pattern to select multiple components.\nwrap the pattern with quotes. use comma to separate patterns and \"!\" to exclude. e.g. \"ui/**, !ui/button\".\nuse '$' prefix to filter by states/attributes, e.g. '$deprecated', '$modified' or '$env:teambit.react/react'.\nuse `bit pattern --help` to understand patterns better and `bit pattern <pattern>` to validate the pattern."
          }
        ]
      },
      {
        "name": "merge-abort",
        "alias": "",
        "options": [
          [
            "",
            "verbose",
            "show details of components that didn't need to be merged"
          ],
          [
            "s",
            "silent",
            "skip confirmation"
          ],
          [
            "x",
            "skip-dependency-installation",
            "do not install packages of the imported components"
          ]
        ],
        "description": "abort the recent lane-merge. revert the lane object and checkout accordingly",
        "extendedDescription": "restore the lane-object to its state before the last \"bit lane merge\" command.\nalso, checkout the workspace components according to the restored lane state",
        "private": true,
        "remoteOp": true
      },
      {
        "name": "merge-move <new-lane-name>",
        "alias": "",
        "options": [
          [
            "s",
            "scope <scope-name>",
            "remote scope to which this lane will be exported, default to the workspace.json's defaultScope (can be changed up to first export of the lane with \"bit lane change-scope\")"
          ]
        ],
        "description": "EXPERIMENT. move the current merge state into a new lane. the current lane will be reset",
        "extendedDescription": "this command is useful when you got a messy merge state that from one hand you don't want\nto loose the changes, but on the other hand, you want to keep your lane without those changes.\nthis command does the following:\n1. create a new lane with the current merge state. including all the filesystem changes. (in practice, it leaves the fs intact)\n2. reset the current lane to the state before the merge. so then once done with the new lane, you can switch to the current lane and it'll be clean.",
        "remoteOp": true
      }
    ]
  },
  {
    "name": "switch <lane>",
    "alias": "",
    "options": [
      [
        "h",
        "head",
        "switch to the head of the lane/main (fetches the latest changes from the remote)"
      ],
      [
        "r",
        "auto-merge-resolve <merge-strategy>",
        "merge local changes with the checked out version. strategy should be \"theirs\", \"ours\" or \"manual\""
      ],
      [
        "",
        "force-ours",
        "do not merge, preserve local files as is"
      ],
      [
        "",
        "force-theirs",
        "do not merge, just overwrite with incoming files"
      ],
      [
        "a",
        "get-all",
        "DEPRECATED. this is currently the default behavior"
      ],
      [
        "",
        "workspace-only",
        "checkout only the components in the workspace to the selected lane"
      ],
      [
        "x",
        "skip-dependency-installation",
        "do not install dependencies of the imported components"
      ],
      [
        "p",
        "pattern <component-pattern>",
        "switch only the lane components matching the specified component-pattern. only works when the workspace is empty\n\ncomponent name, component id, or component pattern. use component pattern to select multiple components.\nwrap the pattern with quotes. use comma to separate patterns and \"!\" to exclude. e.g. \"ui/**, !ui/button\".\nuse '$' prefix to filter by states/attributes, e.g. '$deprecated', '$modified' or '$env:teambit.react/react'.\nuse `bit pattern --help` to understand patterns better and `bit pattern <pattern>` to validate the pattern."
      ],
      [
        "n",
        "alias <string>",
        "relevant when the specified lane is a remote lane. create a local alias for the lane (doesnt affect the lane's name on the remote"
      ],
      [
        "",
        "verbose",
        "display detailed information about components that legitimately were not switched"
      ],
      [
        "j",
        "json",
        "return the output as JSON"
      ]
    ],
    "description": "switch to the specified lane",
    "extendedDescription": "",
    "group": "ungrouped",
    "private": true,
    "arguments": [
      {
        "name": "lane",
        "description": "lane-name or lane-id (if lane is not local) to switch to"
      }
    ]
  },
  {
    "name": "cat-lane-history <lane-name>",
    "alias": "clh",
    "options": [],
    "description": "cat lane-history object by lane-name",
    "extendedDescription": "",
    "group": "ungrouped",
    "private": true
  },
  {
    "name": "apply <data>",
    "alias": "",
    "options": [
      [
        "",
        "push",
        "export the updated objects to the original scopes once done"
      ],
      [
        "m",
        "message <message>",
        "log message describing the latest changes"
      ],
      [
        "",
        "lane <lane-id>",
        "fetch the components from the given lane"
      ],
      [
        "",
        "build",
        "run the build pipeline"
      ],
      [
        "",
        "skip-tests",
        "skip running component tests during snap process"
      ],
      [
        "",
        "disable-snap-pipeline",
        "skip the snap pipeline"
      ],
      [
        "",
        "ignore-build-errors",
        "run the snap pipeline although the build pipeline failed"
      ],
      [
        "",
        "rebuild-deps-graph",
        "do not reuse the saved dependencies graph, instead build it from scratch"
      ],
      [
        "i",
        "ignore-issues [issues]",
        "ignore component issues (shown in \"bit status\" as \"issues found\"), issues to ignore:\n[MissingPackagesDependenciesOnFs, MissingManuallyConfiguredPackages, UntrackedDependencies, ResolveErrors, RelativeComponents, RelativeComponentsAuthored, ParseErrors, MissingDists, LegacyInsideHarmony, MissingDependenciesOnFs, ImportNonMainFiles, MultipleEnvs, MissingLinksFromNodeModulesToSrc, CircularDependencies, DuplicateComponentAndPackage, MergeConfigHasConflict, NonLoadedEnv, ExternalEnvWithoutVersion, RemovedDependencies, RemovedEnv, DeprecatedDependencies, SelfReference, ImportFromDirectory]\nto ignore multiple issues, separate them by a comma and wrap with quotes. to ignore all issues, specify \"*\"."
      ],
      [
        "",
        "tag",
        "make a tag instead of a snap"
      ],
      [
        "",
        "stream",
        "relevant for --json only. stream loader as json strings"
      ],
      [
        "j",
        "json",
        "output as json format"
      ],
      [
        "",
        "snap",
        "snap the components. default to keep them new"
      ],
      [
        "",
        "stream",
        "relevant for --json only. stream loader as json strings"
      ]
    ],
    "description": "apply files/config to components",
    "extendedDescription": "the input data is a stringified JSON of an array of the following object.\n{\n  componentId: string;     // ids always have scope, so it's safe to parse them from string\n  dependencies?: string[]; // dependencies include versions. for components use component-id. e.g. [teambit.compilation/compiler@1.0.0, lodash@4.17.21]\n  aspects?: Record<string,any> // e.g. { \"teambit.react/react\": {}, \"teambit.envs/envs\": { \"env\": \"teambit.react/react\" } }\n  message?: string;       // tag-message.\n  files?: Array<{path: string, content: string}>; // replace content of specified source-files. the content is base64 encoded.\n  isNew?: boolean;        // if it's new, it'll be generated from the given files. otherwise, it'll be fetched from the scope and updated.\n  mainFile?: string;      // relevant when isNew is true. default to \"index.ts\".\n  newDependencies?: Array<{  // new dependencies (components and packages) to add.\n    id: string;              // component-id or package-name. e.g. \"teambit.react/react\" or \"lodash\".\n    version?: string;        // version of the package. e.g. \"2.0.3\". for packages, it is mandatory.\n    isComponent?: boolean;   // default true. if false, it's a package dependency\n    type?: 'runtime' | 'dev' | 'peer'; // default \"runtime\".\n  }>;\n  removeDependencies?: string[]; // component-id (for components) or package-name (for packages) to remove from the dependencies.\n  forkFrom?: string;      // origin id to fork from. the componentId is the new id. (no need to populate isNew prop).\n  version?: string; // relevant when passing \"--tag\". optionally, specify the semver to tag. default to \"patch\".\n}\nan example of the final data: '[{\"componentId\":\"ci.remote2/comp-b\",\"message\": \"first snap\"}]'",
    "group": "ungrouped",
    "private": true
  },
  {
    "name": "doctor [diagnosis-name]",
    "alias": "",
    "options": [
      [
        "j",
        "json",
        "return diagnoses in json format"
      ],
      [
        "",
        "list",
        "list all available diagnoses"
      ],
      [
        "s",
        "save [filePath]",
        "save diagnoses to a file"
      ],
      [
        "a",
        "archive [filePath]",
        "archive the workspace including diagnosis info (by default exclude node-modules and include .bit)"
      ],
      [
        "n",
        "include-node-modules",
        "relevant for --archive. include node_modules in the archive file"
      ],
      [
        "p",
        "include-public",
        "relevant for --archive. include public folder in the archive file"
      ],
      [
        "e",
        "exclude-local-scope",
        "relevant for --archive. exclude .bit or .git/bit from the archive file"
      ]
    ],
    "description": "diagnose a bit workspace",
    "extendedDescription": "",
    "group": "general",
    "private": false
  },
  {
    "name": "init [path]",
    "alias": "",
    "options": [
      [
        "n",
        "name <workspace-name>",
        "name of the workspace"
      ],
      [
        "",
        "generator <env-id>",
        "for multiple, separate by a comma. add env-ids into the generators field in the workspace config for future \"bit create\" templates"
      ],
      [
        "T",
        "standalone",
        "do not nest component store within .git directory and do not write config data inside package.json"
      ],
      [
        "",
        "no-package-json",
        "do not generate package.json"
      ],
      [
        "r",
        "reset",
        "write missing or damaged Bit files"
      ],
      [
        "",
        "reset-new",
        "reset .bitmap file as if the components were newly added and remove all model data (objects)"
      ],
      [
        "",
        "reset-lane-new",
        "same as reset-new, but it only resets components belong to lanes. main components are left intact"
      ],
      [
        "",
        "reset-hard",
        "delete all Bit files and directories, including Bit configuration, tracking and model data. Useful for re-starting workspace from scratch"
      ],
      [
        "",
        "reset-scope",
        "removes local scope (.bit or .git/bit). tags/snaps that have not been exported will be lost. workspace is left intact"
      ],
      [
        "d",
        "default-directory <default-directory>",
        "set the default directory pattern to import/create components into"
      ],
      [
        "",
        "default-scope <default-scope>",
        "set the default scope for components in the workspace"
      ],
      [
        "f",
        "force",
        "force workspace initialization without clearing local objects"
      ],
      [
        "b",
        "bare [name]",
        "initialize an empty bit bare scope"
      ],
      [
        "s",
        "shared <groupname>",
        "add group write permissions to a scope properly"
      ]
    ],
    "description": "create or reinitialize an empty workspace",
    "extendedDescription": "if the current directory is already a workspace, it validates that bit files are correct and rewrite them if needed.",
    "group": "start",
    "private": false,
    "skipWorkspace": true
  },
  {
    "name": "version-history <sub-command>",
    "alias": "vh",
    "options": [],
    "description": "manage the version-history of components",
    "extendedDescription": "",
    "group": "info",
    "private": false,
    "commands": [
      {
        "name": "graph <component-id>",
        "alias": "",
        "options": [
          [
            "s",
            "short-hash",
            "show only 9 chars of the hash"
          ],
          [
            "m",
            "mark <string>",
            "paint the given node-ids in the graph in red color, for multiple, separate by commas"
          ],
          [
            "",
            "png",
            "save the graph as a png file instead of svg. requires \"graphviz\" to be installed"
          ],
          [
            "l",
            "layout <name>",
            "GraphVis layout. default to \"dot\". options are [circo, dot, fdp, neato, osage, patchwork, sfdp, twopi]"
          ]
        ],
        "description": "generate a graph of the version history of a component and save as an SVG file",
        "extendedDescription": "",
        "group": "info",
        "private": false
      },
      {
        "name": "show <component-id>",
        "alias": "vh",
        "options": [
          [
            "s",
            "short-hash",
            "show only 9 chars of the hash"
          ],
          [
            "j",
            "json",
            "json format"
          ]
        ],
        "description": "show the version-history of a component",
        "extendedDescription": "",
        "group": "info",
        "private": false
      },
      {
        "name": "build <component-pattern>",
        "alias": "",
        "options": [
          [
            "",
            "from-snap <snap>",
            "build the version history from a specific snap. the pattern must be a single component-id"
          ],
          [
            "",
            "from-all-lanes",
            "build the version history from the heads of all lanes that include this component"
          ],
          [
            "",
            "delete-existing",
            "delete the existing version history before building it"
          ],
          [
            "",
            "remote <scope>",
            "make the change on the remote scope"
          ]
        ],
        "description": "rebuild the version history of a component. helpful when it got corrupted for some reason",
        "extendedDescription": "",
        "group": "info",
        "private": false,
        "arguments": [
          {
            "name": "component-pattern",
            "description": "component name, component id, or component pattern. use component pattern to select multiple components.\nwrap the pattern with quotes. use comma to separate patterns and \"!\" to exclude. e.g. \"ui/**, !ui/button\".\nuse '$' prefix to filter by states/attributes, e.g. '$deprecated', '$modified' or '$env:teambit.react/react'.\nuse `bit pattern --help` to understand patterns better and `bit pattern <pattern>` to validate the pattern."
          }
        ]
      }
    ]
  },
  {
    "name": "cat-version-history <id>",
    "alias": "cvh",
    "options": [
      [
        "j",
        "json",
        "json format"
      ]
    ],
    "description": "cat version-history object by component-id",
    "extendedDescription": "",
    "group": "ungrouped",
    "private": true
  },
  {
    "name": "stash <sub-command>",
    "alias": "",
    "options": [
      [
        "p",
        "pattern",
        "component name, component id, or component pattern. use component pattern to select multiple components.\nwrap the pattern with quotes. use comma to separate patterns and \"!\" to exclude. e.g. \"ui/**, !ui/button\".\nuse '$' prefix to filter by states/attributes, e.g. '$deprecated', '$modified' or '$env:teambit.react/react'.\nuse `bit pattern --help` to understand patterns better and `bit pattern <pattern>` to validate the pattern."
      ],
      [
        "m",
        "message <string>",
        "message to be attached to the stashed components"
      ]
    ],
    "description": "stash modified components",
    "extendedDescription": "",
    "group": "development",
    "private": false,
    "commands": [
      {
        "name": "save",
        "alias": "s",
        "options": [
          [
            "p",
            "pattern",
            "component name, component id, or component pattern. use component pattern to select multiple components.\nwrap the pattern with quotes. use comma to separate patterns and \"!\" to exclude. e.g. \"ui/**, !ui/button\".\nuse '$' prefix to filter by states/attributes, e.g. '$deprecated', '$modified' or '$env:teambit.react/react'.\nuse `bit pattern --help` to understand patterns better and `bit pattern <pattern>` to validate the pattern."
          ],
          [
            "",
            "include-new",
            "EXPERIMENTAL. by default, only modified components are stashed. use this flag to include new components"
          ],
          [
            "m",
            "message <string>",
            "message to be attached to the stashed components"
          ]
        ],
        "description": "stash modified components",
        "extendedDescription": "",
        "group": "development",
        "private": false
      },
      {
        "name": "load [stash-id]",
        "alias": "pop",
        "options": [
          [
            "r",
            "auto-merge-resolve <merge-strategy>",
            "in case of merge conflict, resolve according to the provided strategy: [ours, theirs, manual]"
          ],
          [
            "",
            "manual",
            "same as \"--auto-merge-resolve manual\". in case of merge conflict, write the files with the conflict markers"
          ],
          [
            "",
            "force-ours",
            "do not merge, preserve local files as is"
          ],
          [
            "",
            "force-theirs",
            "do not merge, just overwrite with incoming files"
          ]
        ],
        "description": "apply the changes according to the stash. if no stash-id provided, it loads the latest stash",
        "extendedDescription": "",
        "group": "development",
        "private": false
      },
      {
        "name": "list",
        "alias": "",
        "options": [],
        "description": "list stash",
        "extendedDescription": "",
        "group": "development",
        "private": false
      }
    ]
  },
  {
    "name": "log <id>",
    "alias": "",
    "options": [
      [
        "r",
        "remote",
        "show log of a remote component"
      ],
      [
        "",
        "parents",
        "show parents and lanes data"
      ],
      [
        "o",
        "one-line",
        "show each log entry in one line"
      ],
      [
        "f",
        "full-hash",
        "show full hash of the snap (default to the first 9 characters for --one-line/--parents flags)"
      ],
      [
        "m",
        "full-message",
        "show full message of the snap (default to the first line for --one-line/--parents flags)"
      ],
      [
        "",
        "show-hidden",
        "show hidden snaps (snaps are marked as hidden typically when the following tag has the same files/config)"
      ],
      [
        "j",
        "json",
        "json format"
      ]
    ],
    "description": "show components(s) version history",
    "extendedDescription": "",
    "group": "info",
    "private": false,
    "remoteOp": true,
    "skipWorkspace": true,
    "arguments": [
      {
        "name": "id",
        "description": "component-id or component-name"
      }
    ]
  },
  {
    "name": "log-file <filepath>",
    "alias": "",
    "options": [
      [
        "o",
        "one-line",
        "show each log entry in one line"
      ]
    ],
    "description": "EXPERIMENTAL. show file history",
    "extendedDescription": "",
    "group": "info",
    "private": false,
    "arguments": [
      {
        "name": "filepath",
        "description": "file path relative to the workspace"
      }
    ]
  },
  {
    "name": "blame <filepath>",
    "alias": "",
    "options": [
      [
        "m",
        "include-message",
        "show the commit message"
      ]
    ],
    "description": "EXPERIMENTAL. per line, show who and when was the last to modify it",
    "extendedDescription": "",
    "group": "info",
    "private": false,
    "arguments": [
      {
        "name": "filepath",
        "description": "file path relative to the workspace"
      }
    ]
  },
  {
    "name": "server",
    "alias": "",
    "options": [
      [
        "p",
        "port [port]",
        "port to run the server on"
      ],
      [
        "c",
        "compile",
        "compile components during the watch process"
      ]
    ],
    "description": "communicate with bit cli program via http requests",
    "extendedDescription": "",
    "group": "general",
    "private": false
  },
  {
    "name": "_merge-lane <from-lane> [to-lane]",
    "alias": "",
    "options": [
      [
        "",
        "pattern <string>",
        "partially merge the lane with the specified component-pattern"
      ],
      [
        "",
        "title <string>",
        "if provided, it replaces the original message with this title and append squashed snaps messages"
      ],
      [
        "",
        "title-base64 <string>",
        "same as --title flag but the title is base64 encoded"
      ],
      [
        "",
        "push",
        "export the updated objects to the original scopes once done"
      ],
      [
        "",
        "keep-readme",
        "skip deleting the lane readme component after merging"
      ],
      [
        "",
        "no-squash",
        "relevant for merging lanes into main, which by default squash."
      ],
      [
        "",
        "include-deps",
        "relevant for \"--pattern\". merge also dependencies of the given components"
      ],
      [
        "",
        "re-merge",
        "helpful when last merge failed during export. do not skip components that seemed to be merged"
      ],
      [
        "j",
        "json",
        "output as json format"
      ]
    ],
    "description": "merge a remote lane into another lane or main via a bare-scope (not workspace)",
    "extendedDescription": "to merge from a workspace, use \"bit lane merge\" command.\nthis is intended to use from the UI, which will have a button to merge an existing lane.\nthe lane must be up-to-date with the other lane, otherwise, conflicts might occur which are not handled in this command",
    "group": "ungrouped",
    "private": true,
    "remoteOp": true,
    "arguments": [
      {
        "name": "from-lane",
        "description": "lane-id to merge from or \"main\""
      },
      {
        "name": "to-lane",
        "description": "lane-id to merge to. default is \"main\""
      }
    ]
  },
  {
    "name": "login",
    "alias": "",
    "options": [
      [
        "",
        "skip-config-update",
        "skip writing to the .npmrc file"
      ],
      [
        "",
        "refresh-token",
        "force refresh token even when logged in"
      ],
      [
        "d",
        "cloud-domain <domain>",
        "login cloud domain (default bit.cloud)"
      ],
      [
        "",
        "default-cloud-domain",
        "login to default cloud domain (bit.cloud)"
      ],
      [
        "p",
        "port <port>",
        "port number to open for localhost server (default 8085)"
      ],
      [
        "",
        "no-browser",
        "do not open a browser for authentication"
      ],
      [
        "",
        "machine-name <name>",
        "specify machine-name to pair with the token (useful for CI to avoid accidentally revoking the token)"
      ],
      [
        "",
        "suppress-browser-launch",
        "DEPRECATE. use --no-browser instead"
      ]
    ],
    "description": "log in to Bit cloud",
    "extendedDescription": "",
    "group": "general",
    "private": false,
    "remoteOp": true,
    "skipWorkspace": true
  },
  {
    "name": "logout",
    "alias": "",
    "options": [],
    "description": "log the CLI out of Bit",
    "extendedDescription": "",
    "group": "general",
    "private": false,
    "skipWorkspace": true
  },
  {
    "name": "whoami",
    "alias": "",
    "options": [],
    "description": "display the currently logged in user",
    "extendedDescription": "",
    "group": "general",
    "private": false,
    "skipWorkspace": true
  },
  {
    "name": "npmrc [sub-command]",
    "alias": "",
    "options": [],
    "description": "manage npmrc file with scope, registry, and token information from bit.cloud",
    "extendedDescription": "",
    "group": "cloud",
    "private": false,
    "skipWorkspace": true,
    "commands": [
      {
        "name": "generate",
        "alias": "",
        "options": [
          [
            "",
            "dry-run",
            "show the .npmrc file content that will be written"
          ],
          [
            "f",
            "force",
            "force update the .npmrc file even if there are conflicts"
          ]
        ],
        "description": "update npmrc file with scope, registry, and token information from bit.cloud",
        "extendedDescription": "",
        "group": "cloud",
        "private": false,
        "skipWorkspace": false
      }
    ]
  },
  {
    "name": "status",
    "alias": "s",
    "options": [
      [
        "j",
        "json",
        "return a json version of the component"
      ],
      [
        "w",
        "warnings",
        "show warnings. by default, only issues that block tag/snap are shown"
      ],
      [
        "",
        "verbose",
        "show extra data: full snap hashes for staged components, and divergence point for lanes"
      ],
      [
        "l",
        "lanes",
        "when on a lane, show updates from main and updates from forked lanes"
      ],
      [
        "",
        "strict",
        "in case issues found, exit with code 1"
      ],
      [
        "c",
        "ignore-circular-dependencies",
        "do not check for circular dependencies to get the results quicker"
      ]
    ],
    "description": "present the current status of components in the workspace, including indication of detected issues",
    "extendedDescription": "",
    "group": "development",
    "private": false
  },
  {
    "name": "mini-status [component-pattern]",
    "alias": "ms",
    "options": [
      [
        "",
        "show-issues",
        "show component issues (slows down the command)"
      ],
      [
        "c",
        "ignore-circular-dependencies",
        "do not check for circular dependencies to get the results quicker (relevant when --show-issues flag is used)"
      ],
      [
        "j",
        "json",
        "json format"
      ]
    ],
    "description": "basic status for fast execution",
    "extendedDescription": "shows only modified/new components with code changes. for the full status, use \"bit status\".\nthis command only checks source code changes, it doesn't check for config/aspect/dependency changes",
    "group": "development",
    "private": false,
    "arguments": [
      {
        "name": "component-pattern",
        "description": "component name, component id, or component pattern. use component pattern to select multiple components.\nwrap the pattern with quotes. use comma to separate patterns and \"!\" to exclude. e.g. \"ui/**, !ui/button\".\nuse '$' prefix to filter by states/attributes, e.g. '$deprecated', '$modified' or '$env:teambit.react/react'.\nuse `bit pattern --help` to understand patterns better and `bit pattern <pattern>` to validate the pattern."
      }
    ]
  },
  {
    "name": "clear-cache",
    "alias": "cc",
    "options": [
      [
        "r",
        "remote <remote-name>",
        "clear memory cache from a remote scope"
      ]
    ],
    "description": "clears Bit's cache from current working machine",
    "extendedDescription": "The following gets removed by this command:\n1) V8 compiled code (generated the first time Bit is loaded by v8-compile-cache package)\n2) components cache on the filesystem (mainly the dependencies graph and docs)\n3) scope's index file, which maps the component-id:object-hash",
    "group": "general",
    "private": false,
    "skipWorkspace": true
  },
  {
    "name": "rename <current-name> <new-name>",
    "alias": "",
    "options": [
      [
        "s",
        "scope <scope-name>",
        "define the scope for the new component"
      ],
      [
        "r",
        "refactor",
        "update the import/require statements in all dependent components (in the same workspace)"
      ],
      [
        "",
        "preserve",
        "avoid renaming files and variables/classes according to the new component name"
      ],
      [
        "",
        "ast",
        "use ast to transform files instead of regex"
      ],
      [
        "",
        "delete",
        "DEPRECATED. this is now the default"
      ],
      [
        "",
        "deprecate",
        "instead of deleting the original component, deprecating it"
      ],
      [
        "p",
        "path <relative-path>",
        "relative path in the workspace to place new component in. by default, the directory of the new component is from your workspace's \"defaultScope\" value"
      ]
    ],
    "description": "rename component. if exported, create a new component and delete the original component. otherwise just renames current component",
    "extendedDescription": "",
    "group": "collaborate",
    "private": false,
    "remoteOp": true,
    "skipWorkspace": true,
    "arguments": [
      {
        "name": "current-name",
        "description": "the current component name (without its scope name)"
      },
      {
        "name": "new-name",
        "description": "the new component name (without its scope name. use --scope to define the new component's scope)"
      }
    ]
  },
  {
    "name": "schema <pattern>",
    "alias": "",
    "options": [
      [
        "j",
        "json",
        "return the component schema in json format"
      ]
    ],
    "description": "shows the API schema of the specified component/s.",
    "extendedDescription": "you can use a `<pattern>` for multiple component ids, such as `bit schema \"org.scope/utils/**\"`.\nuse comma to separate patterns and '!' to exclude. e.g. 'ui/**, !ui/button'\nuse '$' prefix to filter by states/attributes, e.g. '$deprecated', '$modified' or '$env:teambit.react/react'.\nalways wrap the pattern with single quotes to avoid collision with shell commands.\nuse `bit pattern --help` to understand patterns better and `bit pattern <pattern>` to validate the pattern.\n",
    "group": "development",
    "private": false
  },
  {
    "name": "check-types [component-pattern]",
    "alias": "",
    "options": [
      [
        "a",
        "all",
        "check-types for all components, not only modified and new"
      ],
      [
        "",
        "strict",
        "in case issues found, exit with code 1"
      ]
    ],
    "description": "check typescript types",
    "extendedDescription": "",
    "group": "development",
    "private": false,
    "arguments": [
      {
        "name": "component-pattern",
        "description": "component name, component id, or component pattern. use component pattern to select multiple components.\nwrap the pattern with quotes. use comma to separate patterns and \"!\" to exclude. e.g. \"ui/**, !ui/button\".\nuse '$' prefix to filter by states/attributes, e.g. '$deprecated', '$modified' or '$env:teambit.react/react'.\nuse `bit pattern --help` to understand patterns better and `bit pattern <pattern>` to validate the pattern."
      }
    ]
  },
  {
    "name": "update-dependencies <data>",
    "alias": "",
    "options": [
      [
        "",
        "tag",
        "tag once the build is completed (by default it snaps)"
      ],
      [
        "",
        "simulation",
        "simulation purpose. should never be pushed"
      ],
      [
        "",
        "push",
        "export the updated objects to the original scopes once tagged/snapped"
      ],
      [
        "",
        "message <string>",
        "message to be saved as part of the version log"
      ],
      [
        "",
        "username <string>",
        "username to be saved as part of the version log"
      ],
      [
        "",
        "email <string>",
        "email to be saved as part of the version log"
      ],
      [
        "",
        "lane <lane-id>",
        "helps to fetch the components from the lane scope (relevant for --multiple)"
      ],
      [
        "",
        "skip-new-scope-validation",
        "avoid throwing an error when running on a non-new scope"
      ]
    ],
    "description": "update dependencies for components and tag/snap the results",
    "extendedDescription": "this command should be running from a new bare scope, it first imports the components it needs and then processes the update.\nthe input data is a stringified JSON of an array of the following object.\n{\n  componentId: string; // ids always have scope, so it's safe to parse them from string\n  dependencies: string[]; // e.g. [teambit/compiler@1.0.0, teambit/tester@1.0.0]\n  versionToTag?: string; // specific version (e.g. '1.0.0') or semver (e.g. 'minor', 'patch')\n  versionToSnap?: string; // specific hash to snap\n}\nan example of the final data: '[{\"componentId\":\"ci.remote2/comp-b\",\"dependencies\":[\"ci.remote/comp1@0.0.2\"]}]'\n",
    "group": "development",
    "private": true
  },
  {
    "name": "sign [component...]",
    "alias": "",
    "options": [
      [
        "",
        "multiple",
        "DEPRECATED. this is now the default. sign components from multiple scopes"
      ],
      [
        "",
        "always-succeed",
        "exit with code 0 even though the build failed"
      ],
      [
        "",
        "push",
        "export the updated objects to the original scopes once done"
      ],
      [
        "",
        "lane <lane-id>",
        "helps to fetch the components from the lane scope (relevant for --multiple)"
      ],
      [
        "",
        "rebuild",
        "allow signing components whose buildStatus is successful for testing purposes"
      ],
      [
        "",
        "original-scope",
        "sign components from the original scope. works only when all components are from the same scope"
      ],
      [
        "",
        "save-locally",
        "save the signed components locally on the bare-scope for debugging purposes"
      ],
      [
        "",
        "reuse-capsules",
        "avoid deleting the capsules root-dir before starting the build"
      ],
      [
        "",
        "tasks <string>",
        "build the specified task(s) only. for multiple tasks, separate by a comma and wrap with quotes.\nspecify the task-name (e.g. \"TypescriptCompiler\") or the task-aspect-id (e.g. teambit.compilation/compiler)"
      ]
    ],
    "description": "complete the build process for components",
    "extendedDescription": "a new bare-scope needs to be created and it will import the components to this scope first",
    "group": "development",
    "private": true
  },
  {
    "name": "aspect <sub-command>",
    "alias": "",
    "options": [],
    "description": "manage aspects",
    "extendedDescription": "",
    "group": "development",
    "private": false,
    "commands": [
      {
        "name": "list [pattern]",
        "alias": "",
        "options": [
          [
            "d",
            "debug",
            "show the origins where the aspects were taken from"
          ]
        ],
        "description": "list all aspects configured on component(s)",
        "extendedDescription": "",
        "group": "development",
        "private": false,
        "arguments": [
          {
            "name": "pattern",
            "description": "component name, component id, or component pattern. use component pattern to select multiple components.\nwrap the pattern with quotes. use comma to separate patterns and \"!\" to exclude. e.g. \"ui/**, !ui/button\".\nuse '$' prefix to filter by states/attributes, e.g. '$deprecated', '$modified' or '$env:teambit.react/react'.\nuse `bit pattern --help` to understand patterns better and `bit pattern <pattern>` to validate the pattern."
          }
        ]
      },
      {
        "name": "get <component-name>",
        "alias": "",
        "options": [
          [
            "d",
            "debug",
            "show the origins where the aspects were taken from"
          ],
          [
            "j",
            "json",
            "format as json"
          ]
        ],
        "description": "list the aspects set on a component, as well as their configs and data",
        "extendedDescription": "",
        "group": "development",
        "private": false,
        "arguments": [
          {
            "name": "component-name",
            "description": "the component name or component id to fetch aspects for"
          }
        ]
      },
      {
        "name": "set <pattern> <aspect-id> [config]",
        "alias": "",
        "options": [
          [
            "m",
            "merge",
            "merge with an existing config if exits. (by default, it replaces overlapping existing configs)"
          ]
        ],
        "description": "set components with an aspect to extend their development tools, metadata and (possibly) artifacts",
        "extendedDescription": "",
        "group": "development",
        "private": false,
        "arguments": [
          {
            "name": "pattern",
            "description": "the components to extend. component name, component id, or component pattern. use component pattern to select multiple components.\nwrap the pattern with quotes. use comma to separate patterns and \"!\" to exclude. e.g. \"ui/**, !ui/button\".\nuse '$' prefix to filter by states/attributes, e.g. '$deprecated', '$modified' or '$env:teambit.react/react'.\nuse `bit pattern --help` to understand patterns better and `bit pattern <pattern>` to validate the pattern."
          },
          {
            "name": "aspect-id",
            "description": "the aspect's component id"
          },
          {
            "name": "config",
            "description": "the aspect config. enter the config as a stringified JSON (e.g. '{\"foo\":\"bar\"}' ). when no config is provided, an aspect is set with an empty config ({})."
          }
        ]
      },
      {
        "name": "unset <pattern> <aspect-id>",
        "alias": "",
        "options": [],
        "description": "unset an aspect from component(s).",
        "extendedDescription": "",
        "group": "development",
        "private": false,
        "arguments": [
          {
            "name": "pattern",
            "description": "the components to target. component name, component id, or component pattern. use component pattern to select multiple components.\nwrap the pattern with quotes. use comma to separate patterns and \"!\" to exclude. e.g. \"ui/**, !ui/button\".\nuse '$' prefix to filter by states/attributes, e.g. '$deprecated', '$modified' or '$env:teambit.react/react'.\nuse `bit pattern --help` to understand patterns better and `bit pattern <pattern>` to validate the pattern."
          },
          {
            "name": "aspect-id",
            "description": "the aspect's component id"
          }
        ]
      },
      {
        "name": "update <aspect-id> [pattern]",
        "alias": "",
        "options": [],
        "description": "update a version of an aspect for all or specified components",
        "extendedDescription": "",
        "group": "development",
        "private": false,
        "arguments": [
          {
            "name": "aspect-id",
            "description": "the aspect's component id. optionally, add a version (id@version), otherwise will use the latest version from the remote"
          },
          {
            "name": "pattern",
            "description": "the components to update (defaults to all components). component name, component id, or component pattern. use component pattern to select multiple components.\nwrap the pattern with quotes. use comma to separate patterns and \"!\" to exclude. e.g. \"ui/**, !ui/button\".\nuse '$' prefix to filter by states/attributes, e.g. '$deprecated', '$modified' or '$env:teambit.react/react'.\nuse `bit pattern --help` to understand patterns better and `bit pattern <pattern>` to validate the pattern."
          }
        ],
        "examples": [
          {
            "cmd": "bit aspect update scope.org/aspect '**/ui/**'",
            "description": "update all components with the \"ui\" namespace that use scope.org/aspect, to use its latest version"
          },
          {
            "cmd": "bit aspect update scope.org/aspect@2.0.0",
            "description": "update version of scope.org/aspect to version 2.0.0 for all components configured with that aspect."
          }
        ]
      }
    ]
  },
  {
    "name": "generate-preview [component-pattern]",
    "alias": "",
    "options": [
      [
        "n",
        "name <name>",
        "name for the preview"
      ]
    ],
    "description": "generate preview bundle for components",
    "extendedDescription": "",
    "group": "development",
    "private": true,
    "arguments": [
      {
        "name": "component-pattern",
        "description": "component name, component id, or component pattern. use component pattern to select multiple components.\nwrap the pattern with quotes. use comma to separate patterns and \"!\" to exclude. e.g. \"ui/**, !ui/button\".\nuse '$' prefix to filter by states/attributes, e.g. '$deprecated', '$modified' or '$env:teambit.react/react'.\nuse `bit pattern --help` to understand patterns better and `bit pattern <pattern>` to validate the pattern."
      }
    ]
  },
  {
    "name": "serve-preview",
    "alias": "",
    "options": [
      [
        "p",
        "port [port]",
        "port to run the server on"
      ]
    ],
    "description": "serve local preview bundle for components",
    "extendedDescription": "",
    "group": "development",
    "private": true
  },
  {
    "name": "format [component-pattern]",
    "alias": "",
    "options": [
      [
        "c",
        "changed",
        "format only new and modified components"
      ],
      [
        "",
        "check",
        "will output a human-friendly message and a list of unformatted files, if any"
      ],
      [
        "j",
        "json",
        "return the format results in json format"
      ]
    ],
    "description": "format components in the development workspace",
    "extendedDescription": "",
    "group": "development",
    "private": false,
    "arguments": [
      {
        "name": "component-pattern",
        "description": "component name, component id, or component pattern. use component pattern to select multiple components.\nwrap the pattern with quotes. use comma to separate patterns and \"!\" to exclude. e.g. \"ui/**, !ui/button\".\nuse '$' prefix to filter by states/attributes, e.g. '$deprecated', '$modified' or '$env:teambit.react/react'.\nuse `bit pattern --help` to understand patterns better and `bit pattern <pattern>` to validate the pattern."
      }
    ]
  },
  {
    "name": "lint [component-pattern]",
    "alias": "",
    "options": [
      [
        "c",
        "changed",
        "lint only new and modified components"
      ],
      [
        "f",
        "fix",
        "automatically fix problems"
      ],
      [
        "",
        "fix-type <fixType>",
        "specify the types of fixes to apply (problem, suggestion, layout)"
      ],
      [
        "j",
        "json",
        "return the lint results in json format"
      ]
    ],
    "description": "lint components in the development workspace",
    "extendedDescription": "",
    "group": "development",
    "private": false,
    "arguments": [
      {
        "name": "component-pattern",
        "description": "component name, component id, or component pattern. use component pattern to select multiple components.\nwrap the pattern with quotes. use comma to separate patterns and \"!\" to exclude. e.g. \"ui/**, !ui/button\".\nuse '$' prefix to filter by states/attributes, e.g. '$deprecated', '$modified' or '$env:teambit.react/react'.\nuse `bit pattern --help` to understand patterns better and `bit pattern <pattern>` to validate the pattern."
      }
    ]
  }
]